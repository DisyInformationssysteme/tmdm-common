// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, construire R40)
// Generated source version: 1.1.2

package talend.core.transformer.plugin.v2.tiscall.webservices;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.*;
import com.sun.xml.rpc.client.http.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class WSxml_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements talend.core.transformer.plugin.v2.tiscall.webservices.WSxml {
    
    
    
    /*
     *  public constructor
     */
    public WSxml_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://localhost:8083/WSxml_0.1/services/WSxml");
    }
    
    
    /*
     *  implementation of runJob
     */
    public talend.core.transformer.plugin.v2.tiscall.webservices.RunJobReturn runJob(talend.core.transformer.plugin.v2.tiscall.webservices.Args args)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(runJob_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_runJob_args_QNAME);
            _bodyBlock.setValue(args);
            _bodyBlock.setSerializer(ns1_myArgs_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            talend.core.transformer.plugin.v2.tiscall.webservices.RunJobReturn _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (talend.core.transformer.plugin.v2.tiscall.webservices.RunJobReturn)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (talend.core.transformer.plugin.v2.tiscall.webservices.RunJobReturn)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
        	e.printStackTrace();
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case runJob_OPCODE:
                _deserialize_runJob(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the runJob operation.
     */
    private void _deserialize_runJob(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myRunJobReturnObj =
            ns1_myRunJobReturn_LiteralSerializer.deserialize(ns1_runJob_runJobReturn_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_runJob_runJobReturn_QNAME);
        bodyBlock.setValue(myRunJobReturnObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    protected String _getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    
    protected void _preHandlingHook(StreamingSenderState state) throws Exception {
        super._preHandlingHook(state);
    }
    
    
    protected boolean _preRequestSendingHook(StreamingSenderState state) throws Exception {
        boolean bool = false;
        bool = super._preRequestSendingHook(state);
        return bool;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_myRunJobReturn_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", talend.core.transformer.plugin.v2.tiscall.webservices.RunJobReturn.class, ns1_runJobReturn_TYPE_QNAME);
        ns1_myArgs_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", talend.core.transformer.plugin.v2.tiscall.webservices.Args.class, ns1_args_TYPE_QNAME);
    }
    
    private static final QName _portName = new QName("http://talend.org", "WSxml");
    private static final int runJob_OPCODE = 0;
    private static final QName ns1_runJob_args_QNAME = new QName("http://talend.org", "args");
    private static final QName ns1_args_TYPE_QNAME = new QName("http://talend.org", "args");
    private CombinedSerializer ns1_myArgs_LiteralSerializer;
    private static final QName ns1_runJob_runJobReturn_QNAME = new QName("http://talend.org", "runJobReturn");
    private static final QName ns1_runJobReturn_TYPE_QNAME = new QName("http://talend.org", "runJobReturn");
    private CombinedSerializer ns1_myRunJobReturn_LiteralSerializer;
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "http://talend.org"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
