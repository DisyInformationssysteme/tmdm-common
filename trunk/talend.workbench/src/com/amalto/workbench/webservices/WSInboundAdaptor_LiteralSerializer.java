// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, construire R40)
// Generated source version: 1.1.2

package com.amalto.workbench.webservices;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.xsd.XSDConstants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;

public class WSInboundAdaptor_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable  {
    private static final QName ns1_name_QNAME = new QName("", "name");
    private static final QName ns3_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns3_myns3_string__java_lang_String_String_Serializer;
    private static final QName ns1_description_QNAME = new QName("", "description");
    private static final QName ns1_wsDataModelPK_QNAME = new QName("", "wsDataModelPK");
    private static final QName ns2_WSDataModelPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataModelPK");
    private CombinedSerializer ns2_myWSDataModelPK_LiteralSerializer;
    private static final QName ns1_wsSourcePK_QNAME = new QName("", "wsSourcePK");
    private static final QName ns2_WSSourcePK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSourcePK");
    private CombinedSerializer ns2_myWSSourcePK_LiteralSerializer;
    private static final QName ns1_xslt_QNAME = new QName("", "xslt");
    private static final QName ns1_WSInboundPluginPKs_QNAME = new QName("", "WSInboundPluginPKs");
    private static final QName ns2_WSInboundPluginPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundPluginPK");
    private CombinedSerializer ns2_myWSInboundPluginPK_LiteralSerializer;
    private static final QName ns1_wsPreTransformPKs_QNAME = new QName("", "wsPreTransformPKs");
    private static final QName ns2_WSTransformPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformPK");
    private CombinedSerializer ns2_myWSTransformPK_LiteralSerializer;
    private static final QName ns1_updates_QNAME = new QName("", "updates");
    private static final QName ns2_WSInboundAdaptorArray$2d$wsInboundAdaptors$2d$updates_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundAdaptorArray-wsInboundAdaptors-updates");
    private CombinedSerializer ns2_myWSInboundAdaptorArrayWsInboundAdaptorsUpdates_LiteralSerializer;
    
    public WSInboundAdaptor_LiteralSerializer(QName type, String encodingStyle) {
        this(type, encodingStyle, false);
    }
    
    public WSInboundAdaptor_LiteralSerializer(QName type, String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns3_myns3_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns3_string_TYPE_QNAME);
        ns2_myWSDataModelPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDataModelPK.class, ns2_WSDataModelPK_TYPE_QNAME);
        ns2_myWSSourcePK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSSourcePK.class, ns2_WSSourcePK_TYPE_QNAME);
        ns2_myWSInboundPluginPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInboundPluginPK.class, ns2_WSInboundPluginPK_TYPE_QNAME);
        ns2_myWSTransformPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformPK.class, ns2_WSTransformPK_TYPE_QNAME);
        ns2_myWSInboundAdaptorArrayWsInboundAdaptorsUpdates_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInboundAdaptorArrayWsInboundAdaptorsUpdates.class, ns2_WSInboundAdaptorArray$2d$wsInboundAdaptors$2d$updates_TYPE_QNAME);
    }
    
    public Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        com.amalto.workbench.webservices.WSInboundAdaptor instance = new com.amalto.workbench.webservices.WSInboundAdaptor();
        Object member=null;
        QName elementName;
        List values;
        Object value;
        
        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_name_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_name_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setName((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_name_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_description_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_description_QNAME, reader, context);
                instance.setDescription((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_description_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_wsDataModelPK_QNAME)) {
                member = ns2_myWSDataModelPK_LiteralSerializer.deserialize(ns1_wsDataModelPK_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setWsDataModelPK((com.amalto.workbench.webservices.WSDataModelPK)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_wsDataModelPK_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_wsSourcePK_QNAME)) {
                member = ns2_myWSSourcePK_LiteralSerializer.deserialize(ns1_wsSourcePK_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setWsSourcePK((com.amalto.workbench.webservices.WSSourcePK)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_wsSourcePK_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_xslt_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_xslt_QNAME, reader, context);
                instance.setXslt((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_xslt_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_WSInboundPluginPKs_QNAME))) {
            values = new ArrayList();
            for(;;) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_WSInboundPluginPKs_QNAME))) {
                    value = ns2_myWSInboundPluginPK_LiteralSerializer.deserialize(ns1_WSInboundPluginPKs_QNAME, reader, context);
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new com.amalto.workbench.webservices.WSInboundPluginPK[values.size()];
            member = values.toArray((Object[]) member);
            instance.setWSInboundPluginPKs((com.amalto.workbench.webservices.WSInboundPluginPK[])member);
        }
        else {
            instance.setWSInboundPluginPKs(new com.amalto.workbench.webservices.WSInboundPluginPK[0]);
        }
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_wsPreTransformPKs_QNAME))) {
            values = new ArrayList();
            for(;;) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_wsPreTransformPKs_QNAME))) {
                    value = ns2_myWSTransformPK_LiteralSerializer.deserialize(ns1_wsPreTransformPKs_QNAME, reader, context);
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new com.amalto.workbench.webservices.WSTransformPK[values.size()];
            member = values.toArray((Object[]) member);
            instance.setWsPreTransformPKs((com.amalto.workbench.webservices.WSTransformPK[])member);
        }
        else {
            instance.setWsPreTransformPKs(new com.amalto.workbench.webservices.WSTransformPK[0]);
        }
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_updates_QNAME))) {
            values = new ArrayList();
            for(;;) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_updates_QNAME))) {
                    value = ns2_myWSInboundAdaptorArrayWsInboundAdaptorsUpdates_LiteralSerializer.deserialize(ns1_updates_QNAME, reader, context);
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new com.amalto.workbench.webservices.WSInboundAdaptorArrayWsInboundAdaptorsUpdates[values.size()];
            member = values.toArray((Object[]) member);
            instance.setUpdates((com.amalto.workbench.webservices.WSInboundAdaptorArrayWsInboundAdaptorsUpdates[])member);
        }
        else {
            instance.setUpdates(new com.amalto.workbench.webservices.WSInboundAdaptorArrayWsInboundAdaptorsUpdates[0]);
        }
        
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (Object)instance;
    }
    
    public void doSerializeAttributes(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.amalto.workbench.webservices.WSInboundAdaptor instance = (com.amalto.workbench.webservices.WSInboundAdaptor)obj;
        
    }
    public void doSerialize(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.amalto.workbench.webservices.WSInboundAdaptor instance = (com.amalto.workbench.webservices.WSInboundAdaptor)obj;
        
        if (instance.getName() == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getName(), ns1_name_QNAME, null, writer, context);
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getDescription(), ns1_description_QNAME, null, writer, context);
        if (instance.getWsDataModelPK() == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myWSDataModelPK_LiteralSerializer.serialize(instance.getWsDataModelPK(), ns1_wsDataModelPK_QNAME, null, writer, context);
        if (instance.getWsSourcePK() == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myWSSourcePK_LiteralSerializer.serialize(instance.getWsSourcePK(), ns1_wsSourcePK_QNAME, null, writer, context);
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getXslt(), ns1_xslt_QNAME, null, writer, context);
        if (instance.getWSInboundPluginPKs() != null) {
            for (int i = 0; i < instance.getWSInboundPluginPKs().length; ++i) {
                ns2_myWSInboundPluginPK_LiteralSerializer.serialize(instance.getWSInboundPluginPKs()[i], ns1_WSInboundPluginPKs_QNAME, null, writer, context);
            }
        }
        if (instance.getWsPreTransformPKs() != null) {
            for (int i = 0; i < instance.getWsPreTransformPKs().length; ++i) {
                ns2_myWSTransformPK_LiteralSerializer.serialize(instance.getWsPreTransformPKs()[i], ns1_wsPreTransformPKs_QNAME, null, writer, context);
            }
        }
        if (instance.getUpdates() != null) {
            for (int i = 0; i < instance.getUpdates().length; ++i) {
                ns2_myWSInboundAdaptorArrayWsInboundAdaptorsUpdates_LiteralSerializer.serialize(instance.getUpdates()[i], ns1_updates_QNAME, null, writer, context);
            }
        }
    }
}
