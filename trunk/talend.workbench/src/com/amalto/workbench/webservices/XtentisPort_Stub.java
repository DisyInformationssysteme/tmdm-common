// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, construire R40)
// Generated source version: 1.1.2

package com.amalto.workbench.webservices;

import com.sun.xml.rpc.server.http.MessageContextProperties;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.streaming.*;
import com.sun.xml.rpc.soap.message.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.soap.SOAPEncodingConstants;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;
import java.lang.Class;
import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.*;
import com.sun.xml.rpc.client.http.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;

public class XtentisPort_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements com.amalto.workbench.webservices.XtentisPort {
    
    
    
    /*
     *  public constructor
     */
    public XtentisPort_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://localhost:8080/xtentis/XtentisPort");
    }
    
    
    /*
     *  implementation of putBackgroundJob
     */
    public com.amalto.workbench.webservices.WSBackgroundJobPK putBackgroundJob(com.amalto.workbench.webservices.WSPutBackgroundJob wsPutBackgroundJob)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putBackgroundJob_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putBackgroundJob_WSPutBackgroundJob_QNAME);
            _bodyBlock.setValue(wsPutBackgroundJob);
            _bodyBlock.setSerializer(ns1_myWSPutBackgroundJob_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBackgroundJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getRole
     */
    public com.amalto.workbench.webservices.WSRole getRole(com.amalto.workbench.webservices.WSGetRole wsGetRole)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getRole_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getRole_WSGetRole_QNAME);
            _bodyBlock.setValue(wsGetRole);
            _bodyBlock.setSerializer(ns1_myWSGetRole_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRole _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRole)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRole)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getMenu
     */
    public com.amalto.workbench.webservices.WSMenu getMenu(com.amalto.workbench.webservices.WSGetMenu wsGetMenu)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getMenu_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getMenu_WSGetMenu_QNAME);
            _bodyBlock.setValue(wsGetMenu);
            _bodyBlock.setSerializer(ns1_myWSGetMenu_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSMenu _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSMenu)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSMenu)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of executeRoutingOrderV2Asynchronously
     */
    public com.amalto.workbench.webservices.WSRoutingOrderV2PK executeRoutingOrderV2Asynchronously(com.amalto.workbench.webservices.WSExecuteRoutingOrderV2Asynchronously wsExecuteRoutingOrderAsynchronously)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(executeRoutingOrderV2Asynchronously_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_executeRoutingOrderV2Asynchronously_WSExecuteRoutingOrderV2Asynchronously_QNAME);
            _bodyBlock.setValue(wsExecuteRoutingOrderAsynchronously);
            _bodyBlock.setSerializer(ns1_myWSExecuteRoutingOrderV2Asynchronously_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingOrderV2PK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2PK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2PK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransformerPKs
     */
    public com.amalto.workbench.webservices.WSTransformerPKArray getTransformerPKs(com.amalto.workbench.webservices.WSGetTransformerPKs regex)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransformerPKs_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransformerPKs_WSGetTransformerPKs_QNAME);
            _bodyBlock.setValue(regex);
            _bodyBlock.setSerializer(ns1_myWSGetTransformerPKs_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerPKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerPKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerPKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of processFileUsingTransformerAsBackgroundJob
     */
    public com.amalto.workbench.webservices.WSBackgroundJobPK processFileUsingTransformerAsBackgroundJob(com.amalto.workbench.webservices.WSProcessFileUsingTransformerAsBackgroundJob wsProcessFileUsingTransformerAsBackgroundJob)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(processFileUsingTransformerAsBackgroundJob_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_processFileUsingTransformerAsBackgroundJob_WSProcessFileUsingTransformerAsBackgroundJob_QNAME);
            _bodyBlock.setValue(wsProcessFileUsingTransformerAsBackgroundJob);
            _bodyBlock.setSerializer(ns1_myWSProcessFileUsingTransformerAsBackgroundJob_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBackgroundJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of xPathsSearch
     */
    public com.amalto.workbench.webservices.WSStringArray xPathsSearch(com.amalto.workbench.webservices.WSXPathsSearch wsXPathsSearch)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(xPathsSearch_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_xPathsSearch_WSXPathsSearch_QNAME);
            _bodyBlock.setValue(wsXPathsSearch);
            _bodyBlock.setSerializer(ns1_myWSXPathsSearch_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStringArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStringArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStringArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getComponentVersion
     */
    public com.amalto.workbench.webservices.WSVersion getComponentVersion(com.amalto.workbench.webservices.WSGetComponentVersion wsGetComponentVersion)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getComponentVersion_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getComponentVersion_WSGetComponentVersion_QNAME);
            _bodyBlock.setValue(wsGetComponentVersion);
            _bodyBlock.setSerializer(ns1_myWSGetComponentVersion_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSVersion _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSVersion)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSVersion)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putView
     */
    public com.amalto.workbench.webservices.WSViewPK putView(com.amalto.workbench.webservices.WSPutView wsView)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putView_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putView_WSPutView_QNAME);
            _bodyBlock.setValue(wsView);
            _bodyBlock.setSerializer(ns1_myWSPutView_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSViewPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSViewPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSViewPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putTransformerPluginConfiguration
     */
    public com.amalto.workbench.webservices.WSString putTransformerPluginConfiguration(com.amalto.workbench.webservices.WSTransformerPluginPutConfiguration wsPutConfiguration)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putTransformerPluginConfiguration_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putTransformerPluginConfiguration_WSTransformerPluginPutConfiguration_QNAME);
            _bodyBlock.setValue(wsPutConfiguration);
            _bodyBlock.setSerializer(ns1_myWSTransformerPluginPutConfiguration_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getInboundAdaptorsByCriteria
     */
    public com.amalto.workbench.webservices.WSInboundAdaptorArray getInboundAdaptorsByCriteria(com.amalto.workbench.webservices.WSGetInboundAdaptorsByCriteria criteria)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getInboundAdaptorsByCriteria_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getInboundAdaptorsByCriteria_WSGetInboundAdaptorsByCriteria_QNAME);
            _bodyBlock.setValue(criteria);
            _bodyBlock.setSerializer(ns1_myWSGetInboundAdaptorsByCriteria_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInboundAdaptorArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInboundAdaptorArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInboundAdaptorArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of routeItemV2
     */
    public com.amalto.workbench.webservices.WSRoutingRulePKArray routeItemV2(com.amalto.workbench.webservices.WSRouteItemV2 wsRouteItem)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(routeItemV2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_routeItemV2_WSRouteItemV2_QNAME);
            _bodyBlock.setValue(wsRouteItem);
            _bodyBlock.setSerializer(ns1_myWSRouteItemV2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingRulePKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingRulePKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingRulePKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getSources
     */
    public com.amalto.workbench.webservices.WSSourceArray getSources(com.amalto.workbench.webservices.WSRegexSources regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getSources_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getSources_WSRegexSources_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSRegexSources_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSSourceArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSSourceArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSSourceArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getOutboundAdaptor
     */
    public com.amalto.workbench.webservices.WSOutboundAdaptor getOutboundAdaptor(com.amalto.workbench.webservices.WSGetOutboundAdaptor wsOutboundAdaptorpk)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getOutboundAdaptor_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getOutboundAdaptor_WSGetOutboundAdaptor_QNAME);
            _bodyBlock.setValue(wsOutboundAdaptorpk);
            _bodyBlock.setSerializer(ns1_myWSGetOutboundAdaptor_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSOutboundAdaptor _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSOutboundAdaptor)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSOutboundAdaptor)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getViewPKs
     */
    public com.amalto.workbench.webservices.WSViewPKArray getViewPKs(com.amalto.workbench.webservices.WSGetViewPKs regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getViewPKs_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getViewPKs_WSGetViewPKs_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSGetViewPKs_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSViewPKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSViewPKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSViewPKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsRole
     */
    public com.amalto.workbench.webservices.WSBoolean existsRole(com.amalto.workbench.webservices.WSExistsRole wsExistsRole)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsRole_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsRole_WSExistsRole_QNAME);
            _bodyBlock.setValue(wsExistsRole);
            _bodyBlock.setSerializer(ns1_myWSExistsRole_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsRoutingOrder
     */
    public com.amalto.workbench.webservices.WSBoolean existsRoutingOrder(com.amalto.workbench.webservices.WSExistsRoutingOrder wsExistsRoutingOrder)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsRoutingOrder_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsRoutingOrder_WSExistsRoutingOrder_QNAME);
            _bodyBlock.setValue(wsExistsRoutingOrder);
            _bodyBlock.setSerializer(ns1_myWSExistsRoutingOrder_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of initMDM
     */
    public com.amalto.workbench.webservices.WSInt initMDM(com.amalto.workbench.webservices.WSInitData initData)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(initMDM_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_initMDM_WSInitData_QNAME);
            _bodyBlock.setValue(initData);
            _bodyBlock.setSerializer(ns1_myWSInitData_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInt _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInt)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInt)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of processBytesUsingTransformer
     */
    public com.amalto.workbench.webservices.WSPipeline processBytesUsingTransformer(com.amalto.workbench.webservices.WSProcessBytesUsingTransformer wsProcessBytesUsingTransformer)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(processBytesUsingTransformer_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_processBytesUsingTransformer_WSProcessBytesUsingTransformer_QNAME);
            _bodyBlock.setValue(wsProcessBytesUsingTransformer);
            _bodyBlock.setSerializer(ns1_myWSProcessBytesUsingTransformer_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSPipeline _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSPipeline)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSPipeline)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of executeStoredProcedure
     */
    public com.amalto.workbench.webservices.WSStringArray executeStoredProcedure(com.amalto.workbench.webservices.WSExecuteStoredProcedure wsExecuteStoredProcedure)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(executeStoredProcedure_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_executeStoredProcedure_WSExecuteStoredProcedure_QNAME);
            _bodyBlock.setValue(wsExecuteStoredProcedure);
            _bodyBlock.setSerializer(ns1_myWSExecuteStoredProcedure_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStringArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStringArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStringArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of serviceAction
     */
    public com.amalto.workbench.webservices.WSString serviceAction(com.amalto.workbench.webservices.WSServiceAction wsServiceAction)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(serviceAction_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_serviceAction_WSServiceAction_QNAME);
            _bodyBlock.setValue(wsServiceAction);
            _bodyBlock.setSerializer(ns1_myWSServiceAction_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getRolePKs
     */
    public com.amalto.workbench.webservices.WSRolePKArray getRolePKs(com.amalto.workbench.webservices.WSGetRolePKs regex)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getRolePKs_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getRolePKs_WSGetRolePKs_QNAME);
            _bodyBlock.setValue(regex);
            _bodyBlock.setSerializer(ns1_myWSGetRolePKs_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRolePKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRolePKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRolePKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getView
     */
    public com.amalto.workbench.webservices.WSView getView(com.amalto.workbench.webservices.WSGetView wsViewPK)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getView_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getView_WSGetView_QNAME);
            _bodyBlock.setValue(wsViewPK);
            _bodyBlock.setSerializer(ns1_myWSGetView_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSView _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSView)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSView)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getBusinessElementValues
     */
    public com.amalto.workbench.webservices.WSStringArray getBusinessElementValues(com.amalto.workbench.webservices.WSGetBusinessElementValues wsGetBusinessElementValues)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getBusinessElementValues_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getBusinessElementValues_WSGetBusinessElementValues_QNAME);
            _bodyBlock.setValue(wsGetBusinessElementValues);
            _bodyBlock.setSerializer(ns1_myWSGetBusinessElementValues_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStringArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStringArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStringArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteMenu
     */
    public com.amalto.workbench.webservices.WSMenuPK deleteMenu(com.amalto.workbench.webservices.WSDeleteMenu wsMenuDelete)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteMenu_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteMenu_WSDeleteMenu_QNAME);
            _bodyBlock.setValue(wsMenuDelete);
            _bodyBlock.setSerializer(ns1_myWSDeleteMenu_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSMenuPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSMenuPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSMenuPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getOutboundPlugins
     */
    public com.amalto.workbench.webservices.WSOutboundPluginArray getOutboundPlugins(com.amalto.workbench.webservices.WSRegexOutboundPlugins regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getOutboundPlugins_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getOutboundPlugins_WSRegexOutboundPlugins_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSRegexOutboundPlugins_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSOutboundPluginArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSOutboundPluginArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSOutboundPluginArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteInboundAdaptor
     */
    public com.amalto.workbench.webservices.WSInboundAdaptorPK deleteInboundAdaptor(com.amalto.workbench.webservices.WSDeleteInboundAdaptor wsInboundAdaptordel)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteInboundAdaptor_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteInboundAdaptor_WSDeleteInboundAdaptor_QNAME);
            _bodyBlock.setValue(wsInboundAdaptordel);
            _bodyBlock.setSerializer(ns1_myWSDeleteInboundAdaptor_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInboundAdaptorPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInboundAdaptorPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInboundAdaptorPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putBusinessConcept
     */
    public com.amalto.workbench.webservices.WSString putBusinessConcept(com.amalto.workbench.webservices.WSPutBusinessConcept wsPutBusinessConcept)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putBusinessConcept_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putBusinessConcept_WSPutBusinessConcept_QNAME);
            _bodyBlock.setValue(wsPutBusinessConcept);
            _bodyBlock.setSerializer(ns1_myWSPutBusinessConcept_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putMenu
     */
    public com.amalto.workbench.webservices.WSMenuPK putMenu(com.amalto.workbench.webservices.WSPutMenu wsMenu)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putMenu_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putMenu_WSPutMenu_QNAME);
            _bodyBlock.setValue(wsMenu);
            _bodyBlock.setSerializer(ns1_myWSPutMenu_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSMenuPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSMenuPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSMenuPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getJobs
     */
    public com.amalto.workbench.webservices.WSJobArray getJobs(com.amalto.workbench.webservices.WSRegexJobs regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getJobs_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getJobs_WSRegexJobs_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSRegexJobs_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSJobArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSJobArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSJobArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteRoutingOrder
     */
    public com.amalto.workbench.webservices.WSRoutingOrderPK deleteRoutingOrder(com.amalto.workbench.webservices.WSDeleteRoutingOrder wsDeleteRoutingOrder)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteRoutingOrder_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteRoutingOrder_WSDeleteRoutingOrder_QNAME);
            _bodyBlock.setValue(wsDeleteRoutingOrder);
            _bodyBlock.setSerializer(ns1_myWSDeleteRoutingOrder_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingOrderPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putInboundPlugin
     */
    public com.amalto.workbench.webservices.WSInboundPluginPK putInboundPlugin(com.amalto.workbench.webservices.WSPutInboundPlugin wsInboundPlugin)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putInboundPlugin_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putInboundPlugin_WSPutInboundPlugin_QNAME);
            _bodyBlock.setValue(wsInboundPlugin);
            _bodyBlock.setSerializer(ns1_myWSPutInboundPlugin_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInboundPluginPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInboundPluginPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInboundPluginPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putStoredProcedure
     */
    public com.amalto.workbench.webservices.WSStoredProcedurePK putStoredProcedure(com.amalto.workbench.webservices.WSPutStoredProcedure wsStoredProcedure)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putStoredProcedure_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putStoredProcedure_WSPutStoredProcedure_QNAME);
            _bodyBlock.setValue(wsStoredProcedure);
            _bodyBlock.setSerializer(ns1_myWSPutStoredProcedure_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStoredProcedurePK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStoredProcedurePK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStoredProcedurePK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteDestination
     */
    public com.amalto.workbench.webservices.WSDestinationPK deleteDestination(com.amalto.workbench.webservices.WSDeleteDestination wsDestinationDel)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteDestination_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteDestination_WSDeleteDestination_QNAME);
            _bodyBlock.setValue(wsDestinationDel);
            _bodyBlock.setSerializer(ns1_myWSDeleteDestination_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDestinationPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDestinationPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDestinationPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteTransformer
     */
    public com.amalto.workbench.webservices.WSTransformerPK deleteTransformer(com.amalto.workbench.webservices.WSDeleteTransformer wsTransformerDelete)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteTransformer_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteTransformer_WSDeleteTransformer_QNAME);
            _bodyBlock.setValue(wsTransformerDelete);
            _bodyBlock.setSerializer(ns1_myWSDeleteTransformer_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getBusinessConcepts
     */
    public com.amalto.workbench.webservices.WSStringArray getBusinessConcepts(com.amalto.workbench.webservices.WSGetBusinessConcepts wsGetBusinessConcepts)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getBusinessConcepts_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getBusinessConcepts_WSGetBusinessConcepts_QNAME);
            _bodyBlock.setValue(wsGetBusinessConcepts);
            _bodyBlock.setSerializer(ns1_myWSGetBusinessConcepts_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStringArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStringArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStringArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putRole
     */
    public com.amalto.workbench.webservices.WSRolePK putRole(com.amalto.workbench.webservices.WSPutRole wsRole)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putRole_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putRole_WSPutRole_QNAME);
            _bodyBlock.setValue(wsRole);
            _bodyBlock.setSerializer(ns1_myWSPutRole_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRolePK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRolePK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRolePK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putItem
     */
    public com.amalto.workbench.webservices.WSItemPK putItem(com.amalto.workbench.webservices.WSPutItem wsPutItem)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putItem_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putItem_WSPutItem_QNAME);
            _bodyBlock.setValue(wsPutItem);
            _bodyBlock.setSerializer(ns1_myWSPutItem_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSItemPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSItemPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSItemPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransformer
     */
    public com.amalto.workbench.webservices.WSTransformer getTransformer(com.amalto.workbench.webservices.WSGetTransformer wsGetTransformer)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransformer_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransformer_WSGetTransformer_QNAME);
            _bodyBlock.setValue(wsGetTransformer);
            _bodyBlock.setSerializer(ns1_myWSGetTransformer_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformer _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformer)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformer)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransforms
     */
    public com.amalto.workbench.webservices.WSTransformArray getTransforms(com.amalto.workbench.webservices.WSRegexTransforms regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransforms_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransforms_WSRegexTransforms_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSRegexTransforms_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putDataCluster
     */
    public com.amalto.workbench.webservices.WSDataClusterPK putDataCluster(com.amalto.workbench.webservices.WSPutDataCluster wsDataCluster)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putDataCluster_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putDataCluster_WSPutDataCluster_QNAME);
            _bodyBlock.setValue(wsDataCluster);
            _bodyBlock.setSerializer(ns1_myWSPutDataCluster_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDataClusterPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDataClusterPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDataClusterPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransformerV2PKs
     */
    public com.amalto.workbench.webservices.WSTransformerV2PKArray getTransformerV2PKs(com.amalto.workbench.webservices.WSGetTransformerV2PKs regex)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransformerV2PKs_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransformerV2PKs_WSGetTransformerV2PKs_QNAME);
            _bodyBlock.setValue(regex);
            _bodyBlock.setSerializer(ns1_myWSGetTransformerV2PKs_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerV2PKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerV2PKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerV2PKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of projectItem
     */
    public com.amalto.workbench.webservices.WSItemPK projectItem(com.amalto.workbench.webservices.WSProjectItem wsProjectItem)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(projectItem_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_projectItem_WSProjectItem_QNAME);
            _bodyBlock.setValue(wsProjectItem);
            _bodyBlock.setSerializer(ns1_myWSProjectItem_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSItemPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSItemPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSItemPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getStoredProcedure
     */
    public com.amalto.workbench.webservices.WSStoredProcedure getStoredProcedure(com.amalto.workbench.webservices.WSGetStoredProcedure wsGetStoredProcedure)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getStoredProcedure_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getStoredProcedure_WSGetStoredProcedure_QNAME);
            _bodyBlock.setValue(wsGetStoredProcedure);
            _bodyBlock.setSerializer(ns1_myWSGetStoredProcedure_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStoredProcedure _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStoredProcedure)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStoredProcedure)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getServicesList
     */
    public com.amalto.workbench.webservices.WSServicesList getServicesList(com.amalto.workbench.webservices.WSGetServicesList wsGetServicesList)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getServicesList_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getServicesList_WSGetServicesList_QNAME);
            _bodyBlock.setValue(wsGetServicesList);
            _bodyBlock.setSerializer(ns1_myWSGetServicesList_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSServicesList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSServicesList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSServicesList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsDataModel
     */
    public com.amalto.workbench.webservices.WSBoolean existsDataModel(com.amalto.workbench.webservices.WSExistsDataModel wsDataModelExists)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsDataModel_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsDataModel_WSExistsDataModel_QNAME);
            _bodyBlock.setValue(wsDataModelExists);
            _bodyBlock.setSerializer(ns1_myWSExistsDataModel_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getRoutingOrder
     */
    public com.amalto.workbench.webservices.WSRoutingOrder getRoutingOrder(com.amalto.workbench.webservices.WSGetRoutingOrder wsGetRoutingOrder)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getRoutingOrder_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getRoutingOrder_WSGetRoutingOrder_QNAME);
            _bodyBlock.setValue(wsGetRoutingOrder);
            _bodyBlock.setSerializer(ns1_myWSGetRoutingOrder_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingOrder _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingOrder)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingOrder)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getOutboundPlugin
     */
    public com.amalto.workbench.webservices.WSOutboundPlugin getOutboundPlugin(com.amalto.workbench.webservices.WSGetOutboundPlugin wsOutboundPluginPK)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getOutboundPlugin_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getOutboundPlugin_WSGetOutboundPlugin_QNAME);
            _bodyBlock.setValue(wsOutboundPluginPK);
            _bodyBlock.setSerializer(ns1_myWSGetOutboundPlugin_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSOutboundPlugin _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSOutboundPlugin)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSOutboundPlugin)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getDestination
     */
    public com.amalto.workbench.webservices.WSDestination getDestination(com.amalto.workbench.webservices.WSGetDestination wsDestinationPK)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getDestination_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getDestination_WSGetDestination_QNAME);
            _bodyBlock.setValue(wsDestinationPK);
            _bodyBlock.setSerializer(ns1_myWSGetDestination_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDestination _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDestination)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDestination)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getRoutingRulePKs
     */
    public com.amalto.workbench.webservices.WSRoutingRulePKArray getRoutingRulePKs(com.amalto.workbench.webservices.WSGetRoutingRulePKs regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getRoutingRulePKs_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getRoutingRulePKs_WSGetRoutingRulePKs_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSGetRoutingRulePKs_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingRulePKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingRulePKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingRulePKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putVersioningSystemConfiguration
     */
    public com.amalto.workbench.webservices.WSString putVersioningSystemConfiguration(com.amalto.workbench.webservices.WSPutVersioningSystemConfiguration wsPutVersioningSystemConfiguration)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putVersioningSystemConfiguration_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putVersioningSystemConfiguration_WSPutVersioningSystemConfiguration_QNAME);
            _bodyBlock.setValue(wsPutVersioningSystemConfiguration);
            _bodyBlock.setSerializer(ns1_myWSPutVersioningSystemConfiguration_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of extractUsingTransformerThruView
     */
    public com.amalto.workbench.webservices.WSPipeline extractUsingTransformerThruView(com.amalto.workbench.webservices.WSExtractUsingTransformerThruView wsExtractUsingTransformerThruView)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(extractUsingTransformerThruView_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_extractUsingTransformerThruView_WSExtractUsingTransformerThruView_QNAME);
            _bodyBlock.setValue(wsExtractUsingTransformerThruView);
            _bodyBlock.setSerializer(ns1_myWSExtractUsingTransformerThruView_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSPipeline _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSPipeline)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSPipeline)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of versioningTagObjects
     */
    public com.amalto.workbench.webservices.WSBackgroundJobPK versioningTagObjects(com.amalto.workbench.webservices.WSVersioningTagObjects wsVersioningTagObjects)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(versioningTagObjects_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_versioningTagObjects_WSVersioningTagObjects_QNAME);
            _bodyBlock.setValue(wsVersioningTagObjects);
            _bodyBlock.setSerializer(ns1_myWSVersioningTagObjects_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBackgroundJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteRole
     */
    public com.amalto.workbench.webservices.WSRolePK deleteRole(com.amalto.workbench.webservices.WSDeleteRole wsRoleDelete)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteRole_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteRole_WSDeleteRole_QNAME);
            _bodyBlock.setValue(wsRoleDelete);
            _bodyBlock.setSerializer(ns1_myWSDeleteRole_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRolePK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRolePK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRolePK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putTransformerPluginV2Configuration
     */
    public com.amalto.workbench.webservices.WSString putTransformerPluginV2Configuration(com.amalto.workbench.webservices.WSTransformerPluginV2PutConfiguration wsPutConfiguration)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putTransformerPluginV2Configuration_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putTransformerPluginV2Configuration_WSTransformerPluginV2PutConfiguration_QNAME);
            _bodyBlock.setValue(wsPutConfiguration);
            _bodyBlock.setSerializer(ns1_myWSTransformerPluginV2PutConfiguration_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsTransformerPlugin
     */
    public com.amalto.workbench.webservices.WSBoolean existsTransformerPlugin(com.amalto.workbench.webservices.WSExistsTransformerPlugin wsExistsTransformerPlugin)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsTransformerPlugin_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsTransformerPlugin_WSExistsTransformerPlugin_QNAME);
            _bodyBlock.setValue(wsExistsTransformerPlugin);
            _bodyBlock.setSerializer(ns1_myWSExistsTransformerPlugin_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of routeItemNow
     */
    public com.amalto.workbench.webservices.WSRouterStatus routeItemNow(com.amalto.workbench.webservices.WSRouteItemNow wsRouteItemNow)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(routeItemNow_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_routeItemNow_WSRouteItemNow_QNAME);
            _bodyBlock.setValue(wsRouteItemNow);
            _bodyBlock.setSerializer(ns1_myWSRouteItemNow_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRouterStatus _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRouterStatus)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRouterStatus)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getVersioningSystemConfiguration
     */
    public com.amalto.workbench.webservices.WSVersioningSystemConfiguration getVersioningSystemConfiguration(com.amalto.workbench.webservices.WSGetVersioningSystemConfiguration wsGetVersioningSystemConfiguration)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getVersioningSystemConfiguration_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getVersioningSystemConfiguration_WSGetVersioningSystemConfiguration_QNAME);
            _bodyBlock.setValue(wsGetVersioningSystemConfiguration);
            _bodyBlock.setSerializer(ns1_myWSGetVersioningSystemConfiguration_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSVersioningSystemConfiguration _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSVersioningSystemConfiguration)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSVersioningSystemConfiguration)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getMenuPKs
     */
    public com.amalto.workbench.webservices.WSMenuPKArray getMenuPKs(com.amalto.workbench.webservices.WSGetMenuPKs regex)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getMenuPKs_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getMenuPKs_WSGetMenuPKs_QNAME);
            _bodyBlock.setValue(regex);
            _bodyBlock.setSerializer(ns1_myWSGetMenuPKs_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSMenuPKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSMenuPKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSMenuPKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putTransformer
     */
    public com.amalto.workbench.webservices.WSTransformerPK putTransformer(com.amalto.workbench.webservices.WSPutTransformer wsTransformer)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putTransformer_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putTransformer_WSPutTransformer_QNAME);
            _bodyBlock.setValue(wsTransformer);
            _bodyBlock.setSerializer(ns1_myWSPutTransformer_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransform
     */
    public com.amalto.workbench.webservices.WSTransform getTransform(com.amalto.workbench.webservices.WSGetTransform wsTransformPK)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransform_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransform_WSGetTransform_QNAME);
            _bodyBlock.setValue(wsTransformPK);
            _bodyBlock.setSerializer(ns1_myWSGetTransform_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransform _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransform)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransform)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getBackgroundJob
     */
    public com.amalto.workbench.webservices.WSBackgroundJob getBackgroundJob(com.amalto.workbench.webservices.WSGetBackgroundJob wsGetBackgroundJob)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getBackgroundJob_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getBackgroundJob_WSGetBackgroundJob_QNAME);
            _bodyBlock.setValue(wsGetBackgroundJob);
            _bodyBlock.setSerializer(ns1_myWSGetBackgroundJob_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBackgroundJob _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBackgroundJob)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBackgroundJob)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getDocuments
     */
    public com.amalto.workbench.webservices.WSDocumentArray getDocuments(com.amalto.workbench.webservices.WSRegexDocuments regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getDocuments_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getDocuments_WSRegexDocuments_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSRegexDocuments_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDocumentArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDocumentArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDocumentArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of versioningRestoreItems
     */
    public com.amalto.workbench.webservices.WSBackgroundJobPK versioningRestoreItems(com.amalto.workbench.webservices.WSVersioningRestoreItems wsVersioningRestoreItems)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(versioningRestoreItems_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_versioningRestoreItems_WSVersioningRestoreItems_QNAME);
            _bodyBlock.setValue(wsVersioningRestoreItems);
            _bodyBlock.setSerializer(ns1_myWSVersioningRestoreItems_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBackgroundJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsTransformerV2
     */
    public com.amalto.workbench.webservices.WSBoolean existsTransformerV2(com.amalto.workbench.webservices.WSExistsTransformerV2 wsExistsTransformerV2)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsTransformerV2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsTransformerV2_WSExistsTransformerV2_QNAME);
            _bodyBlock.setValue(wsExistsTransformerV2);
            _bodyBlock.setSerializer(ns1_myWSExistsTransformerV2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteDataModel
     */
    public com.amalto.workbench.webservices.WSDataModelPK deleteDataModel(com.amalto.workbench.webservices.WSDeleteDataModel wsDeleteDataModel)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteDataModel_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteDataModel_WSDeleteDataModel_QNAME);
            _bodyBlock.setValue(wsDeleteDataModel);
            _bodyBlock.setSerializer(ns1_myWSDeleteDataModel_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDataModelPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDataModelPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDataModelPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putDocumentInAString
     */
    public com.amalto.workbench.webservices.WSDocumentPK putDocumentInAString(com.amalto.workbench.webservices.WSPutDocumentInAString wsPutDocumentInAString)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putDocumentInAString_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putDocumentInAString_WSPutDocumentInAString_QNAME);
            _bodyBlock.setValue(wsPutDocumentInAString);
            _bodyBlock.setSerializer(ns1_myWSPutDocumentInAString_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDocumentPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDocumentPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDocumentPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getStoredProcedurePKs
     */
    public com.amalto.workbench.webservices.WSStoredProcedurePKArray getStoredProcedurePKs(com.amalto.workbench.webservices.WSRegexStoredProcedure regex)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getStoredProcedurePKs_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getStoredProcedurePKs_WSRegexStoredProcedure_QNAME);
            _bodyBlock.setValue(regex);
            _bodyBlock.setSerializer(ns1_myWSRegexStoredProcedure_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStoredProcedurePKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStoredProcedurePKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStoredProcedurePKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of executeInboundPlugin
     */
    public com.amalto.workbench.webservices.WSString executeInboundPlugin(com.amalto.workbench.webservices.WSExecuteInboundPlugin wsExecuteInboundPlugin)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(executeInboundPlugin_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_executeInboundPlugin_WSExecuteInboundPlugin_QNAME);
            _bodyBlock.setValue(wsExecuteInboundPlugin);
            _bodyBlock.setSerializer(ns1_myWSExecuteInboundPlugin_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteOutboundPlugin
     */
    public com.amalto.workbench.webservices.WSOutboundPluginPK deleteOutboundPlugin(com.amalto.workbench.webservices.WSDeleteOutboundPlugin wsDeleteOutboundPlugin)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteOutboundPlugin_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteOutboundPlugin_WSDeleteOutboundPlugin_QNAME);
            _bodyBlock.setValue(wsDeleteOutboundPlugin);
            _bodyBlock.setSerializer(ns1_myWSDeleteOutboundPlugin_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSOutboundPluginPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSOutboundPluginPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSOutboundPluginPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteItems
     */
    public com.amalto.workbench.webservices.WSInt deleteItems(com.amalto.workbench.webservices.WSDeleteItems wsDeleteItems)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteItems_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteItems_WSDeleteItems_QNAME);
            _bodyBlock.setValue(wsDeleteItems);
            _bodyBlock.setSerializer(ns1_myWSDeleteItems_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInt _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInt)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInt)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getOutboundHTMLBodyForm
     */
    public com.amalto.workbench.webservices.WSOutboundHTMLBodyForm getOutboundHTMLBodyForm(com.amalto.workbench.webservices.WSGetOutboundHTMLBodyForm wsGetOutboundHTMLBodyForm)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getOutboundHTMLBodyForm_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getOutboundHTMLBodyForm_WSGetOutboundHTMLBodyForm_QNAME);
            _bodyBlock.setValue(wsGetOutboundHTMLBodyForm);
            _bodyBlock.setSerializer(ns1_myWSGetOutboundHTMLBodyForm_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSOutboundHTMLBodyForm _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSOutboundHTMLBodyForm)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSOutboundHTMLBodyForm)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsRoutingRule
     */
    public com.amalto.workbench.webservices.WSBoolean existsRoutingRule(com.amalto.workbench.webservices.WSExistsRoutingRule wsExistsRoutingRule)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsRoutingRule_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsRoutingRule_WSExistsRoutingRule_QNAME);
            _bodyBlock.setValue(wsExistsRoutingRule);
            _bodyBlock.setSerializer(ns1_myWSExistsRoutingRule_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteRoutingRule
     */
    public com.amalto.workbench.webservices.WSRoutingRulePK deleteRoutingRule(com.amalto.workbench.webservices.WSDeleteRoutingRule wsRoutingRuleDel)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteRoutingRule_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteRoutingRule_WSDeleteRoutingRule_QNAME);
            _bodyBlock.setValue(wsRoutingRuleDel);
            _bodyBlock.setSerializer(ns1_myWSDeleteRoutingRule_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingRulePK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingRulePK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingRulePK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getBusinessConceptKey
     */
    public com.amalto.workbench.webservices.WSConceptKey getBusinessConceptKey(com.amalto.workbench.webservices.WSGetBusinessConceptKey wsGetBusinessConceptKey)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getBusinessConceptKey_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getBusinessConceptKey_WSGetBusinessConceptKey_QNAME);
            _bodyBlock.setValue(wsGetBusinessConceptKey);
            _bodyBlock.setSerializer(ns1_myWSGetBusinessConceptKey_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSConceptKey _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSConceptKey)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSConceptKey)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of extractUsingTransformer
     */
    public com.amalto.workbench.webservices.WSPipeline extractUsingTransformer(com.amalto.workbench.webservices.WSExtractUsingTransformer wsExtractUsingTransformer)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(extractUsingTransformer_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_extractUsingTransformer_WSExtractUsingTransformer_QNAME);
            _bodyBlock.setValue(wsExtractUsingTransformer);
            _bodyBlock.setSerializer(ns1_myWSExtractUsingTransformer_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSPipeline _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSPipeline)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSPipeline)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of executeRoutingOrderNow
     */
    public com.amalto.workbench.webservices.WSRouterStatus executeRoutingOrderNow(com.amalto.workbench.webservices.WSExecuteRoutingOrderNow wsExecuteRoutingOrderNow)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(executeRoutingOrderNow_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_executeRoutingOrderNow_WSExecuteRoutingOrderNow_QNAME);
            _bodyBlock.setValue(wsExecuteRoutingOrderNow);
            _bodyBlock.setSerializer(ns1_myWSExecuteRoutingOrderNow_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRouterStatus _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRouterStatus)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRouterStatus)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putDocumentInAFile
     */
    public com.amalto.workbench.webservices.WSDocumentPK putDocumentInAFile(com.amalto.workbench.webservices.WSPutDocumentInAFile wsPutDocumentInAFile)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putDocumentInAFile_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putDocumentInAFile_WSPutDocumentInAFile_QNAME);
            _bodyBlock.setValue(wsPutDocumentInAFile);
            _bodyBlock.setSerializer(ns1_myWSPutDocumentInAFile_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDocumentPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDocumentPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDocumentPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getItemPKsByCriteria
     */
    public com.amalto.workbench.webservices.WSItemPKsByCriteriaResponse getItemPKsByCriteria(com.amalto.workbench.webservices.WSGetItemPKsByCriteria wsGetItemPKsByCriteria)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getItemPKsByCriteria_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getItemPKsByCriteria_WSGetItemPKsByCriteria_QNAME);
            _bodyBlock.setValue(wsGetItemPKsByCriteria);
            _bodyBlock.setSerializer(ns1_myWSGetItemPKsByCriteria_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSItemPKsByCriteriaResponse _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSItemPKsByCriteriaResponse)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSItemPKsByCriteriaResponse)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteItem
     */
    public com.amalto.workbench.webservices.WSItemPK deleteItem(com.amalto.workbench.webservices.WSDeleteItem wsDeleteItem)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteItem_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteItem_WSDeleteItem_QNAME);
            _bodyBlock.setValue(wsDeleteItem);
            _bodyBlock.setSerializer(ns1_myWSDeleteItem_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSItemPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSItemPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSItemPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransformerV2
     */
    public com.amalto.workbench.webservices.WSTransformerV2 getTransformerV2(com.amalto.workbench.webservices.WSGetTransformerV2 wsGetTransformerV2)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransformerV2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransformerV2_WSGetTransformerV2_QNAME);
            _bodyBlock.setValue(wsGetTransformerV2);
            _bodyBlock.setSerializer(ns1_myWSGetTransformerV2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerV2 _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerV2)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerV2)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putDocument2AsJob
     */
    public com.amalto.workbench.webservices.WSJobPK putDocument2AsJob(com.amalto.workbench.webservices.WSPutDocument2AsJob wsDocument)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putDocument2AsJob_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putDocument2AsJob_WSPutDocument2AsJob_QNAME);
            _bodyBlock.setValue(wsDocument);
            _bodyBlock.setSerializer(ns1_myWSPutDocument2AsJob_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteTransformerV2
     */
    public com.amalto.workbench.webservices.WSTransformerV2PK deleteTransformerV2(com.amalto.workbench.webservices.WSDeleteTransformerV2 wsDeleteTransformerV2)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteTransformerV2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteTransformerV2_WSDeleteTransformerV2_QNAME);
            _bodyBlock.setValue(wsDeleteTransformerV2);
            _bodyBlock.setSerializer(ns1_myWSDeleteTransformerV2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerV2PK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerV2PK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerV2PK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of executeRoutingOrderV2Synchronously
     */
    public com.amalto.workbench.webservices.WSString executeRoutingOrderV2Synchronously(com.amalto.workbench.webservices.WSExecuteRoutingOrderV2Synchronously wsExecuteRoutingOrderSynchronously)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(executeRoutingOrderV2Synchronously_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_executeRoutingOrderV2Synchronously_WSExecuteRoutingOrderV2Synchronously_QNAME);
            _bodyBlock.setValue(wsExecuteRoutingOrderSynchronously);
            _bodyBlock.setSerializer(ns1_myWSExecuteRoutingOrderV2Synchronously_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of processBytesUsingTransformerAsBackgroundJob
     */
    public com.amalto.workbench.webservices.WSBackgroundJobPK processBytesUsingTransformerAsBackgroundJob(com.amalto.workbench.webservices.WSProcessBytesUsingTransformerAsBackgroundJob wsProcessBytesUsingTransformerAsBackgroundJob)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(processBytesUsingTransformerAsBackgroundJob_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_processBytesUsingTransformerAsBackgroundJob_WSProcessBytesUsingTransformerAsBackgroundJob_QNAME);
            _bodyBlock.setValue(wsProcessBytesUsingTransformerAsBackgroundJob);
            _bodyBlock.setSerializer(ns1_myWSProcessBytesUsingTransformerAsBackgroundJob_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBackgroundJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of executeTransformerV2
     */
    public com.amalto.workbench.webservices.WSTransformerContext executeTransformerV2(com.amalto.workbench.webservices.WSExecuteTransformerV2 wsExecuteTransformerV2)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(executeTransformerV2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_executeTransformerV2_WSExecuteTransformerV2_QNAME);
            _bodyBlock.setValue(wsExecuteTransformerV2);
            _bodyBlock.setSerializer(ns1_myWSExecuteTransformerV2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerContext _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerContext)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerContext)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getInboundPlugin
     */
    public com.amalto.workbench.webservices.WSInboundPlugin getInboundPlugin(com.amalto.workbench.webservices.WSGetInboundPlugin wsInboundPluginPK)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getInboundPlugin_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getInboundPlugin_WSGetInboundPlugin_QNAME);
            _bodyBlock.setValue(wsInboundPluginPK);
            _bodyBlock.setSerializer(ns1_myWSGetInboundPlugin_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInboundPlugin _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInboundPlugin)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInboundPlugin)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteSource
     */
    public com.amalto.workbench.webservices.WSSourcePK deleteSource(com.amalto.workbench.webservices.WSDeleteSource wsSourceDel)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteSource_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteSource_WSDeleteSource_QNAME);
            _bodyBlock.setValue(wsSourceDel);
            _bodyBlock.setSerializer(ns1_myWSDeleteSource_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSSourcePK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSSourcePK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSSourcePK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putDataModel
     */
    public com.amalto.workbench.webservices.WSDataModelPK putDataModel(com.amalto.workbench.webservices.WSPutDataModel wsDataModel)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putDataModel_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putDataModel_WSPutDataModel_QNAME);
            _bodyBlock.setValue(wsDataModel);
            _bodyBlock.setSerializer(ns1_myWSPutDataModel_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDataModelPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDataModelPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDataModelPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of versioningGetItemsHistory
     */
    public com.amalto.workbench.webservices.WSVersioningItemsHistory versioningGetItemsHistory(com.amalto.workbench.webservices.WSVersioningGetItemsHistory wsVersioningGetItemsHistory)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(versioningGetItemsHistory_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_versioningGetItemsHistory_WSVersioningGetItemsHistory_QNAME);
            _bodyBlock.setValue(wsVersioningGetItemsHistory);
            _bodyBlock.setSerializer(ns1_myWSVersioningGetItemsHistory_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSVersioningItemsHistory _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSVersioningItemsHistory)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSVersioningItemsHistory)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getInboundPluginsByCriteria
     */
    public com.amalto.workbench.webservices.WSInboundPluginArray getInboundPluginsByCriteria(com.amalto.workbench.webservices.WSGetInboundPluginsByCriteria criteria)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getInboundPluginsByCriteria_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getInboundPluginsByCriteria_WSGetInboundPluginsByCriteria_QNAME);
            _bodyBlock.setValue(criteria);
            _bodyBlock.setSerializer(ns1_myWSGetInboundPluginsByCriteria_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInboundPluginArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInboundPluginArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInboundPluginArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransformerPluginV2Configuration
     */
    public com.amalto.workbench.webservices.WSString getTransformerPluginV2Configuration(com.amalto.workbench.webservices.WSTransformerPluginV2GetConfiguration wsGetConfiguration)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransformerPluginV2Configuration_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginV2Configuration_WSTransformerPluginV2GetConfiguration_QNAME);
            _bodyBlock.setValue(wsGetConfiguration);
            _bodyBlock.setSerializer(ns1_myWSTransformerPluginV2GetConfiguration_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of findBackgroundJobPKs
     */
    public com.amalto.workbench.webservices.WSBackgroundJobPKArray findBackgroundJobPKs(com.amalto.workbench.webservices.WSFindBackgroundJobPKs status)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(findBackgroundJobPKs_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_findBackgroundJobPKs_WSFindBackgroundJobPKs_QNAME);
            _bodyBlock.setValue(status);
            _bodyBlock.setSerializer(ns1_myWSFindBackgroundJobPKs_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBackgroundJobPKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of versioningGetInfo
     */
    public com.amalto.workbench.webservices.WSVersioningInfo versioningGetInfo(com.amalto.workbench.webservices.WSVersioningGetInfo wsVersioningGetInfo)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(versioningGetInfo_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_versioningGetInfo_WSVersioningGetInfo_QNAME);
            _bodyBlock.setValue(wsVersioningGetInfo);
            _bodyBlock.setSerializer(ns1_myWSVersioningGetInfo_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSVersioningInfo _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSVersioningInfo)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSVersioningInfo)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putSource
     */
    public com.amalto.workbench.webservices.WSSourcePK putSource(com.amalto.workbench.webservices.WSPutSource wsSource)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putSource_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putSource_WSPutSource_QNAME);
            _bodyBlock.setValue(wsSource);
            _bodyBlock.setSerializer(ns1_myWSPutSource_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSSourcePK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSSourcePK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSSourcePK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteDocument
     */
    public com.amalto.workbench.webservices.WSDocumentPK deleteDocument(com.amalto.workbench.webservices.WSDeleteDocument wsDeleteDocument)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteDocument_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteDocument_WSDeleteDocument_QNAME);
            _bodyBlock.setValue(wsDeleteDocument);
            _bodyBlock.setSerializer(ns1_myWSDeleteDocument_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDocumentPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDocumentPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDocumentPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsView
     */
    public com.amalto.workbench.webservices.WSBoolean existsView(com.amalto.workbench.webservices.WSExistsView wsViewPK)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsView_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsView_WSExistsView_QNAME);
            _bodyBlock.setValue(wsViewPK);
            _bodyBlock.setSerializer(ns1_myWSExistsView_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransformerPluginDetails
     */
    public com.amalto.workbench.webservices.WSTransformerPluginDetails getTransformerPluginDetails(com.amalto.workbench.webservices.WSGetTransformerPluginDetails wsGetTransformerPluginDetails)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransformerPluginDetails_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginDetails_WSGetTransformerPluginDetails_QNAME);
            _bodyBlock.setValue(wsGetTransformerPluginDetails);
            _bodyBlock.setSerializer(ns1_myWSGetTransformerPluginDetails_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerPluginDetails _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerPluginDetails)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerPluginDetails)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteInboundPlugin
     */
    public com.amalto.workbench.webservices.WSInboundPluginPK deleteInboundPlugin(com.amalto.workbench.webservices.WSDeleteInboundPlugin wsDeleteInboundPlugin)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteInboundPlugin_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteInboundPlugin_WSDeleteInboundPlugin_QNAME);
            _bodyBlock.setValue(wsDeleteInboundPlugin);
            _bodyBlock.setSerializer(ns1_myWSDeleteInboundPlugin_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInboundPluginPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInboundPluginPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInboundPluginPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putServiceConfiguration
     */
    public com.amalto.workbench.webservices.WSString putServiceConfiguration(com.amalto.workbench.webservices.WSServicePutConfiguration wsPutConfiguration)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putServiceConfiguration_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putServiceConfiguration_WSServicePutConfiguration_QNAME);
            _bodyBlock.setValue(wsPutConfiguration);
            _bodyBlock.setSerializer(ns1_myWSServicePutConfiguration_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getItem
     */
    public com.amalto.workbench.webservices.WSItem getItem(com.amalto.workbench.webservices.WSGetItem wsGetItem)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getItem_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getItem_WSGetItem_QNAME);
            _bodyBlock.setValue(wsGetItem);
            _bodyBlock.setSerializer(ns1_myWSGetItem_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSItem _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSItem)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSItem)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getInboundAdaptors
     */
    public com.amalto.workbench.webservices.WSInboundAdaptorArray getInboundAdaptors(com.amalto.workbench.webservices.WSRegexInboundAdaptors regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getInboundAdaptors_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getInboundAdaptors_WSRegexInboundAdaptors_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSRegexInboundAdaptors_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInboundAdaptorArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInboundAdaptorArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInboundAdaptorArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getServiceConfiguration
     */
    public com.amalto.workbench.webservices.WSString getServiceConfiguration(com.amalto.workbench.webservices.WSServiceGetConfiguration wsGetConfiguration)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getServiceConfiguration_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getServiceConfiguration_WSServiceGetConfiguration_QNAME);
            _bodyBlock.setValue(wsGetConfiguration);
            _bodyBlock.setSerializer(ns1_myWSServiceGetConfiguration_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putDestination
     */
    public com.amalto.workbench.webservices.WSDestinationPK putDestination(com.amalto.workbench.webservices.WSPutDestination wsDestination)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putDestination_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putDestination_WSPutDestination_QNAME);
            _bodyBlock.setValue(wsDestination);
            _bodyBlock.setSerializer(ns1_myWSPutDestination_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDestinationPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDestinationPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDestinationPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of directQuery
     */
    public com.amalto.workbench.webservices.WSStringArray directQuery(com.amalto.workbench.webservices.WSDirectQuery wsDirectQuery)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(directQuery_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_directQuery_WSDirectQuery_QNAME);
            _bodyBlock.setValue(wsDirectQuery);
            _bodyBlock.setSerializer(ns1_myWSDirectQuery_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStringArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStringArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStringArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putOutboundAdaptor
     */
    public com.amalto.workbench.webservices.WSOutboundAdaptorPK putOutboundAdaptor(com.amalto.workbench.webservices.WSPutOutboundAdaptor wsOutboundAdaptor)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putOutboundAdaptor_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putOutboundAdaptor_WSPutOutboundAdaptor_QNAME);
            _bodyBlock.setValue(wsOutboundAdaptor);
            _bodyBlock.setSerializer(ns1_myWSPutOutboundAdaptor_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSOutboundAdaptorPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSOutboundAdaptorPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSOutboundAdaptorPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getDestinations
     */
    public com.amalto.workbench.webservices.WSDestinationArray getDestinations(com.amalto.workbench.webservices.WSRegexDestinations regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getDestinations_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getDestinations_WSRegexDestinations_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSRegexDestinations_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDestinationArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDestinationArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDestinationArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getRoutingOrdersByCriteria
     */
    public com.amalto.workbench.webservices.WSRoutingOrderArray getRoutingOrdersByCriteria(com.amalto.workbench.webservices.WSGetRoutingOrdersByCriteria wsGetRoutingOrdersByCriteria)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getRoutingOrdersByCriteria_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getRoutingOrdersByCriteria_WSGetRoutingOrdersByCriteria_QNAME);
            _bodyBlock.setValue(wsGetRoutingOrdersByCriteria);
            _bodyBlock.setSerializer(ns1_myWSGetRoutingOrdersByCriteria_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingOrderArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransformerPluginV2Details
     */
    public com.amalto.workbench.webservices.WSTransformerPluginV2Details getTransformerPluginV2Details(com.amalto.workbench.webservices.WSGetTransformerPluginV2Details wsGetTransformerPluginV2Details)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransformerPluginV2Details_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginV2Details_WSGetTransformerPluginV2Details_QNAME);
            _bodyBlock.setValue(wsGetTransformerPluginV2Details);
            _bodyBlock.setSerializer(ns1_myWSGetTransformerPluginV2Details_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerPluginV2Details _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerPluginV2Details)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerPluginV2Details)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteView
     */
    public com.amalto.workbench.webservices.WSViewPK deleteView(com.amalto.workbench.webservices.WSDeleteView wsViewDel)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteView_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteView_WSDeleteView_QNAME);
            _bodyBlock.setValue(wsViewDel);
            _bodyBlock.setSerializer(ns1_myWSDeleteView_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSViewPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSViewPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSViewPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsTransformer
     */
    public com.amalto.workbench.webservices.WSBoolean existsTransformer(com.amalto.workbench.webservices.WSExistsTransformer wsExistsTransformer)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsTransformer_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsTransformer_WSExistsTransformer_QNAME);
            _bodyBlock.setValue(wsExistsTransformer);
            _bodyBlock.setSerializer(ns1_myWSExistsTransformer_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putTransform
     */
    public com.amalto.workbench.webservices.WSTransformPK putTransform(com.amalto.workbench.webservices.WSPutTransform wsTransform)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putTransform_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putTransform_WSPutTransform_QNAME);
            _bodyBlock.setValue(wsTransform);
            _bodyBlock.setSerializer(ns1_myWSPutTransform_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getConceptsInDataCluster
     */
    public com.amalto.workbench.webservices.WSStringArray getConceptsInDataCluster(com.amalto.workbench.webservices.WSGetConceptsInDataCluster wsGetConceptsInDataCluster)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getConceptsInDataCluster_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getConceptsInDataCluster_WSGetConceptsInDataCluster_QNAME);
            _bodyBlock.setValue(wsGetConceptsInDataCluster);
            _bodyBlock.setSerializer(ns1_myWSGetConceptsInDataCluster_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStringArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStringArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStringArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getInboundPlugins
     */
    public com.amalto.workbench.webservices.WSInboundPluginArray getInboundPlugins(com.amalto.workbench.webservices.WSRegexInboundPlugins regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getInboundPlugins_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getInboundPlugins_WSRegexInboundPlugins_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSRegexInboundPlugins_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInboundPluginArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInboundPluginArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInboundPluginArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putBusinessConceptSchema
     */
    public com.amalto.workbench.webservices.WSString putBusinessConceptSchema(com.amalto.workbench.webservices.WSPutBusinessConceptSchema wsPutBusinessConceptSchema)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putBusinessConceptSchema_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putBusinessConceptSchema_WSPutBusinessConceptSchema_QNAME);
            _bodyBlock.setValue(wsPutBusinessConceptSchema);
            _bodyBlock.setSerializer(ns1_myWSPutBusinessConceptSchema_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of routerAction
     */
    public com.amalto.workbench.webservices.WSRouterStatus routerAction(com.amalto.workbench.webservices.WSRouterAction wsRouterAction)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(routerAction_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_routerAction_WSRouterAction_QNAME);
            _bodyBlock.setValue(wsRouterAction);
            _bodyBlock.setSerializer(ns1_myWSRouterAction_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRouterStatus _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRouterStatus)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRouterStatus)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putDocument2
     */
    public com.amalto.workbench.webservices.WSDocumentPK putDocument2(com.amalto.workbench.webservices.WSPutDocument2 wsDocument)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putDocument2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putDocument2_WSPutDocument2_QNAME);
            _bodyBlock.setValue(wsDocument);
            _bodyBlock.setSerializer(ns1_myWSPutDocument2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDocumentPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDocumentPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDocumentPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getDataClusterPKs
     */
    public com.amalto.workbench.webservices.WSDataClusterPKArray getDataClusterPKs(com.amalto.workbench.webservices.WSRegexDataClusterPKs regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getDataClusterPKs_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getDataClusterPKs_WSRegexDataClusterPKs_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSRegexDataClusterPKs_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDataClusterPKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDataClusterPKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDataClusterPKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of connectorInteraction
     */
    public com.amalto.workbench.webservices.WSConnectorInteractionResponse connectorInteraction(com.amalto.workbench.webservices.WSConnectorInteraction wsConnectorInteraction)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(connectorInteraction_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_connectorInteraction_WSConnectorInteraction_QNAME);
            _bodyBlock.setValue(wsConnectorInteraction);
            _bodyBlock.setSerializer(ns1_myWSConnectorInteraction_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSConnectorInteractionResponse _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSConnectorInteractionResponse)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSConnectorInteractionResponse)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getBusinessConceptValue
     */
    public com.amalto.workbench.webservices.WSString getBusinessConceptValue(com.amalto.workbench.webservices.WSGetBusinessConceptValue wsGetBusinessConceptValue)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getBusinessConceptValue_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getBusinessConceptValue_WSGetBusinessConceptValue_QNAME);
            _bodyBlock.setValue(wsGetBusinessConceptValue);
            _bodyBlock.setSerializer(ns1_myWSGetBusinessConceptValue_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteStoredProcedure
     */
    public com.amalto.workbench.webservices.WSStoredProcedurePK deleteStoredProcedure(com.amalto.workbench.webservices.WSDeleteStoredProcedure wsStoredProcedureDelete)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteStoredProcedure_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteStoredProcedure_WSDeleteStoredProcedure_QNAME);
            _bodyBlock.setValue(wsStoredProcedureDelete);
            _bodyBlock.setSerializer(ns1_myWSDeleteStoredProcedure_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStoredProcedurePK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStoredProcedurePK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStoredProcedurePK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of quickSearch
     */
    public com.amalto.workbench.webservices.WSStringArray quickSearch(com.amalto.workbench.webservices.WSQuickSearch wsQuickSearch)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(quickSearch_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_quickSearch_WSQuickSearch_QNAME);
            _bodyBlock.setValue(wsQuickSearch);
            _bodyBlock.setSerializer(ns1_myWSQuickSearch_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStringArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStringArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStringArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getSource
     */
    public com.amalto.workbench.webservices.WSSource getSource(com.amalto.workbench.webservices.WSGetSource wsSourcePK)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getSource_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getSource_WSGetSource_QNAME);
            _bodyBlock.setValue(wsSourcePK);
            _bodyBlock.setSerializer(ns1_myWSGetSource_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSSource _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSSource)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSSource)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getOutboundAdaptorsByCriteria
     */
    public com.amalto.workbench.webservices.WSOutboundAdaptorArray getOutboundAdaptorsByCriteria(com.amalto.workbench.webservices.WSGetOutboundAdaptorsByCriteria criteria)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getOutboundAdaptorsByCriteria_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getOutboundAdaptorsByCriteria_WSGetOutboundAdaptorsByCriteria_QNAME);
            _bodyBlock.setValue(criteria);
            _bodyBlock.setSerializer(ns1_myWSGetOutboundAdaptorsByCriteria_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSOutboundAdaptorArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSOutboundAdaptorArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSOutboundAdaptorArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getObjectsForRoles
     */
    public com.amalto.workbench.webservices.WSStringArray getObjectsForRoles(com.amalto.workbench.webservices.WSGetObjectsForRoles wsRoleDelete)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getObjectsForRoles_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getObjectsForRoles_WSGetObjectsForRoles_QNAME);
            _bodyBlock.setValue(wsRoleDelete);
            _bodyBlock.setSerializer(ns1_myWSGetObjectsForRoles_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStringArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStringArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStringArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsTransformerPluginV2
     */
    public com.amalto.workbench.webservices.WSBoolean existsTransformerPluginV2(com.amalto.workbench.webservices.WSExistsTransformerPluginV2 wsExistsTransformerPluginV2)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsTransformerPluginV2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsTransformerPluginV2_WSExistsTransformerPluginV2_QNAME);
            _bodyBlock.setValue(wsExistsTransformerPluginV2);
            _bodyBlock.setSerializer(ns1_myWSExistsTransformerPluginV2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsDataCluster
     */
    public com.amalto.workbench.webservices.WSBoolean existsDataCluster(com.amalto.workbench.webservices.WSExistsDataCluster wsExistsDataCluster)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsDataCluster_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsDataCluster_WSExistsDataCluster_QNAME);
            _bodyBlock.setValue(wsExistsDataCluster);
            _bodyBlock.setSerializer(ns1_myWSExistsDataCluster_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsMenu
     */
    public com.amalto.workbench.webservices.WSBoolean existsMenu(com.amalto.workbench.webservices.WSExistsMenu wsExistsMenu)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsMenu_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsMenu_WSExistsMenu_QNAME);
            _bodyBlock.setValue(wsExistsMenu);
            _bodyBlock.setSerializer(ns1_myWSExistsMenu_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of singleExtract
     */
    public com.amalto.workbench.webservices.WSStringArray singleExtract(com.amalto.workbench.webservices.WSSingleExtract wsSingleExtract)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(singleExtract_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_singleExtract_WSSingleExtract_QNAME);
            _bodyBlock.setValue(wsSingleExtract);
            _bodyBlock.setSerializer(ns1_myWSSingleExtract_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStringArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStringArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStringArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of singleSearch
     */
    public com.amalto.workbench.webservices.WSStringArray singleSearch(com.amalto.workbench.webservices.WSSingleSearch wsSingleSearch)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(singleSearch_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_singleSearch_WSSingleSearch_QNAME);
            _bodyBlock.setValue(wsSingleSearch);
            _bodyBlock.setSerializer(ns1_myWSSingleSearch_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStringArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStringArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStringArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getRoutingRule
     */
    public com.amalto.workbench.webservices.WSRoutingRule getRoutingRule(com.amalto.workbench.webservices.WSGetRoutingRule wsRoutingRulePK)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getRoutingRule_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getRoutingRule_WSGetRoutingRule_QNAME);
            _bodyBlock.setValue(wsRoutingRulePK);
            _bodyBlock.setSerializer(ns1_myWSGetRoutingRule_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingRule _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingRule)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingRule)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteRoutingOrderV2
     */
    public com.amalto.workbench.webservices.WSRoutingOrderV2PK deleteRoutingOrderV2(com.amalto.workbench.webservices.WSDeleteRoutingOrderV2 wsDeleteRoutingOrder)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteRoutingOrderV2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteRoutingOrderV2_WSDeleteRoutingOrderV2_QNAME);
            _bodyBlock.setValue(wsDeleteRoutingOrder);
            _bodyBlock.setSerializer(ns1_myWSDeleteRoutingOrderV2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingOrderV2PK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2PK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2PK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsItem
     */
    public com.amalto.workbench.webservices.WSBoolean existsItem(com.amalto.workbench.webservices.WSExistsItem wsExistsItem)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsItem_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsItem_WSExistsItem_QNAME);
            _bodyBlock.setValue(wsExistsItem);
            _bodyBlock.setSerializer(ns1_myWSExistsItem_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getDocumentsByCriteria
     */
    public com.amalto.workbench.webservices.WSDocumentArray getDocumentsByCriteria(com.amalto.workbench.webservices.WSGetDocumentsByCriteria criteria)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getDocumentsByCriteria_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getDocumentsByCriteria_WSGetDocumentsByCriteria_QNAME);
            _bodyBlock.setValue(criteria);
            _bodyBlock.setSerializer(ns1_myWSGetDocumentsByCriteria_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDocumentArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDocumentArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDocumentArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of uploadDocumentByChunks
     */
    public com.amalto.workbench.webservices.WSString uploadDocumentByChunks(com.amalto.workbench.webservices.WSUploadDocumentByChunks wsDocumentChunk)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(uploadDocumentByChunks_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_uploadDocumentByChunks_WSUploadDocumentByChunks_QNAME);
            _bodyBlock.setValue(wsDocumentChunk);
            _bodyBlock.setSerializer(ns1_myWSUploadDocumentByChunks_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of executeOutboundPlugin
     */
    public com.amalto.workbench.webservices.WSString executeOutboundPlugin(com.amalto.workbench.webservices.WSExecuteOutboundPlugin wsExecuteOutboundPlugin)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(executeOutboundPlugin_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_executeOutboundPlugin_WSExecuteOutboundPlugin_QNAME);
            _bodyBlock.setValue(wsExecuteOutboundPlugin);
            _bodyBlock.setSerializer(ns1_myWSExecuteOutboundPlugin_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteBusinessConcept
     */
    public com.amalto.workbench.webservices.WSString deleteBusinessConcept(com.amalto.workbench.webservices.WSDeleteBusinessConcept wsDeleteBusinessConcept)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteBusinessConcept_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteBusinessConcept_WSDeleteBusinessConcept_QNAME);
            _bodyBlock.setValue(wsDeleteBusinessConcept);
            _bodyBlock.setSerializer(ns1_myWSDeleteBusinessConcept_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getInboundAdaptor
     */
    public com.amalto.workbench.webservices.WSInboundAdaptor getInboundAdaptor(com.amalto.workbench.webservices.WSGetInboundAdaptor wsInboundAdaptorpk)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getInboundAdaptor_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getInboundAdaptor_WSGetInboundAdaptor_QNAME);
            _bodyBlock.setValue(wsInboundAdaptorpk);
            _bodyBlock.setSerializer(ns1_myWSGetInboundAdaptor_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInboundAdaptor _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInboundAdaptor)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInboundAdaptor)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of ping
     */
    public com.amalto.workbench.webservices.WSString ping()
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(ping_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(null);
            _bodyBlock.setSerializer(DummySerializer.getInstance());
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of versioningTagItems
     */
    public com.amalto.workbench.webservices.WSBackgroundJobPK versioningTagItems(com.amalto.workbench.webservices.WSVersioningTagItems wsVersioningTagItems)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(versioningTagItems_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_versioningTagItems_WSVersioningTagItems_QNAME);
            _bodyBlock.setValue(wsVersioningTagItems);
            _bodyBlock.setSerializer(ns1_myWSVersioningTagItems_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBackgroundJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteTransform
     */
    public com.amalto.workbench.webservices.WSTransformPK deleteTransform(com.amalto.workbench.webservices.WSDeleteTransform wsDeleteTransform)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteTransform_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteTransform_WSDeleteTransform_QNAME);
            _bodyBlock.setValue(wsDeleteTransform);
            _bodyBlock.setSerializer(ns1_myWSDeleteTransform_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getInboundHTMLBodyForm
     */
    public com.amalto.workbench.webservices.WSInboundHTMLBodyForm getInboundHTMLBodyForm(com.amalto.workbench.webservices.WSGetInboundHTMLBodyForm wsGetInboundHTMLBodyForm)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getInboundHTMLBodyForm_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getInboundHTMLBodyForm_WSGetInboundHTMLBodyForm_QNAME);
            _bodyBlock.setValue(wsGetInboundHTMLBodyForm);
            _bodyBlock.setSerializer(ns1_myWSGetInboundHTMLBodyForm_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInboundHTMLBodyForm _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInboundHTMLBodyForm)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInboundHTMLBodyForm)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getDataModel
     */
    public com.amalto.workbench.webservices.WSDataModel getDataModel(com.amalto.workbench.webservices.WSGetDataModel wsDataModelget)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getDataModel_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getDataModel_WSGetDataModel_QNAME);
            _bodyBlock.setValue(wsDataModelget);
            _bodyBlock.setSerializer(ns1_myWSGetDataModel_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDataModel _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDataModel)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDataModel)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsRoutingOrderV2
     */
    public com.amalto.workbench.webservices.WSRoutingOrderV2 existsRoutingOrderV2(com.amalto.workbench.webservices.WSExistsRoutingOrderV2 wsExistsRoutingOrder)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsRoutingOrderV2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsRoutingOrderV2_WSExistsRoutingOrderV2_QNAME);
            _bodyBlock.setValue(wsExistsRoutingOrder);
            _bodyBlock.setSerializer(ns1_myWSExistsRoutingOrderV2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingOrderV2 _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getOutboundAdaptors
     */
    public com.amalto.workbench.webservices.WSOutboundAdaptorArray getOutboundAdaptors(com.amalto.workbench.webservices.WSRegexOutboundAdaptors regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getOutboundAdaptors_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getOutboundAdaptors_WSRegexOutboundAdaptors_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSRegexOutboundAdaptors_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSOutboundAdaptorArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSOutboundAdaptorArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSOutboundAdaptorArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putDocumentInAFileAsJob
     */
    public com.amalto.workbench.webservices.WSJobPK putDocumentInAFileAsJob(com.amalto.workbench.webservices.WSPutDocumentInAFileAsJob wsPutDocumentInAFile)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putDocumentInAFileAsJob_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putDocumentInAFileAsJob_WSPutDocumentInAFileAsJob_QNAME);
            _bodyBlock.setValue(wsPutDocumentInAFile);
            _bodyBlock.setSerializer(ns1_myWSPutDocumentInAFileAsJob_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getItems
     */
    public com.amalto.workbench.webservices.WSStringArray getItems(com.amalto.workbench.webservices.WSGetItems wsGetItems)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getItems_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getItems_WSGetItems_QNAME);
            _bodyBlock.setValue(wsGetItems);
            _bodyBlock.setSerializer(ns1_myWSGetItems_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSStringArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSStringArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSStringArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of extractItem
     */
    public com.amalto.workbench.webservices.WSString extractItem(com.amalto.workbench.webservices.WSExtractItem wsExtractItem)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(extractItem_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_extractItem_WSExtractItem_QNAME);
            _bodyBlock.setValue(wsExtractItem);
            _bodyBlock.setSerializer(ns1_myWSExtractItem_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putDocumentInAStringAsJob
     */
    public com.amalto.workbench.webservices.WSJobPK putDocumentInAStringAsJob(com.amalto.workbench.webservices.WSPutDocumentInAStringAsJob wsPutDocumentInAString)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putDocumentInAStringAsJob_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putDocumentInAStringAsJob_WSPutDocumentInAStringAsJob_QNAME);
            _bodyBlock.setValue(wsPutDocumentInAString);
            _bodyBlock.setSerializer(ns1_myWSPutDocumentInAStringAsJob_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getDataCluster
     */
    public com.amalto.workbench.webservices.WSDataCluster getDataCluster(com.amalto.workbench.webservices.WSGetDataCluster wsDataClusterPK)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getDataCluster_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getDataCluster_WSGetDataCluster_QNAME);
            _bodyBlock.setValue(wsDataClusterPK);
            _bodyBlock.setSerializer(ns1_myWSGetDataCluster_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDataCluster _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDataCluster)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDataCluster)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getDocument
     */
    public com.amalto.workbench.webservices.WSDocument getDocument(com.amalto.workbench.webservices.WSGetDocument wsDocumentPK)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getDocument_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getDocument_WSGetDocument_QNAME);
            _bodyBlock.setValue(wsDocumentPK);
            _bodyBlock.setSerializer(ns1_myWSGetDocument_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDocument _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDocument)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDocument)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getRoutingOrderV2
     */
    public com.amalto.workbench.webservices.WSRoutingOrderV2 getRoutingOrderV2(com.amalto.workbench.webservices.WSGetRoutingOrderV2 wsGetRoutingOrderV2)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getRoutingOrderV2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getRoutingOrderV2_WSGetRoutingOrderV2_QNAME);
            _bodyBlock.setValue(wsGetRoutingOrderV2);
            _bodyBlock.setSerializer(ns1_myWSGetRoutingOrderV2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingOrderV2 _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putJob
     */
    public com.amalto.workbench.webservices.WSJobPK putJob(com.amalto.workbench.webservices.WSPutJob wsPutJob)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putJob_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putJob_WSPutJob_QNAME);
            _bodyBlock.setValue(wsPutJob);
            _bodyBlock.setSerializer(ns1_myWSPutJob_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putRoutingRule
     */
    public com.amalto.workbench.webservices.WSRoutingRulePK putRoutingRule(com.amalto.workbench.webservices.WSPutRoutingRule wsRoutingRule)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putRoutingRule_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putRoutingRule_WSPutRoutingRule_QNAME);
            _bodyBlock.setValue(wsRoutingRule);
            _bodyBlock.setSerializer(ns1_myWSPutRoutingRule_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingRulePK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingRulePK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingRulePK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getOutboundPluginsByCriteria
     */
    public com.amalto.workbench.webservices.WSOutboundPluginArray getOutboundPluginsByCriteria(com.amalto.workbench.webservices.WSGetOutboundPluginsByCriteria criteria)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getOutboundPluginsByCriteria_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getOutboundPluginsByCriteria_WSGetOutboundPluginsByCriteria_QNAME);
            _bodyBlock.setValue(criteria);
            _bodyBlock.setSerializer(ns1_myWSGetOutboundPluginsByCriteria_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSOutboundPluginArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSOutboundPluginArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSOutboundPluginArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of existsStoredProcedure
     */
    public com.amalto.workbench.webservices.WSBoolean existsStoredProcedure(com.amalto.workbench.webservices.WSExistsStoredProcedure wsExistsStoredProcedure)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(existsStoredProcedure_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_existsStoredProcedure_WSExistsStoredProcedure_QNAME);
            _bodyBlock.setValue(wsExistsStoredProcedure);
            _bodyBlock.setSerializer(ns1_myWSExistsStoredProcedure_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBoolean _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBoolean)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBoolean)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of executeTransformerV2AsJob
     */
    public com.amalto.workbench.webservices.WSBackgroundJobPK executeTransformerV2AsJob(com.amalto.workbench.webservices.WSExecuteTransformerV2AsJob wsExecuteTransformerV2AsJob)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(executeTransformerV2AsJob_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_executeTransformerV2AsJob_WSExecuteTransformerV2AsJob_QNAME);
            _bodyBlock.setValue(wsExecuteTransformerV2AsJob);
            _bodyBlock.setSerializer(ns1_myWSExecuteTransformerV2AsJob_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBackgroundJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putInboundAdaptor
     */
    public com.amalto.workbench.webservices.WSInboundAdaptorPK putInboundAdaptor(com.amalto.workbench.webservices.WSPutInboundAdaptor wsInboundAdaptor)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putInboundAdaptor_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putInboundAdaptor_WSPutInboundAdaptor_QNAME);
            _bodyBlock.setValue(wsInboundAdaptor);
            _bodyBlock.setSerializer(ns1_myWSPutInboundAdaptor_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSInboundAdaptorPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSInboundAdaptorPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSInboundAdaptorPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of checkSchema
     */
    public com.amalto.workbench.webservices.WSString checkSchema(com.amalto.workbench.webservices.WSCheckSchema wsSchema)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(checkSchema_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_checkSchema_WSCheckSchema_QNAME);
            _bodyBlock.setValue(wsSchema);
            _bodyBlock.setSerializer(ns1_myWSCheckSchema_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putOutboundPlugin
     */
    public com.amalto.workbench.webservices.WSOutboundPluginPK putOutboundPlugin(com.amalto.workbench.webservices.WSPutOutboundPlugin wsOutboundPlugin)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putOutboundPlugin_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putOutboundPlugin_WSPutOutboundPlugin_QNAME);
            _bodyBlock.setValue(wsOutboundPlugin);
            _bodyBlock.setSerializer(ns1_myWSPutOutboundPlugin_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSOutboundPluginPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSOutboundPluginPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSOutboundPluginPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getDataModelPKs
     */
    public com.amalto.workbench.webservices.WSDataModelPKArray getDataModelPKs(com.amalto.workbench.webservices.WSRegexDataModelPKs regexp)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getDataModelPKs_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getDataModelPKs_WSRegexDataModelPKs_QNAME);
            _bodyBlock.setValue(regexp);
            _bodyBlock.setSerializer(ns1_myWSRegexDataModelPKs_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDataModelPKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDataModelPKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDataModelPKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteOutboundAdaptor
     */
    public com.amalto.workbench.webservices.WSOutboundAdaptorPK deleteOutboundAdaptor(com.amalto.workbench.webservices.WSDeleteOutboundAdaptor wsOutboundAdaptordel)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteOutboundAdaptor_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteOutboundAdaptor_WSDeleteOutboundAdaptor_QNAME);
            _bodyBlock.setValue(wsOutboundAdaptordel);
            _bodyBlock.setSerializer(ns1_myWSDeleteOutboundAdaptor_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSOutboundAdaptorPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSOutboundAdaptorPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSOutboundAdaptorPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of routingEngineV2Action
     */
    public com.amalto.workbench.webservices.WSRoutingEngineV2Status routingEngineV2Action(com.amalto.workbench.webservices.WSRoutingEngineV2Action wsRoutingEngineAction)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(routingEngineV2Action_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_routingEngineV2Action_WSRoutingEngineV2Action_QNAME);
            _bodyBlock.setValue(wsRoutingEngineAction);
            _bodyBlock.setSerializer(ns1_myWSRoutingEngineV2Action_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingEngineV2Status _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingEngineV2Status)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingEngineV2Status)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of processFileUsingTransformer
     */
    public com.amalto.workbench.webservices.WSPipeline processFileUsingTransformer(com.amalto.workbench.webservices.WSProcessFileUsingTransformer wsProcessFileUsingTransformer)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(processFileUsingTransformer_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_processFileUsingTransformer_WSProcessFileUsingTransformer_QNAME);
            _bodyBlock.setValue(wsProcessFileUsingTransformer);
            _bodyBlock.setSerializer(ns1_myWSProcessFileUsingTransformer_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSPipeline _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSPipeline)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSPipeline)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransformerPluginV2SList
     */
    public com.amalto.workbench.webservices.WSTransformerPluginV2SList getTransformerPluginV2SList(com.amalto.workbench.webservices.WSGetTransformerPluginV2SList wsGetTransformerPluginV2SList)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransformerPluginV2sList_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginV2sList_WSGetTransformerPluginV2sList_QNAME);
            _bodyBlock.setValue(wsGetTransformerPluginV2SList);
            _bodyBlock.setSerializer(ns1_myWSGetTransformerPluginV2SList_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerPluginV2SList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerPluginV2SList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerPluginV2SList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of versioningRestoreObjects
     */
    public com.amalto.workbench.webservices.WSBackgroundJobPK versioningRestoreObjects(com.amalto.workbench.webservices.WSVersioningRestoreObjects wsVersioningRestoreObjects)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(versioningRestoreObjects_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_versioningRestoreObjects_WSVersioningRestoreObjects_QNAME);
            _bodyBlock.setValue(wsVersioningRestoreObjects);
            _bodyBlock.setSerializer(ns1_myWSVersioningRestoreObjects_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSBackgroundJobPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSBackgroundJobPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransformerPluginsList
     */
    public com.amalto.workbench.webservices.WSTransformerPluginsList getTransformerPluginsList(com.amalto.workbench.webservices.WSGetTransformerPluginsList wsGetTransformerPluginsList)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransformerPluginsList_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginsList_WSGetTransformerPluginsList_QNAME);
            _bodyBlock.setValue(wsGetTransformerPluginsList);
            _bodyBlock.setSerializer(ns1_myWSGetTransformerPluginsList_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerPluginsList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerPluginsList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerPluginsList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of putTransformerV2
     */
    public com.amalto.workbench.webservices.WSTransformerV2PK putTransformerV2(com.amalto.workbench.webservices.WSPutTransformerV2 wsTransformerV2)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(putTransformerV2_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_putTransformerV2_WSPutTransformerV2_QNAME);
            _bodyBlock.setValue(wsTransformerV2);
            _bodyBlock.setSerializer(ns1_myWSPutTransformerV2_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSTransformerV2PK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSTransformerV2PK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSTransformerV2PK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getRoutingOrderV2SByCriteria
     */
    public com.amalto.workbench.webservices.WSRoutingOrderV2Array getRoutingOrderV2SByCriteria(com.amalto.workbench.webservices.WSGetRoutingOrderV2SByCriteria wsGetRoutingOrderV2SByCriteria)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getRoutingOrderV2sByCriteria_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getRoutingOrderV2sByCriteria_WSGetRoutingOrderV2sByCriteria_QNAME);
            _bodyBlock.setValue(wsGetRoutingOrderV2SByCriteria);
            _bodyBlock.setSerializer(ns1_myWSGetRoutingOrderV2SByCriteria_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingOrderV2Array _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2Array)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2Array)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getTransformerPluginConfiguration
     */
    public com.amalto.workbench.webservices.WSString getTransformerPluginConfiguration(com.amalto.workbench.webservices.WSTransformerPluginGetConfiguration wsGetConfiguration)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getTransformerPluginConfiguration_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginConfiguration_WSTransformerPluginGetConfiguration_QNAME);
            _bodyBlock.setValue(wsGetConfiguration);
            _bodyBlock.setSerializer(ns1_myWSTransformerPluginGetConfiguration_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSString _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSString)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSString)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deleteDataCluster
     */
    public com.amalto.workbench.webservices.WSDataClusterPK deleteDataCluster(com.amalto.workbench.webservices.WSDeleteDataCluster wsDeleteDataCluster)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deleteDataCluster_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deleteDataCluster_WSDeleteDataCluster_QNAME);
            _bodyBlock.setValue(wsDeleteDataCluster);
            _bodyBlock.setSerializer(ns1_myWSDeleteDataCluster_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSDataClusterPK _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSDataClusterPK)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSDataClusterPK)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getJob
     */
    public com.amalto.workbench.webservices.WSJob getJob(com.amalto.workbench.webservices.WSGetJob wsGetJob)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getJob_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getJob_WSGetJob_QNAME);
            _bodyBlock.setValue(wsGetJob);
            _bodyBlock.setSerializer(ns1_myWSGetJob_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSJob _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSJob)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSJob)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of getRoutingOrderV2PKsByCriteria
     */
    public com.amalto.workbench.webservices.WSRoutingOrderV2PKArray getRoutingOrderV2PKsByCriteria(com.amalto.workbench.webservices.WSGetRoutingOrderV2PKsByCriteria wsGetRoutingOrderV2PKsByCriteria)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(getRoutingOrderV2PKsByCriteria_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_getRoutingOrderV2PKsByCriteria_WSGetRoutingOrderV2PKsByCriteria_QNAME);
            _bodyBlock.setValue(wsGetRoutingOrderV2PKsByCriteria);
            _bodyBlock.setSerializer(ns1_myWSGetRoutingOrderV2PKsByCriteria_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSRoutingOrderV2PKArray _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2PKArray)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSRoutingOrderV2PKArray)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of versioningGetObjectsHistory
     */
    public com.amalto.workbench.webservices.WSVersioningObjectsHistory versioningGetObjectsHistory(com.amalto.workbench.webservices.WSVersioningGetObjectsHistory wsVersioningGetObjectsHistory)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(versioningGetObjectsHistory_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_versioningGetObjectsHistory_WSVersioningGetObjectsHistory_QNAME);
            _bodyBlock.setValue(wsVersioningGetObjectsHistory);
            _bodyBlock.setSerializer(ns1_myWSVersioningGetObjectsHistory_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            com.amalto.workbench.webservices.WSVersioningObjectsHistory _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (com.amalto.workbench.webservices.WSVersioningObjectsHistory)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (com.amalto.workbench.webservices.WSVersioningObjectsHistory)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case putBackgroundJob_OPCODE:
                _deserialize_putBackgroundJob(bodyReader, deserializationContext, state);
                break;
            case getRole_OPCODE:
                _deserialize_getRole(bodyReader, deserializationContext, state);
                break;
            case getMenu_OPCODE:
                _deserialize_getMenu(bodyReader, deserializationContext, state);
                break;
            case executeRoutingOrderV2Asynchronously_OPCODE:
                _deserialize_executeRoutingOrderV2Asynchronously(bodyReader, deserializationContext, state);
                break;
            case getTransformerPKs_OPCODE:
                _deserialize_getTransformerPKs(bodyReader, deserializationContext, state);
                break;
            case processFileUsingTransformerAsBackgroundJob_OPCODE:
                _deserialize_processFileUsingTransformerAsBackgroundJob(bodyReader, deserializationContext, state);
                break;
            case xPathsSearch_OPCODE:
                _deserialize_xPathsSearch(bodyReader, deserializationContext, state);
                break;
            case getComponentVersion_OPCODE:
                _deserialize_getComponentVersion(bodyReader, deserializationContext, state);
                break;
            case putView_OPCODE:
                _deserialize_putView(bodyReader, deserializationContext, state);
                break;
            case putTransformerPluginConfiguration_OPCODE:
                _deserialize_putTransformerPluginConfiguration(bodyReader, deserializationContext, state);
                break;
            case getInboundAdaptorsByCriteria_OPCODE:
                _deserialize_getInboundAdaptorsByCriteria(bodyReader, deserializationContext, state);
                break;
            case routeItemV2_OPCODE:
                _deserialize_routeItemV2(bodyReader, deserializationContext, state);
                break;
            case getSources_OPCODE:
                _deserialize_getSources(bodyReader, deserializationContext, state);
                break;
            case getOutboundAdaptor_OPCODE:
                _deserialize_getOutboundAdaptor(bodyReader, deserializationContext, state);
                break;
            case getViewPKs_OPCODE:
                _deserialize_getViewPKs(bodyReader, deserializationContext, state);
                break;
            case existsRole_OPCODE:
                _deserialize_existsRole(bodyReader, deserializationContext, state);
                break;
            case existsRoutingOrder_OPCODE:
                _deserialize_existsRoutingOrder(bodyReader, deserializationContext, state);
                break;
            case initMDM_OPCODE:
                _deserialize_initMDM(bodyReader, deserializationContext, state);
                break;
            case processBytesUsingTransformer_OPCODE:
                _deserialize_processBytesUsingTransformer(bodyReader, deserializationContext, state);
                break;
            case executeStoredProcedure_OPCODE:
                _deserialize_executeStoredProcedure(bodyReader, deserializationContext, state);
                break;
            case serviceAction_OPCODE:
                _deserialize_serviceAction(bodyReader, deserializationContext, state);
                break;
            case getRolePKs_OPCODE:
                _deserialize_getRolePKs(bodyReader, deserializationContext, state);
                break;
            case getView_OPCODE:
                _deserialize_getView(bodyReader, deserializationContext, state);
                break;
            case getBusinessElementValues_OPCODE:
                _deserialize_getBusinessElementValues(bodyReader, deserializationContext, state);
                break;
            case deleteMenu_OPCODE:
                _deserialize_deleteMenu(bodyReader, deserializationContext, state);
                break;
            case getOutboundPlugins_OPCODE:
                _deserialize_getOutboundPlugins(bodyReader, deserializationContext, state);
                break;
            case deleteInboundAdaptor_OPCODE:
                _deserialize_deleteInboundAdaptor(bodyReader, deserializationContext, state);
                break;
            case putBusinessConcept_OPCODE:
                _deserialize_putBusinessConcept(bodyReader, deserializationContext, state);
                break;
            case putMenu_OPCODE:
                _deserialize_putMenu(bodyReader, deserializationContext, state);
                break;
            case getJobs_OPCODE:
                _deserialize_getJobs(bodyReader, deserializationContext, state);
                break;
            case deleteRoutingOrder_OPCODE:
                _deserialize_deleteRoutingOrder(bodyReader, deserializationContext, state);
                break;
            case putInboundPlugin_OPCODE:
                _deserialize_putInboundPlugin(bodyReader, deserializationContext, state);
                break;
            case putStoredProcedure_OPCODE:
                _deserialize_putStoredProcedure(bodyReader, deserializationContext, state);
                break;
            case deleteDestination_OPCODE:
                _deserialize_deleteDestination(bodyReader, deserializationContext, state);
                break;
            case deleteTransformer_OPCODE:
                _deserialize_deleteTransformer(bodyReader, deserializationContext, state);
                break;
            case getBusinessConcepts_OPCODE:
                _deserialize_getBusinessConcepts(bodyReader, deserializationContext, state);
                break;
            case putRole_OPCODE:
                _deserialize_putRole(bodyReader, deserializationContext, state);
                break;
            case putItem_OPCODE:
                _deserialize_putItem(bodyReader, deserializationContext, state);
                break;
            case getTransformer_OPCODE:
                _deserialize_getTransformer(bodyReader, deserializationContext, state);
                break;
            case getTransforms_OPCODE:
                _deserialize_getTransforms(bodyReader, deserializationContext, state);
                break;
            case putDataCluster_OPCODE:
                _deserialize_putDataCluster(bodyReader, deserializationContext, state);
                break;
            case getTransformerV2PKs_OPCODE:
                _deserialize_getTransformerV2PKs(bodyReader, deserializationContext, state);
                break;
            case projectItem_OPCODE:
                _deserialize_projectItem(bodyReader, deserializationContext, state);
                break;
            case getStoredProcedure_OPCODE:
                _deserialize_getStoredProcedure(bodyReader, deserializationContext, state);
                break;
            case getServicesList_OPCODE:
                _deserialize_getServicesList(bodyReader, deserializationContext, state);
                break;
            case existsDataModel_OPCODE:
                _deserialize_existsDataModel(bodyReader, deserializationContext, state);
                break;
            case getRoutingOrder_OPCODE:
                _deserialize_getRoutingOrder(bodyReader, deserializationContext, state);
                break;
            case getOutboundPlugin_OPCODE:
                _deserialize_getOutboundPlugin(bodyReader, deserializationContext, state);
                break;
            case getDestination_OPCODE:
                _deserialize_getDestination(bodyReader, deserializationContext, state);
                break;
            case getRoutingRulePKs_OPCODE:
                _deserialize_getRoutingRulePKs(bodyReader, deserializationContext, state);
                break;
            case putVersioningSystemConfiguration_OPCODE:
                _deserialize_putVersioningSystemConfiguration(bodyReader, deserializationContext, state);
                break;
            case extractUsingTransformerThruView_OPCODE:
                _deserialize_extractUsingTransformerThruView(bodyReader, deserializationContext, state);
                break;
            case versioningTagObjects_OPCODE:
                _deserialize_versioningTagObjects(bodyReader, deserializationContext, state);
                break;
            case deleteRole_OPCODE:
                _deserialize_deleteRole(bodyReader, deserializationContext, state);
                break;
            case putTransformerPluginV2Configuration_OPCODE:
                _deserialize_putTransformerPluginV2Configuration(bodyReader, deserializationContext, state);
                break;
            case existsTransformerPlugin_OPCODE:
                _deserialize_existsTransformerPlugin(bodyReader, deserializationContext, state);
                break;
            case routeItemNow_OPCODE:
                _deserialize_routeItemNow(bodyReader, deserializationContext, state);
                break;
            case getVersioningSystemConfiguration_OPCODE:
                _deserialize_getVersioningSystemConfiguration(bodyReader, deserializationContext, state);
                break;
            case getMenuPKs_OPCODE:
                _deserialize_getMenuPKs(bodyReader, deserializationContext, state);
                break;
            case putTransformer_OPCODE:
                _deserialize_putTransformer(bodyReader, deserializationContext, state);
                break;
            case getTransform_OPCODE:
                _deserialize_getTransform(bodyReader, deserializationContext, state);
                break;
            case getBackgroundJob_OPCODE:
                _deserialize_getBackgroundJob(bodyReader, deserializationContext, state);
                break;
            case getDocuments_OPCODE:
                _deserialize_getDocuments(bodyReader, deserializationContext, state);
                break;
            case versioningRestoreItems_OPCODE:
                _deserialize_versioningRestoreItems(bodyReader, deserializationContext, state);
                break;
            case existsTransformerV2_OPCODE:
                _deserialize_existsTransformerV2(bodyReader, deserializationContext, state);
                break;
            case deleteDataModel_OPCODE:
                _deserialize_deleteDataModel(bodyReader, deserializationContext, state);
                break;
            case putDocumentInAString_OPCODE:
                _deserialize_putDocumentInAString(bodyReader, deserializationContext, state);
                break;
            case getStoredProcedurePKs_OPCODE:
                _deserialize_getStoredProcedurePKs(bodyReader, deserializationContext, state);
                break;
            case executeInboundPlugin_OPCODE:
                _deserialize_executeInboundPlugin(bodyReader, deserializationContext, state);
                break;
            case deleteOutboundPlugin_OPCODE:
                _deserialize_deleteOutboundPlugin(bodyReader, deserializationContext, state);
                break;
            case deleteItems_OPCODE:
                _deserialize_deleteItems(bodyReader, deserializationContext, state);
                break;
            case getOutboundHTMLBodyForm_OPCODE:
                _deserialize_getOutboundHTMLBodyForm(bodyReader, deserializationContext, state);
                break;
            case existsRoutingRule_OPCODE:
                _deserialize_existsRoutingRule(bodyReader, deserializationContext, state);
                break;
            case deleteRoutingRule_OPCODE:
                _deserialize_deleteRoutingRule(bodyReader, deserializationContext, state);
                break;
            case getBusinessConceptKey_OPCODE:
                _deserialize_getBusinessConceptKey(bodyReader, deserializationContext, state);
                break;
            case extractUsingTransformer_OPCODE:
                _deserialize_extractUsingTransformer(bodyReader, deserializationContext, state);
                break;
            case executeRoutingOrderNow_OPCODE:
                _deserialize_executeRoutingOrderNow(bodyReader, deserializationContext, state);
                break;
            case putDocumentInAFile_OPCODE:
                _deserialize_putDocumentInAFile(bodyReader, deserializationContext, state);
                break;
            case getItemPKsByCriteria_OPCODE:
                _deserialize_getItemPKsByCriteria(bodyReader, deserializationContext, state);
                break;
            case deleteItem_OPCODE:
                _deserialize_deleteItem(bodyReader, deserializationContext, state);
                break;
            case getTransformerV2_OPCODE:
                _deserialize_getTransformerV2(bodyReader, deserializationContext, state);
                break;
            case putDocument2AsJob_OPCODE:
                _deserialize_putDocument2AsJob(bodyReader, deserializationContext, state);
                break;
            case deleteTransformerV2_OPCODE:
                _deserialize_deleteTransformerV2(bodyReader, deserializationContext, state);
                break;
            case executeRoutingOrderV2Synchronously_OPCODE:
                _deserialize_executeRoutingOrderV2Synchronously(bodyReader, deserializationContext, state);
                break;
            case processBytesUsingTransformerAsBackgroundJob_OPCODE:
                _deserialize_processBytesUsingTransformerAsBackgroundJob(bodyReader, deserializationContext, state);
                break;
            case executeTransformerV2_OPCODE:
                _deserialize_executeTransformerV2(bodyReader, deserializationContext, state);
                break;
            case getInboundPlugin_OPCODE:
                _deserialize_getInboundPlugin(bodyReader, deserializationContext, state);
                break;
            case deleteSource_OPCODE:
                _deserialize_deleteSource(bodyReader, deserializationContext, state);
                break;
            case putDataModel_OPCODE:
                _deserialize_putDataModel(bodyReader, deserializationContext, state);
                break;
            case versioningGetItemsHistory_OPCODE:
                _deserialize_versioningGetItemsHistory(bodyReader, deserializationContext, state);
                break;
            case getInboundPluginsByCriteria_OPCODE:
                _deserialize_getInboundPluginsByCriteria(bodyReader, deserializationContext, state);
                break;
            case getTransformerPluginV2Configuration_OPCODE:
                _deserialize_getTransformerPluginV2Configuration(bodyReader, deserializationContext, state);
                break;
            case findBackgroundJobPKs_OPCODE:
                _deserialize_findBackgroundJobPKs(bodyReader, deserializationContext, state);
                break;
            case versioningGetInfo_OPCODE:
                _deserialize_versioningGetInfo(bodyReader, deserializationContext, state);
                break;
            case putSource_OPCODE:
                _deserialize_putSource(bodyReader, deserializationContext, state);
                break;
            case deleteDocument_OPCODE:
                _deserialize_deleteDocument(bodyReader, deserializationContext, state);
                break;
            case existsView_OPCODE:
                _deserialize_existsView(bodyReader, deserializationContext, state);
                break;
            case getTransformerPluginDetails_OPCODE:
                _deserialize_getTransformerPluginDetails(bodyReader, deserializationContext, state);
                break;
            case deleteInboundPlugin_OPCODE:
                _deserialize_deleteInboundPlugin(bodyReader, deserializationContext, state);
                break;
            case putServiceConfiguration_OPCODE:
                _deserialize_putServiceConfiguration(bodyReader, deserializationContext, state);
                break;
            case getItem_OPCODE:
                _deserialize_getItem(bodyReader, deserializationContext, state);
                break;
            case getInboundAdaptors_OPCODE:
                _deserialize_getInboundAdaptors(bodyReader, deserializationContext, state);
                break;
            case getServiceConfiguration_OPCODE:
                _deserialize_getServiceConfiguration(bodyReader, deserializationContext, state);
                break;
            case putDestination_OPCODE:
                _deserialize_putDestination(bodyReader, deserializationContext, state);
                break;
            case directQuery_OPCODE:
                _deserialize_directQuery(bodyReader, deserializationContext, state);
                break;
            case putOutboundAdaptor_OPCODE:
                _deserialize_putOutboundAdaptor(bodyReader, deserializationContext, state);
                break;
            case getDestinations_OPCODE:
                _deserialize_getDestinations(bodyReader, deserializationContext, state);
                break;
            case getRoutingOrdersByCriteria_OPCODE:
                _deserialize_getRoutingOrdersByCriteria(bodyReader, deserializationContext, state);
                break;
            case getTransformerPluginV2Details_OPCODE:
                _deserialize_getTransformerPluginV2Details(bodyReader, deserializationContext, state);
                break;
            case deleteView_OPCODE:
                _deserialize_deleteView(bodyReader, deserializationContext, state);
                break;
            case existsTransformer_OPCODE:
                _deserialize_existsTransformer(bodyReader, deserializationContext, state);
                break;
            case putTransform_OPCODE:
                _deserialize_putTransform(bodyReader, deserializationContext, state);
                break;
            case getConceptsInDataCluster_OPCODE:
                _deserialize_getConceptsInDataCluster(bodyReader, deserializationContext, state);
                break;
            case getInboundPlugins_OPCODE:
                _deserialize_getInboundPlugins(bodyReader, deserializationContext, state);
                break;
            case putBusinessConceptSchema_OPCODE:
                _deserialize_putBusinessConceptSchema(bodyReader, deserializationContext, state);
                break;
            case routerAction_OPCODE:
                _deserialize_routerAction(bodyReader, deserializationContext, state);
                break;
            case putDocument2_OPCODE:
                _deserialize_putDocument2(bodyReader, deserializationContext, state);
                break;
            case getDataClusterPKs_OPCODE:
                _deserialize_getDataClusterPKs(bodyReader, deserializationContext, state);
                break;
            case connectorInteraction_OPCODE:
                _deserialize_connectorInteraction(bodyReader, deserializationContext, state);
                break;
            case getBusinessConceptValue_OPCODE:
                _deserialize_getBusinessConceptValue(bodyReader, deserializationContext, state);
                break;
            case deleteStoredProcedure_OPCODE:
                _deserialize_deleteStoredProcedure(bodyReader, deserializationContext, state);
                break;
            case quickSearch_OPCODE:
                _deserialize_quickSearch(bodyReader, deserializationContext, state);
                break;
            case getSource_OPCODE:
                _deserialize_getSource(bodyReader, deserializationContext, state);
                break;
            case getOutboundAdaptorsByCriteria_OPCODE:
                _deserialize_getOutboundAdaptorsByCriteria(bodyReader, deserializationContext, state);
                break;
            case getObjectsForRoles_OPCODE:
                _deserialize_getObjectsForRoles(bodyReader, deserializationContext, state);
                break;
            case existsTransformerPluginV2_OPCODE:
                _deserialize_existsTransformerPluginV2(bodyReader, deserializationContext, state);
                break;
            case existsDataCluster_OPCODE:
                _deserialize_existsDataCluster(bodyReader, deserializationContext, state);
                break;
            case existsMenu_OPCODE:
                _deserialize_existsMenu(bodyReader, deserializationContext, state);
                break;
            case singleExtract_OPCODE:
                _deserialize_singleExtract(bodyReader, deserializationContext, state);
                break;
            case singleSearch_OPCODE:
                _deserialize_singleSearch(bodyReader, deserializationContext, state);
                break;
            case getRoutingRule_OPCODE:
                _deserialize_getRoutingRule(bodyReader, deserializationContext, state);
                break;
            case deleteRoutingOrderV2_OPCODE:
                _deserialize_deleteRoutingOrderV2(bodyReader, deserializationContext, state);
                break;
            case existsItem_OPCODE:
                _deserialize_existsItem(bodyReader, deserializationContext, state);
                break;
            case getDocumentsByCriteria_OPCODE:
                _deserialize_getDocumentsByCriteria(bodyReader, deserializationContext, state);
                break;
            case uploadDocumentByChunks_OPCODE:
                _deserialize_uploadDocumentByChunks(bodyReader, deserializationContext, state);
                break;
            case executeOutboundPlugin_OPCODE:
                _deserialize_executeOutboundPlugin(bodyReader, deserializationContext, state);
                break;
            case deleteBusinessConcept_OPCODE:
                _deserialize_deleteBusinessConcept(bodyReader, deserializationContext, state);
                break;
            case getInboundAdaptor_OPCODE:
                _deserialize_getInboundAdaptor(bodyReader, deserializationContext, state);
                break;
            case ping_OPCODE:
                _deserialize_ping(bodyReader, deserializationContext, state);
                break;
            case versioningTagItems_OPCODE:
                _deserialize_versioningTagItems(bodyReader, deserializationContext, state);
                break;
            case deleteTransform_OPCODE:
                _deserialize_deleteTransform(bodyReader, deserializationContext, state);
                break;
            case getInboundHTMLBodyForm_OPCODE:
                _deserialize_getInboundHTMLBodyForm(bodyReader, deserializationContext, state);
                break;
            case getDataModel_OPCODE:
                _deserialize_getDataModel(bodyReader, deserializationContext, state);
                break;
            case existsRoutingOrderV2_OPCODE:
                _deserialize_existsRoutingOrderV2(bodyReader, deserializationContext, state);
                break;
            case getOutboundAdaptors_OPCODE:
                _deserialize_getOutboundAdaptors(bodyReader, deserializationContext, state);
                break;
            case putDocumentInAFileAsJob_OPCODE:
                _deserialize_putDocumentInAFileAsJob(bodyReader, deserializationContext, state);
                break;
            case getItems_OPCODE:
                _deserialize_getItems(bodyReader, deserializationContext, state);
                break;
            case extractItem_OPCODE:
                _deserialize_extractItem(bodyReader, deserializationContext, state);
                break;
            case putDocumentInAStringAsJob_OPCODE:
                _deserialize_putDocumentInAStringAsJob(bodyReader, deserializationContext, state);
                break;
            case getDataCluster_OPCODE:
                _deserialize_getDataCluster(bodyReader, deserializationContext, state);
                break;
            case getDocument_OPCODE:
                _deserialize_getDocument(bodyReader, deserializationContext, state);
                break;
            case getRoutingOrderV2_OPCODE:
                _deserialize_getRoutingOrderV2(bodyReader, deserializationContext, state);
                break;
            case putJob_OPCODE:
                _deserialize_putJob(bodyReader, deserializationContext, state);
                break;
            case putRoutingRule_OPCODE:
                _deserialize_putRoutingRule(bodyReader, deserializationContext, state);
                break;
            case getOutboundPluginsByCriteria_OPCODE:
                _deserialize_getOutboundPluginsByCriteria(bodyReader, deserializationContext, state);
                break;
            case existsStoredProcedure_OPCODE:
                _deserialize_existsStoredProcedure(bodyReader, deserializationContext, state);
                break;
            case executeTransformerV2AsJob_OPCODE:
                _deserialize_executeTransformerV2AsJob(bodyReader, deserializationContext, state);
                break;
            case putInboundAdaptor_OPCODE:
                _deserialize_putInboundAdaptor(bodyReader, deserializationContext, state);
                break;
            case checkSchema_OPCODE:
                _deserialize_checkSchema(bodyReader, deserializationContext, state);
                break;
            case putOutboundPlugin_OPCODE:
                _deserialize_putOutboundPlugin(bodyReader, deserializationContext, state);
                break;
            case getDataModelPKs_OPCODE:
                _deserialize_getDataModelPKs(bodyReader, deserializationContext, state);
                break;
            case deleteOutboundAdaptor_OPCODE:
                _deserialize_deleteOutboundAdaptor(bodyReader, deserializationContext, state);
                break;
            case routingEngineV2Action_OPCODE:
                _deserialize_routingEngineV2Action(bodyReader, deserializationContext, state);
                break;
            case processFileUsingTransformer_OPCODE:
                _deserialize_processFileUsingTransformer(bodyReader, deserializationContext, state);
                break;
            case getTransformerPluginV2sList_OPCODE:
                _deserialize_getTransformerPluginV2sList(bodyReader, deserializationContext, state);
                break;
            case versioningRestoreObjects_OPCODE:
                _deserialize_versioningRestoreObjects(bodyReader, deserializationContext, state);
                break;
            case getTransformerPluginsList_OPCODE:
                _deserialize_getTransformerPluginsList(bodyReader, deserializationContext, state);
                break;
            case putTransformerV2_OPCODE:
                _deserialize_putTransformerV2(bodyReader, deserializationContext, state);
                break;
            case getRoutingOrderV2sByCriteria_OPCODE:
                _deserialize_getRoutingOrderV2sByCriteria(bodyReader, deserializationContext, state);
                break;
            case getTransformerPluginConfiguration_OPCODE:
                _deserialize_getTransformerPluginConfiguration(bodyReader, deserializationContext, state);
                break;
            case deleteDataCluster_OPCODE:
                _deserialize_deleteDataCluster(bodyReader, deserializationContext, state);
                break;
            case getJob_OPCODE:
                _deserialize_getJob(bodyReader, deserializationContext, state);
                break;
            case getRoutingOrderV2PKsByCriteria_OPCODE:
                _deserialize_getRoutingOrderV2PKsByCriteria(bodyReader, deserializationContext, state);
                break;
            case versioningGetObjectsHistory_OPCODE:
                _deserialize_versioningGetObjectsHistory(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the putBackgroundJob operation.
     */
    private void _deserialize_putBackgroundJob(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBackgroundJobPKObj =
            ns1_myWSBackgroundJobPK_LiteralSerializer.deserialize(ns1_putBackgroundJob_WSBackgroundJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putBackgroundJob_WSBackgroundJobPK_QNAME);
        bodyBlock.setValue(myWSBackgroundJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getRole operation.
     */
    private void _deserialize_getRole(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoleObj =
            ns1_myWSRole_LiteralSerializer.deserialize(ns1_getRole_WSRole_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getRole_WSRole_QNAME);
        bodyBlock.setValue(myWSRoleObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getMenu operation.
     */
    private void _deserialize_getMenu(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSMenuObj =
            ns1_myWSMenu_LiteralSerializer.deserialize(ns1_getMenu_WSMenu_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getMenu_WSMenu_QNAME);
        bodyBlock.setValue(myWSMenuObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the executeRoutingOrderV2Asynchronously operation.
     */
    private void _deserialize_executeRoutingOrderV2Asynchronously(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingOrderV2PKObj =
            ns1_myWSRoutingOrderV2PK_LiteralSerializer.deserialize(ns1_executeRoutingOrderV2Asynchronously_WSRoutingOrderV2PK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_executeRoutingOrderV2Asynchronously_WSRoutingOrderV2PK_QNAME);
        bodyBlock.setValue(myWSRoutingOrderV2PKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransformerPKs operation.
     */
    private void _deserialize_getTransformerPKs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerPKArrayObj =
            ns1_myWSTransformerPKArray_LiteralSerializer.deserialize(ns1_getTransformerPKs_WSTransformerPKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransformerPKs_WSTransformerPKArray_QNAME);
        bodyBlock.setValue(myWSTransformerPKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the processFileUsingTransformerAsBackgroundJob operation.
     */
    private void _deserialize_processFileUsingTransformerAsBackgroundJob(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBackgroundJobPKObj =
            ns1_myWSBackgroundJobPK_LiteralSerializer.deserialize(ns1_processFileUsingTransformerAsBackgroundJob_WSBackgroundJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_processFileUsingTransformerAsBackgroundJob_WSBackgroundJobPK_QNAME);
        bodyBlock.setValue(myWSBackgroundJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the xPathsSearch operation.
     */
    private void _deserialize_xPathsSearch(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringArrayObj =
            ns1_myWSStringArray_LiteralSerializer.deserialize(ns1_xPathsSearch_WSStringArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_xPathsSearch_WSStringArray_QNAME);
        bodyBlock.setValue(myWSStringArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getComponentVersion operation.
     */
    private void _deserialize_getComponentVersion(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSVersionObj =
            ns1_myWSVersion_LiteralSerializer.deserialize(ns1_getComponentVersion_WSVersion_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getComponentVersion_WSVersion_QNAME);
        bodyBlock.setValue(myWSVersionObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putView operation.
     */
    private void _deserialize_putView(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSViewPKObj =
            ns1_myWSViewPK_LiteralSerializer.deserialize(ns1_putView_WSViewPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putView_WSViewPK_QNAME);
        bodyBlock.setValue(myWSViewPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putTransformerPluginConfiguration operation.
     */
    private void _deserialize_putTransformerPluginConfiguration(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_putTransformerPluginConfiguration_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putTransformerPluginConfiguration_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getInboundAdaptorsByCriteria operation.
     */
    private void _deserialize_getInboundAdaptorsByCriteria(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSInboundAdaptorArrayObj =
            ns1_myWSInboundAdaptorArray_LiteralSerializer.deserialize(ns1_getInboundAdaptorsByCriteria_WSInboundAdaptorArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getInboundAdaptorsByCriteria_WSInboundAdaptorArray_QNAME);
        bodyBlock.setValue(myWSInboundAdaptorArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the routeItemV2 operation.
     */
    private void _deserialize_routeItemV2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingRulePKArrayObj =
            ns1_myWSRoutingRulePKArray_LiteralSerializer.deserialize(ns1_routeItemV2_WSRoutingRulePKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_routeItemV2_WSRoutingRulePKArray_QNAME);
        bodyBlock.setValue(myWSRoutingRulePKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getSources operation.
     */
    private void _deserialize_getSources(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSSourceArrayObj =
            ns1_myWSSourceArray_LiteralSerializer.deserialize(ns1_getSources_WSSourceArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getSources_WSSourceArray_QNAME);
        bodyBlock.setValue(myWSSourceArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getOutboundAdaptor operation.
     */
    private void _deserialize_getOutboundAdaptor(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSOutboundAdaptorObj =
            ns1_myWSOutboundAdaptor_LiteralSerializer.deserialize(ns1_getOutboundAdaptor_WSOutboundAdaptor_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getOutboundAdaptor_WSOutboundAdaptor_QNAME);
        bodyBlock.setValue(myWSOutboundAdaptorObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getViewPKs operation.
     */
    private void _deserialize_getViewPKs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSViewPKArrayObj =
            ns1_myWSViewPKArray_LiteralSerializer.deserialize(ns1_getViewPKs_WSViewPKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getViewPKs_WSViewPKArray_QNAME);
        bodyBlock.setValue(myWSViewPKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsRole operation.
     */
    private void _deserialize_existsRole(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsRole_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsRole_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsRoutingOrder operation.
     */
    private void _deserialize_existsRoutingOrder(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsRoutingOrder_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsRoutingOrder_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the initMDM operation.
     */
    private void _deserialize_initMDM(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSIntObj =
            ns1_myWSInt_LiteralSerializer.deserialize(ns1_initMDM_WSInt_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_initMDM_WSInt_QNAME);
        bodyBlock.setValue(myWSIntObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the processBytesUsingTransformer operation.
     */
    private void _deserialize_processBytesUsingTransformer(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSPipelineObj =
            ns1_myWSPipeline_LiteralSerializer.deserialize(ns1_processBytesUsingTransformer_WSPipeline_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_processBytesUsingTransformer_WSPipeline_QNAME);
        bodyBlock.setValue(myWSPipelineObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the executeStoredProcedure operation.
     */
    private void _deserialize_executeStoredProcedure(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringArrayObj =
            ns1_myWSStringArray_LiteralSerializer.deserialize(ns1_executeStoredProcedure_WSStringArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_executeStoredProcedure_WSStringArray_QNAME);
        bodyBlock.setValue(myWSStringArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the serviceAction operation.
     */
    private void _deserialize_serviceAction(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_serviceAction_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_serviceAction_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getRolePKs operation.
     */
    private void _deserialize_getRolePKs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRolePKArrayObj =
            ns1_myWSRolePKArray_LiteralSerializer.deserialize(ns1_getRolePKs_WSRolePKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getRolePKs_WSRolePKArray_QNAME);
        bodyBlock.setValue(myWSRolePKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getView operation.
     */
    private void _deserialize_getView(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSViewObj =
            ns1_myWSView_LiteralSerializer.deserialize(ns1_getView_WSView_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getView_WSView_QNAME);
        bodyBlock.setValue(myWSViewObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getBusinessElementValues operation.
     */
    private void _deserialize_getBusinessElementValues(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringArrayObj =
            ns1_myWSStringArray_LiteralSerializer.deserialize(ns1_getBusinessElementValues_WSStringArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getBusinessElementValues_WSStringArray_QNAME);
        bodyBlock.setValue(myWSStringArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteMenu operation.
     */
    private void _deserialize_deleteMenu(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSMenuPKObj =
            ns1_myWSMenuPK_LiteralSerializer.deserialize(ns1_deleteMenu_WSMenuPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteMenu_WSMenuPK_QNAME);
        bodyBlock.setValue(myWSMenuPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getOutboundPlugins operation.
     */
    private void _deserialize_getOutboundPlugins(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSOutboundPluginArrayObj =
            ns1_myWSOutboundPluginArray_LiteralSerializer.deserialize(ns1_getOutboundPlugins_WSOutboundPluginArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getOutboundPlugins_WSOutboundPluginArray_QNAME);
        bodyBlock.setValue(myWSOutboundPluginArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteInboundAdaptor operation.
     */
    private void _deserialize_deleteInboundAdaptor(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSInboundAdaptorPKObj =
            ns1_myWSInboundAdaptorPK_LiteralSerializer.deserialize(ns1_deleteInboundAdaptor_WSInboundAdaptorPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteInboundAdaptor_WSInboundAdaptorPK_QNAME);
        bodyBlock.setValue(myWSInboundAdaptorPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putBusinessConcept operation.
     */
    private void _deserialize_putBusinessConcept(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_putBusinessConcept_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putBusinessConcept_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putMenu operation.
     */
    private void _deserialize_putMenu(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSMenuPKObj =
            ns1_myWSMenuPK_LiteralSerializer.deserialize(ns1_putMenu_WSMenuPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putMenu_WSMenuPK_QNAME);
        bodyBlock.setValue(myWSMenuPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getJobs operation.
     */
    private void _deserialize_getJobs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSJobArrayObj =
            ns1_myWSJobArray_LiteralSerializer.deserialize(ns1_getJobs_WSJobArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getJobs_WSJobArray_QNAME);
        bodyBlock.setValue(myWSJobArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteRoutingOrder operation.
     */
    private void _deserialize_deleteRoutingOrder(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingOrderPKObj =
            ns1_myWSRoutingOrderPK_LiteralSerializer.deserialize(ns1_deleteRoutingOrder_WSRoutingOrderPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteRoutingOrder_WSRoutingOrderPK_QNAME);
        bodyBlock.setValue(myWSRoutingOrderPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putInboundPlugin operation.
     */
    private void _deserialize_putInboundPlugin(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSInboundPluginPKObj =
            ns1_myWSInboundPluginPK_LiteralSerializer.deserialize(ns1_putInboundPlugin_WSInboundPluginPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putInboundPlugin_WSInboundPluginPK_QNAME);
        bodyBlock.setValue(myWSInboundPluginPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putStoredProcedure operation.
     */
    private void _deserialize_putStoredProcedure(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStoredProcedurePKObj =
            ns1_myWSStoredProcedurePK_LiteralSerializer.deserialize(ns1_putStoredProcedure_WSStoredProcedurePK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putStoredProcedure_WSStoredProcedurePK_QNAME);
        bodyBlock.setValue(myWSStoredProcedurePKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteDestination operation.
     */
    private void _deserialize_deleteDestination(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDestinationPKObj =
            ns1_myWSDestinationPK_LiteralSerializer.deserialize(ns1_deleteDestination_WSDestinationPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteDestination_WSDestinationPK_QNAME);
        bodyBlock.setValue(myWSDestinationPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteTransformer operation.
     */
    private void _deserialize_deleteTransformer(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerPKObj =
            ns1_myWSTransformerPK_LiteralSerializer.deserialize(ns1_deleteTransformer_WSTransformerPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteTransformer_WSTransformerPK_QNAME);
        bodyBlock.setValue(myWSTransformerPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getBusinessConcepts operation.
     */
    private void _deserialize_getBusinessConcepts(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringArrayObj =
            ns1_myWSStringArray_LiteralSerializer.deserialize(ns1_getBusinessConcepts_WSStringArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getBusinessConcepts_WSStringArray_QNAME);
        bodyBlock.setValue(myWSStringArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putRole operation.
     */
    private void _deserialize_putRole(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRolePKObj =
            ns1_myWSRolePK_LiteralSerializer.deserialize(ns1_putRole_WSRolePK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putRole_WSRolePK_QNAME);
        bodyBlock.setValue(myWSRolePKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putItem operation.
     */
    private void _deserialize_putItem(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSItemPKObj =
            ns1_myWSItemPK_LiteralSerializer.deserialize(ns1_putItem_WSItemPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putItem_WSItemPK_QNAME);
        bodyBlock.setValue(myWSItemPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransformer operation.
     */
    private void _deserialize_getTransformer(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerObj =
            ns1_myWSTransformer_LiteralSerializer.deserialize(ns1_getTransformer_WSTransformer_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransformer_WSTransformer_QNAME);
        bodyBlock.setValue(myWSTransformerObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransforms operation.
     */
    private void _deserialize_getTransforms(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformArrayObj =
            ns1_myWSTransformArray_LiteralSerializer.deserialize(ns1_getTransforms_WSTransformArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransforms_WSTransformArray_QNAME);
        bodyBlock.setValue(myWSTransformArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putDataCluster operation.
     */
    private void _deserialize_putDataCluster(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDataClusterPKObj =
            ns1_myWSDataClusterPK_LiteralSerializer.deserialize(ns1_putDataCluster_WSDataClusterPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putDataCluster_WSDataClusterPK_QNAME);
        bodyBlock.setValue(myWSDataClusterPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransformerV2PKs operation.
     */
    private void _deserialize_getTransformerV2PKs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerV2PKArrayObj =
            ns1_myWSTransformerV2PKArray_LiteralSerializer.deserialize(ns1_getTransformerV2PKs_WSTransformerV2PKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransformerV2PKs_WSTransformerV2PKArray_QNAME);
        bodyBlock.setValue(myWSTransformerV2PKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the projectItem operation.
     */
    private void _deserialize_projectItem(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSItemPKObj =
            ns1_myWSItemPK_LiteralSerializer.deserialize(ns1_projectItem_WSItemPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_projectItem_WSItemPK_QNAME);
        bodyBlock.setValue(myWSItemPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getStoredProcedure operation.
     */
    private void _deserialize_getStoredProcedure(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStoredProcedureObj =
            ns1_myWSStoredProcedure_LiteralSerializer.deserialize(ns1_getStoredProcedure_WSStoredProcedure_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getStoredProcedure_WSStoredProcedure_QNAME);
        bodyBlock.setValue(myWSStoredProcedureObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getServicesList operation.
     */
    private void _deserialize_getServicesList(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSServicesListObj =
            ns1_myWSServicesList_LiteralSerializer.deserialize(ns1_getServicesList_WSServicesList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getServicesList_WSServicesList_QNAME);
        bodyBlock.setValue(myWSServicesListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsDataModel operation.
     */
    private void _deserialize_existsDataModel(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsDataModel_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsDataModel_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getRoutingOrder operation.
     */
    private void _deserialize_getRoutingOrder(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingOrderObj =
            ns1_myWSRoutingOrder_LiteralSerializer.deserialize(ns1_getRoutingOrder_WSRoutingOrder_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getRoutingOrder_WSRoutingOrder_QNAME);
        bodyBlock.setValue(myWSRoutingOrderObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getOutboundPlugin operation.
     */
    private void _deserialize_getOutboundPlugin(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSOutboundPluginObj =
            ns1_myWSOutboundPlugin_LiteralSerializer.deserialize(ns1_getOutboundPlugin_WSOutboundPlugin_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getOutboundPlugin_WSOutboundPlugin_QNAME);
        bodyBlock.setValue(myWSOutboundPluginObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getDestination operation.
     */
    private void _deserialize_getDestination(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDestinationObj =
            ns1_myWSDestination_LiteralSerializer.deserialize(ns1_getDestination_WSDestination_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getDestination_WSDestination_QNAME);
        bodyBlock.setValue(myWSDestinationObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getRoutingRulePKs operation.
     */
    private void _deserialize_getRoutingRulePKs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingRulePKArrayObj =
            ns1_myWSRoutingRulePKArray_LiteralSerializer.deserialize(ns1_getRoutingRulePKs_WSRoutingRulePKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getRoutingRulePKs_WSRoutingRulePKArray_QNAME);
        bodyBlock.setValue(myWSRoutingRulePKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putVersioningSystemConfiguration operation.
     */
    private void _deserialize_putVersioningSystemConfiguration(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_putVersioningSystemConfiguration_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putVersioningSystemConfiguration_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the extractUsingTransformerThruView operation.
     */
    private void _deserialize_extractUsingTransformerThruView(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSPipelineObj =
            ns1_myWSPipeline_LiteralSerializer.deserialize(ns1_extractUsingTransformerThruView_WSPipeline_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_extractUsingTransformerThruView_WSPipeline_QNAME);
        bodyBlock.setValue(myWSPipelineObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the versioningTagObjects operation.
     */
    private void _deserialize_versioningTagObjects(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBackgroundJobPKObj =
            ns1_myWSBackgroundJobPK_LiteralSerializer.deserialize(ns1_versioningTagObjects_WSBackgroundJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_versioningTagObjects_WSBackgroundJobPK_QNAME);
        bodyBlock.setValue(myWSBackgroundJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteRole operation.
     */
    private void _deserialize_deleteRole(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRolePKObj =
            ns1_myWSRolePK_LiteralSerializer.deserialize(ns1_deleteRole_WSRolePK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteRole_WSRolePK_QNAME);
        bodyBlock.setValue(myWSRolePKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putTransformerPluginV2Configuration operation.
     */
    private void _deserialize_putTransformerPluginV2Configuration(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_putTransformerPluginV2Configuration_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putTransformerPluginV2Configuration_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsTransformerPlugin operation.
     */
    private void _deserialize_existsTransformerPlugin(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsTransformerPlugin_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsTransformerPlugin_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the routeItemNow operation.
     */
    private void _deserialize_routeItemNow(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRouterStatusObj =
            ns1myns1_WSRouterStatus__WSRouterStatus_LiteralSerializer.deserialize(ns1_routeItemNow_WSRouterStatus_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_routeItemNow_WSRouterStatus_QNAME);
        bodyBlock.setValue(myWSRouterStatusObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getVersioningSystemConfiguration operation.
     */
    private void _deserialize_getVersioningSystemConfiguration(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSVersioningSystemConfigurationObj =
            ns1_myWSVersioningSystemConfiguration_LiteralSerializer.deserialize(ns1_getVersioningSystemConfiguration_WSVersioningSystemConfiguration_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getVersioningSystemConfiguration_WSVersioningSystemConfiguration_QNAME);
        bodyBlock.setValue(myWSVersioningSystemConfigurationObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getMenuPKs operation.
     */
    private void _deserialize_getMenuPKs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSMenuPKArrayObj =
            ns1_myWSMenuPKArray_LiteralSerializer.deserialize(ns1_getMenuPKs_WSMenuPKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getMenuPKs_WSMenuPKArray_QNAME);
        bodyBlock.setValue(myWSMenuPKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putTransformer operation.
     */
    private void _deserialize_putTransformer(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerPKObj =
            ns1_myWSTransformerPK_LiteralSerializer.deserialize(ns1_putTransformer_WSTransformerPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putTransformer_WSTransformerPK_QNAME);
        bodyBlock.setValue(myWSTransformerPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransform operation.
     */
    private void _deserialize_getTransform(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformObj =
            ns1_myWSTransform_LiteralSerializer.deserialize(ns1_getTransform_WSTransform_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransform_WSTransform_QNAME);
        bodyBlock.setValue(myWSTransformObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getBackgroundJob operation.
     */
    private void _deserialize_getBackgroundJob(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBackgroundJobObj =
            ns1_myWSBackgroundJob_LiteralSerializer.deserialize(ns1_getBackgroundJob_WSBackgroundJob_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getBackgroundJob_WSBackgroundJob_QNAME);
        bodyBlock.setValue(myWSBackgroundJobObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getDocuments operation.
     */
    private void _deserialize_getDocuments(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDocumentArrayObj =
            ns1_myWSDocumentArray_LiteralSerializer.deserialize(ns1_getDocuments_WSDocumentArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getDocuments_WSDocumentArray_QNAME);
        bodyBlock.setValue(myWSDocumentArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the versioningRestoreItems operation.
     */
    private void _deserialize_versioningRestoreItems(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBackgroundJobPKObj =
            ns1_myWSBackgroundJobPK_LiteralSerializer.deserialize(ns1_versioningRestoreItems_WSBackgroundJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_versioningRestoreItems_WSBackgroundJobPK_QNAME);
        bodyBlock.setValue(myWSBackgroundJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsTransformerV2 operation.
     */
    private void _deserialize_existsTransformerV2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsTransformerV2_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsTransformerV2_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteDataModel operation.
     */
    private void _deserialize_deleteDataModel(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDataModelPKObj =
            ns1_myWSDataModelPK_LiteralSerializer.deserialize(ns1_deleteDataModel_WSDataModelPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteDataModel_WSDataModelPK_QNAME);
        bodyBlock.setValue(myWSDataModelPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putDocumentInAString operation.
     */
    private void _deserialize_putDocumentInAString(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDocumentPKObj =
            ns1_myWSDocumentPK_LiteralSerializer.deserialize(ns1_putDocumentInAString_WSDocumentPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putDocumentInAString_WSDocumentPK_QNAME);
        bodyBlock.setValue(myWSDocumentPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getStoredProcedurePKs operation.
     */
    private void _deserialize_getStoredProcedurePKs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStoredProcedurePKArrayObj =
            ns1_myWSStoredProcedurePKArray_LiteralSerializer.deserialize(ns1_getStoredProcedurePKs_WSStoredProcedurePKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getStoredProcedurePKs_WSStoredProcedurePKArray_QNAME);
        bodyBlock.setValue(myWSStoredProcedurePKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the executeInboundPlugin operation.
     */
    private void _deserialize_executeInboundPlugin(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_executeInboundPlugin_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_executeInboundPlugin_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteOutboundPlugin operation.
     */
    private void _deserialize_deleteOutboundPlugin(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSOutboundPluginPKObj =
            ns1_myWSOutboundPluginPK_LiteralSerializer.deserialize(ns1_deleteOutboundPlugin_WSOutboundPluginPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteOutboundPlugin_WSOutboundPluginPK_QNAME);
        bodyBlock.setValue(myWSOutboundPluginPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteItems operation.
     */
    private void _deserialize_deleteItems(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSIntObj =
            ns1_myWSInt_LiteralSerializer.deserialize(ns1_deleteItems_WSInt_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteItems_WSInt_QNAME);
        bodyBlock.setValue(myWSIntObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getOutboundHTMLBodyForm operation.
     */
    private void _deserialize_getOutboundHTMLBodyForm(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSOutboundHTMLBodyFormObj =
            ns1_myWSOutboundHTMLBodyForm_LiteralSerializer.deserialize(ns1_getOutboundHTMLBodyForm_WSOutboundHTMLBodyForm_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getOutboundHTMLBodyForm_WSOutboundHTMLBodyForm_QNAME);
        bodyBlock.setValue(myWSOutboundHTMLBodyFormObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsRoutingRule operation.
     */
    private void _deserialize_existsRoutingRule(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsRoutingRule_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsRoutingRule_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteRoutingRule operation.
     */
    private void _deserialize_deleteRoutingRule(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingRulePKObj =
            ns1_myWSRoutingRulePK_LiteralSerializer.deserialize(ns1_deleteRoutingRule_WSRoutingRulePK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteRoutingRule_WSRoutingRulePK_QNAME);
        bodyBlock.setValue(myWSRoutingRulePKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getBusinessConceptKey operation.
     */
    private void _deserialize_getBusinessConceptKey(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSConceptKeyObj =
            ns1_myWSConceptKey_LiteralSerializer.deserialize(ns1_getBusinessConceptKey_WSConceptKey_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getBusinessConceptKey_WSConceptKey_QNAME);
        bodyBlock.setValue(myWSConceptKeyObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the extractUsingTransformer operation.
     */
    private void _deserialize_extractUsingTransformer(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSPipelineObj =
            ns1_myWSPipeline_LiteralSerializer.deserialize(ns1_extractUsingTransformer_WSPipeline_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_extractUsingTransformer_WSPipeline_QNAME);
        bodyBlock.setValue(myWSPipelineObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the executeRoutingOrderNow operation.
     */
    private void _deserialize_executeRoutingOrderNow(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRouterStatusObj =
            ns1myns1_WSRouterStatus__WSRouterStatus_LiteralSerializer.deserialize(ns1_executeRoutingOrderNow_WSRouterStatus_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_executeRoutingOrderNow_WSRouterStatus_QNAME);
        bodyBlock.setValue(myWSRouterStatusObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putDocumentInAFile operation.
     */
    private void _deserialize_putDocumentInAFile(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDocumentPKObj =
            ns1_myWSDocumentPK_LiteralSerializer.deserialize(ns1_putDocumentInAFile_WSDocumentPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putDocumentInAFile_WSDocumentPK_QNAME);
        bodyBlock.setValue(myWSDocumentPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getItemPKsByCriteria operation.
     */
    private void _deserialize_getItemPKsByCriteria(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSItemPKsByCriteriaResponseObj =
            ns1_myWSItemPKsByCriteriaResponse_LiteralSerializer.deserialize(ns1_getItemPKsByCriteria_WSItemPKsByCriteriaResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getItemPKsByCriteria_WSItemPKsByCriteriaResponse_QNAME);
        bodyBlock.setValue(myWSItemPKsByCriteriaResponseObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteItem operation.
     */
    private void _deserialize_deleteItem(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSItemPKObj =
            ns1_myWSItemPK_LiteralSerializer.deserialize(ns1_deleteItem_WSItemPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteItem_WSItemPK_QNAME);
        bodyBlock.setValue(myWSItemPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransformerV2 operation.
     */
    private void _deserialize_getTransformerV2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerV2Obj =
            ns1_myWSTransformerV2_LiteralSerializer.deserialize(ns1_getTransformerV2_WSTransformerV2_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransformerV2_WSTransformerV2_QNAME);
        bodyBlock.setValue(myWSTransformerV2Obj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putDocument2AsJob operation.
     */
    private void _deserialize_putDocument2AsJob(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSJobPKObj =
            ns1_myWSJobPK_LiteralSerializer.deserialize(ns1_putDocument2AsJob_WSJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putDocument2AsJob_WSJobPK_QNAME);
        bodyBlock.setValue(myWSJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteTransformerV2 operation.
     */
    private void _deserialize_deleteTransformerV2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerV2PKObj =
            ns1_myWSTransformerV2PK_LiteralSerializer.deserialize(ns1_deleteTransformerV2_WSTransformerV2PK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteTransformerV2_WSTransformerV2PK_QNAME);
        bodyBlock.setValue(myWSTransformerV2PKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the executeRoutingOrderV2Synchronously operation.
     */
    private void _deserialize_executeRoutingOrderV2Synchronously(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_executeRoutingOrderV2Synchronously_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_executeRoutingOrderV2Synchronously_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the processBytesUsingTransformerAsBackgroundJob operation.
     */
    private void _deserialize_processBytesUsingTransformerAsBackgroundJob(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBackgroundJobPKObj =
            ns1_myWSBackgroundJobPK_LiteralSerializer.deserialize(ns1_processBytesUsingTransformerAsBackgroundJob_WSBackgroundJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_processBytesUsingTransformerAsBackgroundJob_WSBackgroundJobPK_QNAME);
        bodyBlock.setValue(myWSBackgroundJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the executeTransformerV2 operation.
     */
    private void _deserialize_executeTransformerV2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerContextObj =
            ns1_myWSTransformerContext_LiteralSerializer.deserialize(ns1_executeTransformerV2_WSTransformerContext_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_executeTransformerV2_WSTransformerContext_QNAME);
        bodyBlock.setValue(myWSTransformerContextObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getInboundPlugin operation.
     */
    private void _deserialize_getInboundPlugin(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSInboundPluginObj =
            ns1_myWSInboundPlugin_LiteralSerializer.deserialize(ns1_getInboundPlugin_WSInboundPlugin_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getInboundPlugin_WSInboundPlugin_QNAME);
        bodyBlock.setValue(myWSInboundPluginObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteSource operation.
     */
    private void _deserialize_deleteSource(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSSourcePKObj =
            ns1_myWSSourcePK_LiteralSerializer.deserialize(ns1_deleteSource_WSSourcePK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteSource_WSSourcePK_QNAME);
        bodyBlock.setValue(myWSSourcePKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putDataModel operation.
     */
    private void _deserialize_putDataModel(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDataModelPKObj =
            ns1_myWSDataModelPK_LiteralSerializer.deserialize(ns1_putDataModel_WSDataModelPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putDataModel_WSDataModelPK_QNAME);
        bodyBlock.setValue(myWSDataModelPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the versioningGetItemsHistory operation.
     */
    private void _deserialize_versioningGetItemsHistory(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSVersioningItemsHistoryObj =
            ns1_myWSVersioningItemsHistory_LiteralSerializer.deserialize(ns1_versioningGetItemsHistory_WSVersioningItemsHistory_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_versioningGetItemsHistory_WSVersioningItemsHistory_QNAME);
        bodyBlock.setValue(myWSVersioningItemsHistoryObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getInboundPluginsByCriteria operation.
     */
    private void _deserialize_getInboundPluginsByCriteria(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSInboundPluginArrayObj =
            ns1_myWSInboundPluginArray_LiteralSerializer.deserialize(ns1_getInboundPluginsByCriteria_WSInboundPluginArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getInboundPluginsByCriteria_WSInboundPluginArray_QNAME);
        bodyBlock.setValue(myWSInboundPluginArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransformerPluginV2Configuration operation.
     */
    private void _deserialize_getTransformerPluginV2Configuration(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_getTransformerPluginV2Configuration_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginV2Configuration_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the findBackgroundJobPKs operation.
     */
    private void _deserialize_findBackgroundJobPKs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBackgroundJobPKArrayObj =
            ns1_myWSBackgroundJobPKArray_LiteralSerializer.deserialize(ns1_findBackgroundJobPKs_WSBackgroundJobPKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_findBackgroundJobPKs_WSBackgroundJobPKArray_QNAME);
        bodyBlock.setValue(myWSBackgroundJobPKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the versioningGetInfo operation.
     */
    private void _deserialize_versioningGetInfo(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSVersioningInfoObj =
            ns1_myWSVersioningInfo_LiteralSerializer.deserialize(ns1_versioningGetInfo_WSVersioningInfo_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_versioningGetInfo_WSVersioningInfo_QNAME);
        bodyBlock.setValue(myWSVersioningInfoObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putSource operation.
     */
    private void _deserialize_putSource(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSSourcePKObj =
            ns1_myWSSourcePK_LiteralSerializer.deserialize(ns1_putSource_WSSourcePK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putSource_WSSourcePK_QNAME);
        bodyBlock.setValue(myWSSourcePKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteDocument operation.
     */
    private void _deserialize_deleteDocument(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDocumentPKObj =
            ns1_myWSDocumentPK_LiteralSerializer.deserialize(ns1_deleteDocument_WSDocumentPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteDocument_WSDocumentPK_QNAME);
        bodyBlock.setValue(myWSDocumentPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsView operation.
     */
    private void _deserialize_existsView(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsView_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsView_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransformerPluginDetails operation.
     */
    private void _deserialize_getTransformerPluginDetails(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerPluginDetailsObj =
            ns1_myWSTransformerPluginDetails_LiteralSerializer.deserialize(ns1_getTransformerPluginDetails_WSTransformerPluginDetails_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginDetails_WSTransformerPluginDetails_QNAME);
        bodyBlock.setValue(myWSTransformerPluginDetailsObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteInboundPlugin operation.
     */
    private void _deserialize_deleteInboundPlugin(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSInboundPluginPKObj =
            ns1_myWSInboundPluginPK_LiteralSerializer.deserialize(ns1_deleteInboundPlugin_WSInboundPluginPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteInboundPlugin_WSInboundPluginPK_QNAME);
        bodyBlock.setValue(myWSInboundPluginPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putServiceConfiguration operation.
     */
    private void _deserialize_putServiceConfiguration(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_putServiceConfiguration_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putServiceConfiguration_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getItem operation.
     */
    private void _deserialize_getItem(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSItemObj =
            ns1_myWSItem_LiteralSerializer.deserialize(ns1_getItem_WSItem_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getItem_WSItem_QNAME);
        bodyBlock.setValue(myWSItemObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getInboundAdaptors operation.
     */
    private void _deserialize_getInboundAdaptors(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSInboundAdaptorArrayObj =
            ns1_myWSInboundAdaptorArray_LiteralSerializer.deserialize(ns1_getInboundAdaptors_WSInboundAdaptorArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getInboundAdaptors_WSInboundAdaptorArray_QNAME);
        bodyBlock.setValue(myWSInboundAdaptorArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getServiceConfiguration operation.
     */
    private void _deserialize_getServiceConfiguration(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_getServiceConfiguration_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getServiceConfiguration_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putDestination operation.
     */
    private void _deserialize_putDestination(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDestinationPKObj =
            ns1_myWSDestinationPK_LiteralSerializer.deserialize(ns1_putDestination_WSDestinationPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putDestination_WSDestinationPK_QNAME);
        bodyBlock.setValue(myWSDestinationPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the directQuery operation.
     */
    private void _deserialize_directQuery(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringArrayObj =
            ns1_myWSStringArray_LiteralSerializer.deserialize(ns1_directQuery_WSStringArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_directQuery_WSStringArray_QNAME);
        bodyBlock.setValue(myWSStringArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putOutboundAdaptor operation.
     */
    private void _deserialize_putOutboundAdaptor(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSOutboundAdaptorPKObj =
            ns1_myWSOutboundAdaptorPK_LiteralSerializer.deserialize(ns1_putOutboundAdaptor_WSOutboundAdaptorPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putOutboundAdaptor_WSOutboundAdaptorPK_QNAME);
        bodyBlock.setValue(myWSOutboundAdaptorPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getDestinations operation.
     */
    private void _deserialize_getDestinations(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDestinationArrayObj =
            ns1_myWSDestinationArray_LiteralSerializer.deserialize(ns1_getDestinations_WSDestinationArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getDestinations_WSDestinationArray_QNAME);
        bodyBlock.setValue(myWSDestinationArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getRoutingOrdersByCriteria operation.
     */
    private void _deserialize_getRoutingOrdersByCriteria(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingOrderArrayObj =
            ns1_myWSRoutingOrderArray_LiteralSerializer.deserialize(ns1_getRoutingOrdersByCriteria_WSRoutingOrderArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getRoutingOrdersByCriteria_WSRoutingOrderArray_QNAME);
        bodyBlock.setValue(myWSRoutingOrderArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransformerPluginV2Details operation.
     */
    private void _deserialize_getTransformerPluginV2Details(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerPluginV2DetailsObj =
            ns1_myWSTransformerPluginV2Details_LiteralSerializer.deserialize(ns1_getTransformerPluginV2Details_WSTransformerPluginV2Details_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginV2Details_WSTransformerPluginV2Details_QNAME);
        bodyBlock.setValue(myWSTransformerPluginV2DetailsObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteView operation.
     */
    private void _deserialize_deleteView(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSViewPKObj =
            ns1_myWSViewPK_LiteralSerializer.deserialize(ns1_deleteView_WSViewPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteView_WSViewPK_QNAME);
        bodyBlock.setValue(myWSViewPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsTransformer operation.
     */
    private void _deserialize_existsTransformer(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsTransformer_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsTransformer_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putTransform operation.
     */
    private void _deserialize_putTransform(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformPKObj =
            ns1_myWSTransformPK_LiteralSerializer.deserialize(ns1_putTransform_WSTransformPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putTransform_WSTransformPK_QNAME);
        bodyBlock.setValue(myWSTransformPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getConceptsInDataCluster operation.
     */
    private void _deserialize_getConceptsInDataCluster(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringArrayObj =
            ns1_myWSStringArray_LiteralSerializer.deserialize(ns1_getConceptsInDataCluster_WSStringArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getConceptsInDataCluster_WSStringArray_QNAME);
        bodyBlock.setValue(myWSStringArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getInboundPlugins operation.
     */
    private void _deserialize_getInboundPlugins(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSInboundPluginArrayObj =
            ns1_myWSInboundPluginArray_LiteralSerializer.deserialize(ns1_getInboundPlugins_WSInboundPluginArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getInboundPlugins_WSInboundPluginArray_QNAME);
        bodyBlock.setValue(myWSInboundPluginArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putBusinessConceptSchema operation.
     */
    private void _deserialize_putBusinessConceptSchema(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_putBusinessConceptSchema_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putBusinessConceptSchema_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the routerAction operation.
     */
    private void _deserialize_routerAction(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRouterStatusObj =
            ns1myns1_WSRouterStatus__WSRouterStatus_LiteralSerializer.deserialize(ns1_routerAction_WSRouterStatus_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_routerAction_WSRouterStatus_QNAME);
        bodyBlock.setValue(myWSRouterStatusObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putDocument2 operation.
     */
    private void _deserialize_putDocument2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDocumentPKObj =
            ns1_myWSDocumentPK_LiteralSerializer.deserialize(ns1_putDocument2_WSDocumentPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putDocument2_WSDocumentPK_QNAME);
        bodyBlock.setValue(myWSDocumentPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getDataClusterPKs operation.
     */
    private void _deserialize_getDataClusterPKs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDataClusterPKArrayObj =
            ns1_myWSDataClusterPKArray_LiteralSerializer.deserialize(ns1_getDataClusterPKs_WSDataClusterPKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getDataClusterPKs_WSDataClusterPKArray_QNAME);
        bodyBlock.setValue(myWSDataClusterPKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the connectorInteraction operation.
     */
    private void _deserialize_connectorInteraction(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSConnectorInteractionResponseObj =
            ns1_myWSConnectorInteractionResponse_LiteralSerializer.deserialize(ns1_connectorInteraction_WSConnectorInteractionResponse_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_connectorInteraction_WSConnectorInteractionResponse_QNAME);
        bodyBlock.setValue(myWSConnectorInteractionResponseObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getBusinessConceptValue operation.
     */
    private void _deserialize_getBusinessConceptValue(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_getBusinessConceptValue_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getBusinessConceptValue_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteStoredProcedure operation.
     */
    private void _deserialize_deleteStoredProcedure(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStoredProcedurePKObj =
            ns1_myWSStoredProcedurePK_LiteralSerializer.deserialize(ns1_deleteStoredProcedure_WSStoredProcedurePK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteStoredProcedure_WSStoredProcedurePK_QNAME);
        bodyBlock.setValue(myWSStoredProcedurePKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the quickSearch operation.
     */
    private void _deserialize_quickSearch(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringArrayObj =
            ns1_myWSStringArray_LiteralSerializer.deserialize(ns1_quickSearch_WSStringArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_quickSearch_WSStringArray_QNAME);
        bodyBlock.setValue(myWSStringArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getSource operation.
     */
    private void _deserialize_getSource(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSSourceObj =
            ns1_myWSSource_LiteralSerializer.deserialize(ns1_getSource_WSSource_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getSource_WSSource_QNAME);
        bodyBlock.setValue(myWSSourceObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getOutboundAdaptorsByCriteria operation.
     */
    private void _deserialize_getOutboundAdaptorsByCriteria(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSOutboundAdaptorArrayObj =
            ns1_myWSOutboundAdaptorArray_LiteralSerializer.deserialize(ns1_getOutboundAdaptorsByCriteria_WSOutboundAdaptorArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getOutboundAdaptorsByCriteria_WSOutboundAdaptorArray_QNAME);
        bodyBlock.setValue(myWSOutboundAdaptorArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getObjectsForRoles operation.
     */
    private void _deserialize_getObjectsForRoles(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringArrayObj =
            ns1_myWSStringArray_LiteralSerializer.deserialize(ns1_getObjectsForRoles_WSStringArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getObjectsForRoles_WSStringArray_QNAME);
        bodyBlock.setValue(myWSStringArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsTransformerPluginV2 operation.
     */
    private void _deserialize_existsTransformerPluginV2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsTransformerPluginV2_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsTransformerPluginV2_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsDataCluster operation.
     */
    private void _deserialize_existsDataCluster(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsDataCluster_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsDataCluster_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsMenu operation.
     */
    private void _deserialize_existsMenu(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsMenu_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsMenu_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the singleExtract operation.
     */
    private void _deserialize_singleExtract(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringArrayObj =
            ns1_myWSStringArray_LiteralSerializer.deserialize(ns1_singleExtract_WSStringArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_singleExtract_WSStringArray_QNAME);
        bodyBlock.setValue(myWSStringArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the singleSearch operation.
     */
    private void _deserialize_singleSearch(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringArrayObj =
            ns1_myWSStringArray_LiteralSerializer.deserialize(ns1_singleSearch_WSStringArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_singleSearch_WSStringArray_QNAME);
        bodyBlock.setValue(myWSStringArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getRoutingRule operation.
     */
    private void _deserialize_getRoutingRule(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingRuleObj =
            ns1_myWSRoutingRule_LiteralSerializer.deserialize(ns1_getRoutingRule_WSRoutingRule_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getRoutingRule_WSRoutingRule_QNAME);
        bodyBlock.setValue(myWSRoutingRuleObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteRoutingOrderV2 operation.
     */
    private void _deserialize_deleteRoutingOrderV2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingOrderV2PKObj =
            ns1_myWSRoutingOrderV2PK_LiteralSerializer.deserialize(ns1_deleteRoutingOrderV2_WSRoutingOrderV2PK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteRoutingOrderV2_WSRoutingOrderV2PK_QNAME);
        bodyBlock.setValue(myWSRoutingOrderV2PKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsItem operation.
     */
    private void _deserialize_existsItem(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsItem_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsItem_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getDocumentsByCriteria operation.
     */
    private void _deserialize_getDocumentsByCriteria(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDocumentArrayObj =
            ns1_myWSDocumentArray_LiteralSerializer.deserialize(ns1_getDocumentsByCriteria_WSDocumentArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getDocumentsByCriteria_WSDocumentArray_QNAME);
        bodyBlock.setValue(myWSDocumentArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the uploadDocumentByChunks operation.
     */
    private void _deserialize_uploadDocumentByChunks(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_uploadDocumentByChunks_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_uploadDocumentByChunks_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the executeOutboundPlugin operation.
     */
    private void _deserialize_executeOutboundPlugin(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_executeOutboundPlugin_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_executeOutboundPlugin_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteBusinessConcept operation.
     */
    private void _deserialize_deleteBusinessConcept(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_deleteBusinessConcept_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteBusinessConcept_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getInboundAdaptor operation.
     */
    private void _deserialize_getInboundAdaptor(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSInboundAdaptorObj =
            ns1_myWSInboundAdaptor_LiteralSerializer.deserialize(ns1_getInboundAdaptor_WSInboundAdaptor_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getInboundAdaptor_WSInboundAdaptor_QNAME);
        bodyBlock.setValue(myWSInboundAdaptorObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the ping operation.
     */
    private void _deserialize_ping(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_ping_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_ping_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the versioningTagItems operation.
     */
    private void _deserialize_versioningTagItems(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBackgroundJobPKObj =
            ns1_myWSBackgroundJobPK_LiteralSerializer.deserialize(ns1_versioningTagItems_WSBackgroundJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_versioningTagItems_WSBackgroundJobPK_QNAME);
        bodyBlock.setValue(myWSBackgroundJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteTransform operation.
     */
    private void _deserialize_deleteTransform(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformPKObj =
            ns1_myWSTransformPK_LiteralSerializer.deserialize(ns1_deleteTransform_WSTransformPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteTransform_WSTransformPK_QNAME);
        bodyBlock.setValue(myWSTransformPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getInboundHTMLBodyForm operation.
     */
    private void _deserialize_getInboundHTMLBodyForm(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSInboundHTMLBodyFormObj =
            ns1_myWSInboundHTMLBodyForm_LiteralSerializer.deserialize(ns1_getInboundHTMLBodyForm_WSInboundHTMLBodyForm_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getInboundHTMLBodyForm_WSInboundHTMLBodyForm_QNAME);
        bodyBlock.setValue(myWSInboundHTMLBodyFormObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getDataModel operation.
     */
    private void _deserialize_getDataModel(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDataModelObj =
            ns1_myWSDataModel_LiteralSerializer.deserialize(ns1_getDataModel_WSDataModel_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getDataModel_WSDataModel_QNAME);
        bodyBlock.setValue(myWSDataModelObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsRoutingOrderV2 operation.
     */
    private void _deserialize_existsRoutingOrderV2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingOrderV2Obj =
            ns1_myWSRoutingOrderV2_LiteralSerializer.deserialize(ns1_existsRoutingOrderV2_WSRoutingOrderV2_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsRoutingOrderV2_WSRoutingOrderV2_QNAME);
        bodyBlock.setValue(myWSRoutingOrderV2Obj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getOutboundAdaptors operation.
     */
    private void _deserialize_getOutboundAdaptors(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSOutboundAdaptorArrayObj =
            ns1_myWSOutboundAdaptorArray_LiteralSerializer.deserialize(ns1_getOutboundAdaptors_WSOutboundAdaptorArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getOutboundAdaptors_WSOutboundAdaptorArray_QNAME);
        bodyBlock.setValue(myWSOutboundAdaptorArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putDocumentInAFileAsJob operation.
     */
    private void _deserialize_putDocumentInAFileAsJob(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSJobPKObj =
            ns1_myWSJobPK_LiteralSerializer.deserialize(ns1_putDocumentInAFileAsJob_WSJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putDocumentInAFileAsJob_WSJobPK_QNAME);
        bodyBlock.setValue(myWSJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getItems operation.
     */
    private void _deserialize_getItems(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringArrayObj =
            ns1_myWSStringArray_LiteralSerializer.deserialize(ns1_getItems_WSStringArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getItems_WSStringArray_QNAME);
        bodyBlock.setValue(myWSStringArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the extractItem operation.
     */
    private void _deserialize_extractItem(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_extractItem_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_extractItem_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putDocumentInAStringAsJob operation.
     */
    private void _deserialize_putDocumentInAStringAsJob(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSJobPKObj =
            ns1_myWSJobPK_LiteralSerializer.deserialize(ns1_putDocumentInAStringAsJob_WSJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putDocumentInAStringAsJob_WSJobPK_QNAME);
        bodyBlock.setValue(myWSJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getDataCluster operation.
     */
    private void _deserialize_getDataCluster(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDataClusterObj =
            ns1_myWSDataCluster_LiteralSerializer.deserialize(ns1_getDataCluster_WSDataCluster_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getDataCluster_WSDataCluster_QNAME);
        bodyBlock.setValue(myWSDataClusterObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getDocument operation.
     */
    private void _deserialize_getDocument(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDocumentObj =
            ns1_myWSDocument_LiteralSerializer.deserialize(ns1_getDocument_WSDocument_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getDocument_WSDocument_QNAME);
        bodyBlock.setValue(myWSDocumentObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getRoutingOrderV2 operation.
     */
    private void _deserialize_getRoutingOrderV2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingOrderV2Obj =
            ns1_myWSRoutingOrderV2_LiteralSerializer.deserialize(ns1_getRoutingOrderV2_WSRoutingOrderV2_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getRoutingOrderV2_WSRoutingOrderV2_QNAME);
        bodyBlock.setValue(myWSRoutingOrderV2Obj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putJob operation.
     */
    private void _deserialize_putJob(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSJobPKObj =
            ns1_myWSJobPK_LiteralSerializer.deserialize(ns1_putJob_WSJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putJob_WSJobPK_QNAME);
        bodyBlock.setValue(myWSJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putRoutingRule operation.
     */
    private void _deserialize_putRoutingRule(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingRulePKObj =
            ns1_myWSRoutingRulePK_LiteralSerializer.deserialize(ns1_putRoutingRule_WSRoutingRulePK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putRoutingRule_WSRoutingRulePK_QNAME);
        bodyBlock.setValue(myWSRoutingRulePKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getOutboundPluginsByCriteria operation.
     */
    private void _deserialize_getOutboundPluginsByCriteria(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSOutboundPluginArrayObj =
            ns1_myWSOutboundPluginArray_LiteralSerializer.deserialize(ns1_getOutboundPluginsByCriteria_WSOutboundPluginArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getOutboundPluginsByCriteria_WSOutboundPluginArray_QNAME);
        bodyBlock.setValue(myWSOutboundPluginArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the existsStoredProcedure operation.
     */
    private void _deserialize_existsStoredProcedure(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBooleanObj =
            ns1_myWSBoolean_LiteralSerializer.deserialize(ns1_existsStoredProcedure_WSBoolean_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_existsStoredProcedure_WSBoolean_QNAME);
        bodyBlock.setValue(myWSBooleanObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the executeTransformerV2AsJob operation.
     */
    private void _deserialize_executeTransformerV2AsJob(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBackgroundJobPKObj =
            ns1_myWSBackgroundJobPK_LiteralSerializer.deserialize(ns1_executeTransformerV2AsJob_WSBackgroundJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_executeTransformerV2AsJob_WSBackgroundJobPK_QNAME);
        bodyBlock.setValue(myWSBackgroundJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putInboundAdaptor operation.
     */
    private void _deserialize_putInboundAdaptor(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSInboundAdaptorPKObj =
            ns1_myWSInboundAdaptorPK_LiteralSerializer.deserialize(ns1_putInboundAdaptor_WSInboundAdaptorPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putInboundAdaptor_WSInboundAdaptorPK_QNAME);
        bodyBlock.setValue(myWSInboundAdaptorPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the checkSchema operation.
     */
    private void _deserialize_checkSchema(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_checkSchema_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_checkSchema_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putOutboundPlugin operation.
     */
    private void _deserialize_putOutboundPlugin(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSOutboundPluginPKObj =
            ns1_myWSOutboundPluginPK_LiteralSerializer.deserialize(ns1_putOutboundPlugin_WSOutboundPluginPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putOutboundPlugin_WSOutboundPluginPK_QNAME);
        bodyBlock.setValue(myWSOutboundPluginPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getDataModelPKs operation.
     */
    private void _deserialize_getDataModelPKs(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDataModelPKArrayObj =
            ns1_myWSDataModelPKArray_LiteralSerializer.deserialize(ns1_getDataModelPKs_WSDataModelPKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getDataModelPKs_WSDataModelPKArray_QNAME);
        bodyBlock.setValue(myWSDataModelPKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteOutboundAdaptor operation.
     */
    private void _deserialize_deleteOutboundAdaptor(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSOutboundAdaptorPKObj =
            ns1_myWSOutboundAdaptorPK_LiteralSerializer.deserialize(ns1_deleteOutboundAdaptor_WSOutboundAdaptorPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteOutboundAdaptor_WSOutboundAdaptorPK_QNAME);
        bodyBlock.setValue(myWSOutboundAdaptorPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the routingEngineV2Action operation.
     */
    private void _deserialize_routingEngineV2Action(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingEngineV2StatusObj =
            ns1myns1_WSRoutingEngineV2Status__WSRoutingEngineV2Status_LiteralSerializer.deserialize(ns1_routingEngineV2Action_WSRoutingEngineV2Status_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_routingEngineV2Action_WSRoutingEngineV2Status_QNAME);
        bodyBlock.setValue(myWSRoutingEngineV2StatusObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the processFileUsingTransformer operation.
     */
    private void _deserialize_processFileUsingTransformer(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSPipelineObj =
            ns1_myWSPipeline_LiteralSerializer.deserialize(ns1_processFileUsingTransformer_WSPipeline_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_processFileUsingTransformer_WSPipeline_QNAME);
        bodyBlock.setValue(myWSPipelineObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransformerPluginV2sList operation.
     */
    private void _deserialize_getTransformerPluginV2sList(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerPluginV2SListObj =
            ns1_myWSTransformerPluginV2SList_LiteralSerializer.deserialize(ns1_getTransformerPluginV2sList_WSTransformerPluginV2sList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginV2sList_WSTransformerPluginV2sList_QNAME);
        bodyBlock.setValue(myWSTransformerPluginV2SListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the versioningRestoreObjects operation.
     */
    private void _deserialize_versioningRestoreObjects(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSBackgroundJobPKObj =
            ns1_myWSBackgroundJobPK_LiteralSerializer.deserialize(ns1_versioningRestoreObjects_WSBackgroundJobPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_versioningRestoreObjects_WSBackgroundJobPK_QNAME);
        bodyBlock.setValue(myWSBackgroundJobPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransformerPluginsList operation.
     */
    private void _deserialize_getTransformerPluginsList(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerPluginsListObj =
            ns1_myWSTransformerPluginsList_LiteralSerializer.deserialize(ns1_getTransformerPluginsList_WSTransformerPluginsList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginsList_WSTransformerPluginsList_QNAME);
        bodyBlock.setValue(myWSTransformerPluginsListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the putTransformerV2 operation.
     */
    private void _deserialize_putTransformerV2(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSTransformerV2PKObj =
            ns1_myWSTransformerV2PK_LiteralSerializer.deserialize(ns1_putTransformerV2_WSTransformerV2PK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_putTransformerV2_WSTransformerV2PK_QNAME);
        bodyBlock.setValue(myWSTransformerV2PKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getRoutingOrderV2sByCriteria operation.
     */
    private void _deserialize_getRoutingOrderV2sByCriteria(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingOrderV2ArrayObj =
            ns1_myWSRoutingOrderV2Array_LiteralSerializer.deserialize(ns1_getRoutingOrderV2sByCriteria_WSRoutingOrderV2Array_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getRoutingOrderV2sByCriteria_WSRoutingOrderV2Array_QNAME);
        bodyBlock.setValue(myWSRoutingOrderV2ArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getTransformerPluginConfiguration operation.
     */
    private void _deserialize_getTransformerPluginConfiguration(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSStringObj =
            ns1_myWSString_LiteralSerializer.deserialize(ns1_getTransformerPluginConfiguration_WSString_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getTransformerPluginConfiguration_WSString_QNAME);
        bodyBlock.setValue(myWSStringObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deleteDataCluster operation.
     */
    private void _deserialize_deleteDataCluster(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSDataClusterPKObj =
            ns1_myWSDataClusterPK_LiteralSerializer.deserialize(ns1_deleteDataCluster_WSDataClusterPK_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deleteDataCluster_WSDataClusterPK_QNAME);
        bodyBlock.setValue(myWSDataClusterPKObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getJob operation.
     */
    private void _deserialize_getJob(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSJobObj =
            ns1_myWSJob_LiteralSerializer.deserialize(ns1_getJob_WSJob_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getJob_WSJob_QNAME);
        bodyBlock.setValue(myWSJobObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the getRoutingOrderV2PKsByCriteria operation.
     */
    private void _deserialize_getRoutingOrderV2PKsByCriteria(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSRoutingOrderV2PKArrayObj =
            ns1_myWSRoutingOrderV2PKArray_LiteralSerializer.deserialize(ns1_getRoutingOrderV2PKsByCriteria_WSRoutingOrderV2PKArray_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_getRoutingOrderV2PKsByCriteria_WSRoutingOrderV2PKArray_QNAME);
        bodyBlock.setValue(myWSRoutingOrderV2PKArrayObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the versioningGetObjectsHistory operation.
     */
    private void _deserialize_versioningGetObjectsHistory(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myWSVersioningObjectsHistoryObj =
            ns1_myWSVersioningObjectsHistory_LiteralSerializer.deserialize(ns1_versioningGetObjectsHistory_WSVersioningObjectsHistory_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_versioningGetObjectsHistory_WSVersioningObjectsHistory_QNAME);
        bodyBlock.setValue(myWSVersioningObjectsHistoryObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    protected String _getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    
    protected void _preHandlingHook(StreamingSenderState state) throws Exception {
        super._preHandlingHook(state);
    }
    
    
    protected boolean _preRequestSendingHook(StreamingSenderState state) throws Exception {
        boolean bool = false;
        bool = super._preRequestSendingHook(state);
        return bool;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_myWSExistsRoutingOrderV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsRoutingOrderV2.class, ns1_WSExistsRoutingOrderV2_TYPE_QNAME);
        ns1_myWSConnectorInteractionResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSConnectorInteractionResponse.class, ns1_WSConnectorInteractionResponse_TYPE_QNAME);
        ns1_myWSExistsTransformerPlugin_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsTransformerPlugin.class, ns1_WSExistsTransformerPlugin_TYPE_QNAME);
        ns1_myWSInitData_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInitData.class, ns1_WSInitData_TYPE_QNAME);
        ns1_myWSPutDataModel_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutDataModel.class, ns1_WSPutDataModel_TYPE_QNAME);
        ns1_myWSExistsStoredProcedure_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsStoredProcedure.class, ns1_WSExistsStoredProcedure_TYPE_QNAME);
        ns1_myWSRegexDataModelPKs_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexDataModelPKs.class, ns1_WSRegexDataModelPKs_TYPE_QNAME);
        ns1_myWSTransform_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransform.class, ns1_WSTransform_TYPE_QNAME);
        ns1_myWSPutItem_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutItem.class, ns1_WSPutItem_TYPE_QNAME);
        ns1_myWSGetInboundPlugin_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetInboundPlugin.class, ns1_WSGetInboundPlugin_TYPE_QNAME);
        ns1_myWSPutMenu_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutMenu.class, ns1_WSPutMenu_TYPE_QNAME);
        ns1_myWSBackgroundJobPKArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSBackgroundJobPKArray.class, ns1_WSBackgroundJobPKArray_TYPE_QNAME);
        ns1_myWSDestinationArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDestinationArray.class, ns1_WSDestinationArray_TYPE_QNAME);
        ns1_myWSExistsMenu_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsMenu.class, ns1_WSExistsMenu_TYPE_QNAME);
        ns1_myWSGetBusinessConcepts_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetBusinessConcepts.class, ns1_WSGetBusinessConcepts_TYPE_QNAME);
        ns1_myWSInt_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInt.class, ns1_WSInt_TYPE_QNAME);
        ns1_myWSExistsRoutingRule_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsRoutingRule.class, ns1_WSExistsRoutingRule_TYPE_QNAME);
        ns1_myWSItemPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSItemPK.class, ns1_WSItemPK_TYPE_QNAME);
        ns1_myWSDeleteRole_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteRole.class, ns1_WSDeleteRole_TYPE_QNAME);
        ns1_myWSGetOutboundAdaptorsByCriteria_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetOutboundAdaptorsByCriteria.class, ns1_WSGetOutboundAdaptorsByCriteria_TYPE_QNAME);
        ns1_myWSGetConceptsInDataCluster_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetConceptsInDataCluster.class, ns1_WSGetConceptsInDataCluster_TYPE_QNAME);
        ns1_myWSPutDestination_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutDestination.class, ns1_WSPutDestination_TYPE_QNAME);
        ns1_myWSTransformerPluginV2SList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerPluginV2SList.class, ns1_WSTransformerPluginV2sList_TYPE_QNAME);
        ns1_myWSExistsItem_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsItem.class, ns1_WSExistsItem_TYPE_QNAME);
        ns1_myWSPutRole_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutRole.class, ns1_WSPutRole_TYPE_QNAME);
        ns1_myWSDataClusterPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDataClusterPK.class, ns1_WSDataClusterPK_TYPE_QNAME);
        ns1_myWSFindBackgroundJobPKs_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSFindBackgroundJobPKs.class, ns1_WSFindBackgroundJobPKs_TYPE_QNAME);
        ns1_myWSVersioningObjectsHistory_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningObjectsHistory.class, ns1_WSVersioningObjectsHistory_TYPE_QNAME);
        ns1_myWSExecuteRoutingOrderNow_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExecuteRoutingOrderNow.class, ns1_WSExecuteRoutingOrderNow_TYPE_QNAME);
        ns1_myWSRouteItemV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRouteItemV2.class, ns1_WSRouteItemV2_TYPE_QNAME);
        ns1_myWSRolePK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRolePK.class, ns1_WSRolePK_TYPE_QNAME);
        ns1_myWSGetTransformerV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetTransformerV2.class, ns1_WSGetTransformerV2_TYPE_QNAME);
        ns1_myWSTransformerPluginPutConfiguration_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerPluginPutConfiguration.class, ns1_WSTransformerPluginPutConfiguration_TYPE_QNAME);
        ns1_myWSExistsTransformerPluginV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsTransformerPluginV2.class, ns1_WSExistsTransformerPluginV2_TYPE_QNAME);
        ns1_myWSProcessFileUsingTransformer_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSProcessFileUsingTransformer.class, ns1_WSProcessFileUsingTransformer_TYPE_QNAME);
        ns1_myWSExtractItem_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExtractItem.class, ns1_WSExtractItem_TYPE_QNAME);
        ns1_myWSDocumentPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDocumentPK.class, ns1_WSDocumentPK_TYPE_QNAME);
        ns1_myWSExecuteOutboundPlugin_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExecuteOutboundPlugin.class, ns1_WSExecuteOutboundPlugin_TYPE_QNAME);
        ns1_myWSRegexJobs_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexJobs.class, ns1_WSRegexJobs_TYPE_QNAME);
        ns1_myWSView_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSView.class, ns1_WSView_TYPE_QNAME);
        ns1_myWSTransformerPKArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerPKArray.class, ns1_WSTransformerPKArray_TYPE_QNAME);
        ns1_myWSRoutingEngineV2Action_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingEngineV2Action.class, ns1_WSRoutingEngineV2Action_TYPE_QNAME);
        ns1_myWSStringArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSStringArray.class, ns1_WSStringArray_TYPE_QNAME);
        ns1_myWSQuickSearch_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSQuickSearch.class, ns1_WSQuickSearch_TYPE_QNAME);
        ns1_myWSPutBackgroundJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutBackgroundJob.class, ns1_WSPutBackgroundJob_TYPE_QNAME);
        ns1_myWSExecuteRoutingOrderV2Synchronously_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExecuteRoutingOrderV2Synchronously.class, ns1_WSExecuteRoutingOrderV2Synchronously_TYPE_QNAME);
        ns1_myWSGetBusinessConceptValue_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetBusinessConceptValue.class, ns1_WSGetBusinessConceptValue_TYPE_QNAME);
        ns1_myWSDirectQuery_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDirectQuery.class, ns1_WSDirectQuery_TYPE_QNAME);
        ns1_myWSServiceGetConfiguration_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSServiceGetConfiguration.class, ns1_WSServiceGetConfiguration_TYPE_QNAME);
        ns1_myWSGetDestination_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetDestination.class, ns1_WSGetDestination_TYPE_QNAME);
        ns1_myWSGetRoutingOrder_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetRoutingOrder.class, ns1_WSGetRoutingOrder_TYPE_QNAME);
        ns1_myWSRegexInboundPlugins_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexInboundPlugins.class, ns1_WSRegexInboundPlugins_TYPE_QNAME);
        ns1_myWSTransformerPluginDetails_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerPluginDetails.class, ns1_WSTransformerPluginDetails_TYPE_QNAME);
        ns1_myWSExecuteInboundPlugin_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExecuteInboundPlugin.class, ns1_WSExecuteInboundPlugin_TYPE_QNAME);
        ns1_myWSInboundPluginPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInboundPluginPK.class, ns1_WSInboundPluginPK_TYPE_QNAME);
        ns1_myWSGetDocument_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetDocument.class, ns1_WSGetDocument_TYPE_QNAME);
        ns1_myWSConnectorInteraction_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSConnectorInteraction.class, ns1_WSConnectorInteraction_TYPE_QNAME);
        ns1_myWSPutDocument2AsJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutDocument2AsJob.class, ns1_WSPutDocument2AsJob_TYPE_QNAME);
        ns1_myWSProcessFileUsingTransformerAsBackgroundJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSProcessFileUsingTransformerAsBackgroundJob.class, ns1_WSProcessFileUsingTransformerAsBackgroundJob_TYPE_QNAME);
        ns1_myWSPutStoredProcedure_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutStoredProcedure.class, ns1_WSPutStoredProcedure_TYPE_QNAME);
        ns1_myWSTransformerPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerPK.class, ns1_WSTransformerPK_TYPE_QNAME);
        ns1_myWSRegexOutboundPlugins_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexOutboundPlugins.class, ns1_WSRegexOutboundPlugins_TYPE_QNAME);
        ns1_myWSSingleExtract_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSSingleExtract.class, ns1_WSSingleExtract_TYPE_QNAME);
        ns1_myWSGetTransformerPluginV2SList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetTransformerPluginV2SList.class, ns1_WSGetTransformerPluginV2sList_TYPE_QNAME);
        ns1_myWSGetBusinessElementValues_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetBusinessElementValues.class, ns1_WSGetBusinessElementValues_TYPE_QNAME);
        ns1_myWSGetBusinessConceptKey_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetBusinessConceptKey.class, ns1_WSGetBusinessConceptKey_TYPE_QNAME);
        ns1_myWSPutOutboundAdaptor_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutOutboundAdaptor.class, ns1_WSPutOutboundAdaptor_TYPE_QNAME);
        ns1_myWSGetMenuPKs_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetMenuPKs.class, ns1_WSGetMenuPKs_TYPE_QNAME);
        ns1_myWSTransformArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformArray.class, ns1_WSTransformArray_TYPE_QNAME);
        ns1_myWSExecuteRoutingOrderV2Asynchronously_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExecuteRoutingOrderV2Asynchronously.class, ns1_WSExecuteRoutingOrderV2Asynchronously_TYPE_QNAME);
        ns1_myWSSingleSearch_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSSingleSearch.class, ns1_WSSingleSearch_TYPE_QNAME);
        ns1_myWSGetBackgroundJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetBackgroundJob.class, ns1_WSGetBackgroundJob_TYPE_QNAME);
        ns1_myWSPutJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutJob.class, ns1_WSPutJob_TYPE_QNAME);
        ns1_myWSInboundAdaptorArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInboundAdaptorArray.class, ns1_WSInboundAdaptorArray_TYPE_QNAME);
        ns1_myWSJobPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSJobPK.class, ns1_WSJobPK_TYPE_QNAME);
        ns1_myWSTransformerPluginV2Details_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerPluginV2Details.class, ns1_WSTransformerPluginV2Details_TYPE_QNAME);
        ns1_myWSOutboundAdaptor_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSOutboundAdaptor.class, ns1_WSOutboundAdaptor_TYPE_QNAME);
        ns1myns1_WSRoutingEngineV2Status__WSRoutingEngineV2Status_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingEngineV2Status.class, ns1_WSRoutingEngineV2Status_TYPE_QNAME);
        ns1_myWSDocumentArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDocumentArray.class, ns1_WSDocumentArray_TYPE_QNAME);
        ns1_myWSDataModelPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDataModelPK.class, ns1_WSDataModelPK_TYPE_QNAME);
        ns1_myWSJobArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSJobArray.class, ns1_WSJobArray_TYPE_QNAME);
        ns1_myWSStoredProcedurePK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSStoredProcedurePK.class, ns1_WSStoredProcedurePK_TYPE_QNAME);
        ns1_myWSProcessBytesUsingTransformerAsBackgroundJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSProcessBytesUsingTransformerAsBackgroundJob.class, ns1_WSProcessBytesUsingTransformerAsBackgroundJob_TYPE_QNAME);
        ns1_myWSGetTransformerPluginDetails_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetTransformerPluginDetails.class, ns1_WSGetTransformerPluginDetails_TYPE_QNAME);
        ns1_myWSPutDataCluster_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutDataCluster.class, ns1_WSPutDataCluster_TYPE_QNAME);
        ns1_myWSDeleteBusinessConcept_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteBusinessConcept.class, ns1_WSDeleteBusinessConcept_TYPE_QNAME);
        ns1_myWSVersioningRestoreItems_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningRestoreItems.class, ns1_WSVersioningRestoreItems_TYPE_QNAME);
        ns1_myWSExecuteTransformerV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExecuteTransformerV2.class, ns1_WSExecuteTransformerV2_TYPE_QNAME);
        ns1_myWSGetInboundAdaptorsByCriteria_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetInboundAdaptorsByCriteria.class, ns1_WSGetInboundAdaptorsByCriteria_TYPE_QNAME);
        ns1_myWSGetServicesList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetServicesList.class, ns1_WSGetServicesList_TYPE_QNAME);
        ns1_myWSExistsTransformer_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsTransformer.class, ns1_WSExistsTransformer_TYPE_QNAME);
        ns1_myWSVersioningTagObjects_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningTagObjects.class, ns1_WSVersioningTagObjects_TYPE_QNAME);
        ns1_myWSVersioningSystemConfiguration_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningSystemConfiguration.class, ns1_WSVersioningSystemConfiguration_TYPE_QNAME);
        ns1_myWSMenuPKArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSMenuPKArray.class, ns1_WSMenuPKArray_TYPE_QNAME);
        ns1_myWSPutBusinessConceptSchema_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutBusinessConceptSchema.class, ns1_WSPutBusinessConceptSchema_TYPE_QNAME);
        ns1_myWSRoutingOrderPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingOrderPK.class, ns1_WSRoutingOrderPK_TYPE_QNAME);
        ns1_myWSPutRoutingRule_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutRoutingRule.class, ns1_WSPutRoutingRule_TYPE_QNAME);
        ns1_myWSVersioningItemsHistory_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningItemsHistory.class, ns1_WSVersioningItemsHistory_TYPE_QNAME);
        ns1myns1_WSRouterStatus__WSRouterStatus_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRouterStatus.class, ns1_WSRouterStatus_TYPE_QNAME);
        ns1_myWSProcessBytesUsingTransformer_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSProcessBytesUsingTransformer.class, ns1_WSProcessBytesUsingTransformer_TYPE_QNAME);
        ns1_myWSRolePKArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRolePKArray.class, ns1_WSRolePKArray_TYPE_QNAME);
        ns1_myWSGetTransformerV2PKs_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetTransformerV2PKs.class, ns1_WSGetTransformerV2PKs_TYPE_QNAME);
        ns1_myWSDeleteMenu_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteMenu.class, ns1_WSDeleteMenu_TYPE_QNAME);
        ns1_myWSVersioningGetObjectsHistory_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningGetObjectsHistory.class, ns1_WSVersioningGetObjectsHistory_TYPE_QNAME);
        ns1_myWSGetRolePKs_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetRolePKs.class, ns1_WSGetRolePKs_TYPE_QNAME);
        ns1_myWSGetDataModel_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetDataModel.class, ns1_WSGetDataModel_TYPE_QNAME);
        ns1_myWSDataClusterPKArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDataClusterPKArray.class, ns1_WSDataClusterPKArray_TYPE_QNAME);
        ns1_myWSGetView_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetView.class, ns1_WSGetView_TYPE_QNAME);
        ns1_myWSDeleteDataModel_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteDataModel.class, ns1_WSDeleteDataModel_TYPE_QNAME);
        ns1_myWSDeleteItem_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteItem.class, ns1_WSDeleteItem_TYPE_QNAME);
        ns1_myWSDeleteRoutingOrderV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteRoutingOrderV2.class, ns1_WSDeleteRoutingOrderV2_TYPE_QNAME);
        ns1_myWSTransformerPluginV2GetConfiguration_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerPluginV2GetConfiguration.class, ns1_WSTransformerPluginV2GetConfiguration_TYPE_QNAME);
        ns1_myWSGetObjectsForRoles_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetObjectsForRoles.class, ns1_WSGetObjectsForRoles_TYPE_QNAME);
        ns1_myWSGetRoutingOrderV2SByCriteria_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetRoutingOrderV2SByCriteria.class, ns1_WSGetRoutingOrderV2sByCriteria_TYPE_QNAME);
        ns1_myWSGetRoutingRule_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetRoutingRule.class, ns1_WSGetRoutingRule_TYPE_QNAME);
        ns1_myWSPutVersioningSystemConfiguration_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutVersioningSystemConfiguration.class, ns1_WSPutVersioningSystemConfiguration_TYPE_QNAME);
        ns1_myWSRegexOutboundAdaptors_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexOutboundAdaptors.class, ns1_WSRegexOutboundAdaptors_TYPE_QNAME);
        ns1_myWSOutboundPluginPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSOutboundPluginPK.class, ns1_WSOutboundPluginPK_TYPE_QNAME);
        ns1_myWSGetItemPKsByCriteria_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetItemPKsByCriteria.class, ns1_WSGetItemPKsByCriteria_TYPE_QNAME);
        ns1_myWSExtractUsingTransformer_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExtractUsingTransformer.class, ns1_WSExtractUsingTransformer_TYPE_QNAME);
        ns1_myWSRegexDocuments_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexDocuments.class, ns1_WSRegexDocuments_TYPE_QNAME);
        ns1_myWSTransformerPluginV2PutConfiguration_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerPluginV2PutConfiguration.class, ns1_WSTransformerPluginV2PutConfiguration_TYPE_QNAME);
        ns1_myWSDeleteTransform_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteTransform.class, ns1_WSDeleteTransform_TYPE_QNAME);
        ns1_myWSGetJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetJob.class, ns1_WSGetJob_TYPE_QNAME);
        ns1_myWSGetTransformerPKs_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetTransformerPKs.class, ns1_WSGetTransformerPKs_TYPE_QNAME);
        ns1_myWSPutTransformerV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutTransformerV2.class, ns1_WSPutTransformerV2_TYPE_QNAME);
        ns1_myWSOutboundAdaptorArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSOutboundAdaptorArray.class, ns1_WSOutboundAdaptorArray_TYPE_QNAME);
        ns1_myWSServicePutConfiguration_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSServicePutConfiguration.class, ns1_WSServicePutConfiguration_TYPE_QNAME);
        ns1_myWSDeleteTransformerV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteTransformerV2.class, ns1_WSDeleteTransformerV2_TYPE_QNAME);
        ns1_myWSPipeline_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPipeline.class, ns1_WSPipeline_TYPE_QNAME);
        ns1_myWSGetTransformerPluginV2Details_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetTransformerPluginV2Details.class, ns1_WSGetTransformerPluginV2Details_TYPE_QNAME);
        ns1_myWSCheckSchema_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSCheckSchema.class, ns1_WSCheckSchema_TYPE_QNAME);
        ns1_myWSString_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSString.class, ns1_WSString_TYPE_QNAME);
        ns1_myWSVersioningTagItems_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningTagItems.class, ns1_WSVersioningTagItems_TYPE_QNAME);
        ns1_myWSGetItem_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetItem.class, ns1_WSGetItem_TYPE_QNAME);
        ns1_myWSVersioningInfo_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningInfo.class, ns1_WSVersioningInfo_TYPE_QNAME);
        ns1_myWSExistsDataCluster_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsDataCluster.class, ns1_WSExistsDataCluster_TYPE_QNAME);
        ns1_myWSPutDocument2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutDocument2.class, ns1_WSPutDocument2_TYPE_QNAME);
        ns1_myWSPutOutboundPlugin_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutOutboundPlugin.class, ns1_WSPutOutboundPlugin_TYPE_QNAME);
        ns1_myWSGetRoutingOrderV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetRoutingOrderV2.class, ns1_WSGetRoutingOrderV2_TYPE_QNAME);
        ns1_myWSRoutingOrderV2Array_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingOrderV2Array.class, ns1_WSRoutingOrderV2Array_TYPE_QNAME);
        ns1_myWSRouteItemNow_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRouteItemNow.class, ns1_WSRouteItemNow_TYPE_QNAME);
        ns1_myWSDeleteStoredProcedure_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteStoredProcedure.class, ns1_WSDeleteStoredProcedure_TYPE_QNAME);
        ns1_myWSInboundPluginArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInboundPluginArray.class, ns1_WSInboundPluginArray_TYPE_QNAME);
        ns1_myWSTransformerV2PKArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerV2PKArray.class, ns1_WSTransformerV2PKArray_TYPE_QNAME);
        ns1_myWSDataModelPKArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDataModelPKArray.class, ns1_WSDataModelPKArray_TYPE_QNAME);
        ns1_myWSRegexInboundAdaptors_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexInboundAdaptors.class, ns1_WSRegexInboundAdaptors_TYPE_QNAME);
        ns1_myWSRegexDataClusterPKs_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexDataClusterPKs.class, ns1_WSRegexDataClusterPKs_TYPE_QNAME);
        ns1_myWSDataModel_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDataModel.class, ns1_WSDataModel_TYPE_QNAME);
        ns1_myWSSourcePK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSSourcePK.class, ns1_WSSourcePK_TYPE_QNAME);
        ns1_myWSRoutingRulePK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingRulePK.class, ns1_WSRoutingRulePK_TYPE_QNAME);
        ns1_myWSDeleteItems_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteItems.class, ns1_WSDeleteItems_TYPE_QNAME);
        ns1_myWSPutSource_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutSource.class, ns1_WSPutSource_TYPE_QNAME);
        ns1_myWSItem_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSItem.class, ns1_WSItem_TYPE_QNAME);
        ns1_myWSDeleteOutboundAdaptor_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteOutboundAdaptor.class, ns1_WSDeleteOutboundAdaptor_TYPE_QNAME);
        ns1_myWSGetOutboundHTMLBodyForm_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetOutboundHTMLBodyForm.class, ns1_WSGetOutboundHTMLBodyForm_TYPE_QNAME);
        ns1_myWSRoutingOrder_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingOrder.class, ns1_WSRoutingOrder_TYPE_QNAME);
        ns1_myWSGetRoutingOrderV2PKsByCriteria_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetRoutingOrderV2PKsByCriteria.class, ns1_WSGetRoutingOrderV2PKsByCriteria_TYPE_QNAME);
        ns1_myWSServicesList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSServicesList.class, ns1_WSServicesList_TYPE_QNAME);
        ns1_myWSPutInboundAdaptor_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutInboundAdaptor.class, ns1_WSPutInboundAdaptor_TYPE_QNAME);
        ns1_myWSExistsRole_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsRole.class, ns1_WSExistsRole_TYPE_QNAME);
        ns1_myWSOutboundPlugin_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSOutboundPlugin.class, ns1_WSOutboundPlugin_TYPE_QNAME);
        ns1_myWSGetViewPKs_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetViewPKs.class, ns1_WSGetViewPKs_TYPE_QNAME);
        ns1_myWSPutBusinessConcept_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutBusinessConcept.class, ns1_WSPutBusinessConcept_TYPE_QNAME);
        ns1_myWSServiceAction_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSServiceAction.class, ns1_WSServiceAction_TYPE_QNAME);
        ns1_myWSGetOutboundPlugin_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetOutboundPlugin.class, ns1_WSGetOutboundPlugin_TYPE_QNAME);
        ns1_myWSXPathsSearch_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSXPathsSearch.class, ns1_WSXPathsSearch_TYPE_QNAME);
        ns1_myWSMenu_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSMenu.class, ns1_WSMenu_TYPE_QNAME);
        ns1_myWSDataCluster_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDataCluster.class, ns1_WSDataCluster_TYPE_QNAME);
        ns1_myWSExistsRoutingOrder_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsRoutingOrder.class, ns1_WSExistsRoutingOrder_TYPE_QNAME);
        ns1_myWSVersioningGetItemsHistory_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningGetItemsHistory.class, ns1_WSVersioningGetItemsHistory_TYPE_QNAME);
        ns1_myWSGetOutboundPluginsByCriteria_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetOutboundPluginsByCriteria.class, ns1_WSGetOutboundPluginsByCriteria_TYPE_QNAME);
        ns1_myWSGetRoutingOrdersByCriteria_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetRoutingOrdersByCriteria.class, ns1_WSGetRoutingOrdersByCriteria_TYPE_QNAME);
        ns1_myWSGetSource_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetSource.class, ns1_WSGetSource_TYPE_QNAME);
        ns1_myWSRouterAction_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRouterAction.class, ns1_WSRouterAction_TYPE_QNAME);
        ns1_myWSDeleteInboundAdaptor_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteInboundAdaptor.class, ns1_WSDeleteInboundAdaptor_TYPE_QNAME);
        ns1_myWSDeleteSource_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteSource.class, ns1_WSDeleteSource_TYPE_QNAME);
        ns1_myWSDeleteRoutingRule_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteRoutingRule.class, ns1_WSDeleteRoutingRule_TYPE_QNAME);
        ns1_myWSDeleteDocument_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteDocument.class, ns1_WSDeleteDocument_TYPE_QNAME);
        ns1_myWSGetMenu_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetMenu.class, ns1_WSGetMenu_TYPE_QNAME);
        ns1_myWSInboundPlugin_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInboundPlugin.class, ns1_WSInboundPlugin_TYPE_QNAME);
        ns1_myWSViewPKArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSViewPKArray.class, ns1_WSViewPKArray_TYPE_QNAME);
        ns1_myWSExistsDataModel_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsDataModel.class, ns1_WSExistsDataModel_TYPE_QNAME);
        ns1_myWSGetStoredProcedure_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetStoredProcedure.class, ns1_WSGetStoredProcedure_TYPE_QNAME);
        ns1_myWSInboundAdaptor_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInboundAdaptor.class, ns1_WSInboundAdaptor_TYPE_QNAME);
        ns1_myWSOutboundPluginArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSOutboundPluginArray.class, ns1_WSOutboundPluginArray_TYPE_QNAME);
        ns1_myWSSourceArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSSourceArray.class, ns1_WSSourceArray_TYPE_QNAME);
        ns1_myWSTransformerPluginGetConfiguration_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerPluginGetConfiguration.class, ns1_WSTransformerPluginGetConfiguration_TYPE_QNAME);
        ns1_myWSRoutingOrderV2PK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingOrderV2PK.class, ns1_WSRoutingOrderV2PK_TYPE_QNAME);
        ns1_myWSGetTransformer_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetTransformer.class, ns1_WSGetTransformer_TYPE_QNAME);
        ns1_myWSGetInboundAdaptor_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetInboundAdaptor.class, ns1_WSGetInboundAdaptor_TYPE_QNAME);
        ns1_myWSPutTransformer_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutTransformer.class, ns1_WSPutTransformer_TYPE_QNAME);
        ns1_myWSItemPKsByCriteriaResponse_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSItemPKsByCriteriaResponse.class, ns1_WSItemPKsByCriteriaResponse_TYPE_QNAME);
        ns1_myWSExistsTransformerV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsTransformerV2.class, ns1_WSExistsTransformerV2_TYPE_QNAME);
        ns1_myWSTransformerV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerV2.class, ns1_WSTransformerV2_TYPE_QNAME);
        ns1_myWSPutInboundPlugin_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutInboundPlugin.class, ns1_WSPutInboundPlugin_TYPE_QNAME);
        ns1_myWSVersioningGetInfo_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningGetInfo.class, ns1_WSVersioningGetInfo_TYPE_QNAME);
        ns1_myWSDeleteOutboundPlugin_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteOutboundPlugin.class, ns1_WSDeleteOutboundPlugin_TYPE_QNAME);
        ns1_myWSStoredProcedurePKArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSStoredProcedurePKArray.class, ns1_WSStoredProcedurePKArray_TYPE_QNAME);
        ns1_myWSGetOutboundAdaptor_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetOutboundAdaptor.class, ns1_WSGetOutboundAdaptor_TYPE_QNAME);
        ns1_myWSViewPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSViewPK.class, ns1_WSViewPK_TYPE_QNAME);
        ns1_myWSPutView_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutView.class, ns1_WSPutView_TYPE_QNAME);
        ns1_myWSRegexStoredProcedure_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexStoredProcedure.class, ns1_WSRegexStoredProcedure_TYPE_QNAME);
        ns1_myWSBackgroundJobPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSBackgroundJobPK.class, ns1_WSBackgroundJobPK_TYPE_QNAME);
        ns1_myWSInboundAdaptorPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInboundAdaptorPK.class, ns1_WSInboundAdaptorPK_TYPE_QNAME);
        ns1_myWSPutDocumentInAStringAsJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutDocumentInAStringAsJob.class, ns1_WSPutDocumentInAStringAsJob_TYPE_QNAME);
        ns1_myWSDeleteDataCluster_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteDataCluster.class, ns1_WSDeleteDataCluster_TYPE_QNAME);
        ns1_myWSGetComponentVersion_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetComponentVersion.class, ns1_WSGetComponentVersion_TYPE_QNAME);
        ns1_myWSTransformer_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformer.class, ns1_WSTransformer_TYPE_QNAME);
        ns1_myWSGetDocumentsByCriteria_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetDocumentsByCriteria.class, ns1_WSGetDocumentsByCriteria_TYPE_QNAME);
        ns1_myWSDeleteView_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteView.class, ns1_WSDeleteView_TYPE_QNAME);
        ns1_myWSGetInboundHTMLBodyForm_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetInboundHTMLBodyForm.class, ns1_WSGetInboundHTMLBodyForm_TYPE_QNAME);
        ns1_myWSDeleteDestination_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteDestination.class, ns1_WSDeleteDestination_TYPE_QNAME);
        ns1_myWSDeleteTransformer_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteTransformer.class, ns1_WSDeleteTransformer_TYPE_QNAME);
        ns1_myWSGetTransformerPluginsList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetTransformerPluginsList.class, ns1_WSGetTransformerPluginsList_TYPE_QNAME);
        ns1_myWSInboundHTMLBodyForm_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInboundHTMLBodyForm.class, ns1_WSInboundHTMLBodyForm_TYPE_QNAME);
        ns1_myWSGetDataCluster_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetDataCluster.class, ns1_WSGetDataCluster_TYPE_QNAME);
        ns1_myWSDocument_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDocument.class, ns1_WSDocument_TYPE_QNAME);
        ns1_myWSGetInboundPluginsByCriteria_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetInboundPluginsByCriteria.class, ns1_WSGetInboundPluginsByCriteria_TYPE_QNAME);
        ns1_myWSBackgroundJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSBackgroundJob.class, ns1_WSBackgroundJob_TYPE_QNAME);
        ns1_myWSJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSJob.class, ns1_WSJob_TYPE_QNAME);
        ns1_myWSVersioningRestoreObjects_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersioningRestoreObjects.class, ns1_WSVersioningRestoreObjects_TYPE_QNAME);
        ns1_myWSGetRole_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetRole.class, ns1_WSGetRole_TYPE_QNAME);
        ns1_myWSRegexSources_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexSources.class, ns1_WSRegexSources_TYPE_QNAME);
        ns1_myWSPutDocumentInAFileAsJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutDocumentInAFileAsJob.class, ns1_WSPutDocumentInAFileAsJob_TYPE_QNAME);
        ns1_myWSRoutingOrderArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingOrderArray.class, ns1_WSRoutingOrderArray_TYPE_QNAME);
        ns1_myWSTransformerContext_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerContext.class, ns1_WSTransformerContext_TYPE_QNAME);
        ns1_myWSTransformerV2PK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerV2PK.class, ns1_WSTransformerV2PK_TYPE_QNAME);
        ns1_myWSProjectItem_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSProjectItem.class, ns1_WSProjectItem_TYPE_QNAME);
        ns1_myWSGetTransform_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetTransform.class, ns1_WSGetTransform_TYPE_QNAME);
        ns1_myWSRoutingRule_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingRule.class, ns1_WSRoutingRule_TYPE_QNAME);
        ns1_myWSRoutingOrderV2PKArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingOrderV2PKArray.class, ns1_WSRoutingOrderV2PKArray_TYPE_QNAME);
        ns1_myWSExistsView_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExistsView.class, ns1_WSExistsView_TYPE_QNAME);
        ns1_myWSDeleteRoutingOrder_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteRoutingOrder.class, ns1_WSDeleteRoutingOrder_TYPE_QNAME);
        ns1_myWSDeleteInboundPlugin_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDeleteInboundPlugin.class, ns1_WSDeleteInboundPlugin_TYPE_QNAME);
        ns1_myWSRoutingOrderV2_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingOrderV2.class, ns1_WSRoutingOrderV2_TYPE_QNAME);
        ns1_myWSStoredProcedure_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSStoredProcedure.class, ns1_WSStoredProcedure_TYPE_QNAME);
        ns1_myWSMenuPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSMenuPK.class, ns1_WSMenuPK_TYPE_QNAME);
        ns1_myWSExecuteTransformerV2AsJob_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExecuteTransformerV2AsJob.class, ns1_WSExecuteTransformerV2AsJob_TYPE_QNAME);
        ns1_myWSRegexTransforms_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexTransforms.class, ns1_WSRegexTransforms_TYPE_QNAME);
        ns1_myWSRegexDestinations_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRegexDestinations.class, ns1_WSRegexDestinations_TYPE_QNAME);
        ns1_myWSOutboundHTMLBodyForm_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSOutboundHTMLBodyForm.class, ns1_WSOutboundHTMLBodyForm_TYPE_QNAME);
        ns1_myWSTransformPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformPK.class, ns1_WSTransformPK_TYPE_QNAME);
        ns1_myWSBoolean_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSBoolean.class, ns1_WSBoolean_TYPE_QNAME);
        ns1_myWSRoutingRulePKArray_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRoutingRulePKArray.class, ns1_WSRoutingRulePKArray_TYPE_QNAME);
        ns1_myWSTransformerPluginsList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSTransformerPluginsList.class, ns1_WSTransformerPluginsList_TYPE_QNAME);
        ns1_myWSExecuteStoredProcedure_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExecuteStoredProcedure.class, ns1_WSExecuteStoredProcedure_TYPE_QNAME);
        ns1_myWSConceptKey_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSConceptKey.class, ns1_WSConceptKey_TYPE_QNAME);
        ns1_myWSDestination_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDestination.class, ns1_WSDestination_TYPE_QNAME);
        ns1_myWSVersion_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSVersion.class, ns1_WSVersion_TYPE_QNAME);
        ns1_myWSGetVersioningSystemConfiguration_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetVersioningSystemConfiguration.class, ns1_WSGetVersioningSystemConfiguration_TYPE_QNAME);
        ns1_myWSRole_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSRole.class, ns1_WSRole_TYPE_QNAME);
        ns1_myWSExtractUsingTransformerThruView_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSExtractUsingTransformerThruView.class, ns1_WSExtractUsingTransformerThruView_TYPE_QNAME);
        ns1_myWSPutTransform_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutTransform.class, ns1_WSPutTransform_TYPE_QNAME);
        ns1_myWSPutDocumentInAString_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutDocumentInAString.class, ns1_WSPutDocumentInAString_TYPE_QNAME);
        ns1_myWSDestinationPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDestinationPK.class, ns1_WSDestinationPK_TYPE_QNAME);
        ns1_myWSGetItems_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetItems.class, ns1_WSGetItems_TYPE_QNAME);
        ns1_myWSPutDocumentInAFile_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSPutDocumentInAFile.class, ns1_WSPutDocumentInAFile_TYPE_QNAME);
        ns1_myWSUploadDocumentByChunks_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSUploadDocumentByChunks.class, ns1_WSUploadDocumentByChunks_TYPE_QNAME);
        ns1_myWSSource_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSSource.class, ns1_WSSource_TYPE_QNAME);
        ns1_myWSOutboundAdaptorPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSOutboundAdaptorPK.class, ns1_WSOutboundAdaptorPK_TYPE_QNAME);
        ns1_myWSGetRoutingRulePKs_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSGetRoutingRulePKs.class, ns1_WSGetRoutingRulePKs_TYPE_QNAME);
    }
    
    private static final QName _portName = new QName("urn-com-amalto-xtentis-webservice", "XtentisPort");
    private static final int putBackgroundJob_OPCODE = 0;
    private static final int getRole_OPCODE = 1;
    private static final int getMenu_OPCODE = 2;
    private static final int executeRoutingOrderV2Asynchronously_OPCODE = 3;
    private static final int getTransformerPKs_OPCODE = 4;
    private static final int processFileUsingTransformerAsBackgroundJob_OPCODE = 5;
    private static final int xPathsSearch_OPCODE = 6;
    private static final int getComponentVersion_OPCODE = 7;
    private static final int putView_OPCODE = 8;
    private static final int putTransformerPluginConfiguration_OPCODE = 9;
    private static final int getInboundAdaptorsByCriteria_OPCODE = 10;
    private static final int routeItemV2_OPCODE = 11;
    private static final int getSources_OPCODE = 12;
    private static final int getOutboundAdaptor_OPCODE = 13;
    private static final int getViewPKs_OPCODE = 14;
    private static final int existsRole_OPCODE = 15;
    private static final int existsRoutingOrder_OPCODE = 16;
    private static final int initMDM_OPCODE = 17;
    private static final int processBytesUsingTransformer_OPCODE = 18;
    private static final int executeStoredProcedure_OPCODE = 19;
    private static final int serviceAction_OPCODE = 20;
    private static final int getRolePKs_OPCODE = 21;
    private static final int getView_OPCODE = 22;
    private static final int getBusinessElementValues_OPCODE = 23;
    private static final int deleteMenu_OPCODE = 24;
    private static final int getOutboundPlugins_OPCODE = 25;
    private static final int deleteInboundAdaptor_OPCODE = 26;
    private static final int putBusinessConcept_OPCODE = 27;
    private static final int putMenu_OPCODE = 28;
    private static final int getJobs_OPCODE = 29;
    private static final int deleteRoutingOrder_OPCODE = 30;
    private static final int putInboundPlugin_OPCODE = 31;
    private static final int putStoredProcedure_OPCODE = 32;
    private static final int deleteDestination_OPCODE = 33;
    private static final int deleteTransformer_OPCODE = 34;
    private static final int getBusinessConcepts_OPCODE = 35;
    private static final int putRole_OPCODE = 36;
    private static final int putItem_OPCODE = 37;
    private static final int getTransformer_OPCODE = 38;
    private static final int getTransforms_OPCODE = 39;
    private static final int putDataCluster_OPCODE = 40;
    private static final int getTransformerV2PKs_OPCODE = 41;
    private static final int projectItem_OPCODE = 42;
    private static final int getStoredProcedure_OPCODE = 43;
    private static final int getServicesList_OPCODE = 44;
    private static final int existsDataModel_OPCODE = 45;
    private static final int getRoutingOrder_OPCODE = 46;
    private static final int getOutboundPlugin_OPCODE = 47;
    private static final int getDestination_OPCODE = 48;
    private static final int getRoutingRulePKs_OPCODE = 49;
    private static final int putVersioningSystemConfiguration_OPCODE = 50;
    private static final int extractUsingTransformerThruView_OPCODE = 51;
    private static final int versioningTagObjects_OPCODE = 52;
    private static final int deleteRole_OPCODE = 53;
    private static final int putTransformerPluginV2Configuration_OPCODE = 54;
    private static final int existsTransformerPlugin_OPCODE = 55;
    private static final int routeItemNow_OPCODE = 56;
    private static final int getVersioningSystemConfiguration_OPCODE = 57;
    private static final int getMenuPKs_OPCODE = 58;
    private static final int putTransformer_OPCODE = 59;
    private static final int getTransform_OPCODE = 60;
    private static final int getBackgroundJob_OPCODE = 61;
    private static final int getDocuments_OPCODE = 62;
    private static final int versioningRestoreItems_OPCODE = 63;
    private static final int existsTransformerV2_OPCODE = 64;
    private static final int deleteDataModel_OPCODE = 65;
    private static final int putDocumentInAString_OPCODE = 66;
    private static final int getStoredProcedurePKs_OPCODE = 67;
    private static final int executeInboundPlugin_OPCODE = 68;
    private static final int deleteOutboundPlugin_OPCODE = 69;
    private static final int deleteItems_OPCODE = 70;
    private static final int getOutboundHTMLBodyForm_OPCODE = 71;
    private static final int existsRoutingRule_OPCODE = 72;
    private static final int deleteRoutingRule_OPCODE = 73;
    private static final int getBusinessConceptKey_OPCODE = 74;
    private static final int extractUsingTransformer_OPCODE = 75;
    private static final int executeRoutingOrderNow_OPCODE = 76;
    private static final int putDocumentInAFile_OPCODE = 77;
    private static final int getItemPKsByCriteria_OPCODE = 78;
    private static final int deleteItem_OPCODE = 79;
    private static final int getTransformerV2_OPCODE = 80;
    private static final int putDocument2AsJob_OPCODE = 81;
    private static final int deleteTransformerV2_OPCODE = 82;
    private static final int executeRoutingOrderV2Synchronously_OPCODE = 83;
    private static final int processBytesUsingTransformerAsBackgroundJob_OPCODE = 84;
    private static final int executeTransformerV2_OPCODE = 85;
    private static final int getInboundPlugin_OPCODE = 86;
    private static final int deleteSource_OPCODE = 87;
    private static final int putDataModel_OPCODE = 88;
    private static final int versioningGetItemsHistory_OPCODE = 89;
    private static final int getInboundPluginsByCriteria_OPCODE = 90;
    private static final int getTransformerPluginV2Configuration_OPCODE = 91;
    private static final int findBackgroundJobPKs_OPCODE = 92;
    private static final int versioningGetInfo_OPCODE = 93;
    private static final int putSource_OPCODE = 94;
    private static final int deleteDocument_OPCODE = 95;
    private static final int existsView_OPCODE = 96;
    private static final int getTransformerPluginDetails_OPCODE = 97;
    private static final int deleteInboundPlugin_OPCODE = 98;
    private static final int putServiceConfiguration_OPCODE = 99;
    private static final int getItem_OPCODE = 100;
    private static final int getInboundAdaptors_OPCODE = 101;
    private static final int getServiceConfiguration_OPCODE = 102;
    private static final int putDestination_OPCODE = 103;
    private static final int directQuery_OPCODE = 104;
    private static final int putOutboundAdaptor_OPCODE = 105;
    private static final int getDestinations_OPCODE = 106;
    private static final int getRoutingOrdersByCriteria_OPCODE = 107;
    private static final int getTransformerPluginV2Details_OPCODE = 108;
    private static final int deleteView_OPCODE = 109;
    private static final int existsTransformer_OPCODE = 110;
    private static final int putTransform_OPCODE = 111;
    private static final int getConceptsInDataCluster_OPCODE = 112;
    private static final int getInboundPlugins_OPCODE = 113;
    private static final int putBusinessConceptSchema_OPCODE = 114;
    private static final int routerAction_OPCODE = 115;
    private static final int putDocument2_OPCODE = 116;
    private static final int getDataClusterPKs_OPCODE = 117;
    private static final int connectorInteraction_OPCODE = 118;
    private static final int getBusinessConceptValue_OPCODE = 119;
    private static final int deleteStoredProcedure_OPCODE = 120;
    private static final int quickSearch_OPCODE = 121;
    private static final int getSource_OPCODE = 122;
    private static final int getOutboundAdaptorsByCriteria_OPCODE = 123;
    private static final int getObjectsForRoles_OPCODE = 124;
    private static final int existsTransformerPluginV2_OPCODE = 125;
    private static final int existsDataCluster_OPCODE = 126;
    private static final int existsMenu_OPCODE = 127;
    private static final int singleExtract_OPCODE = 128;
    private static final int singleSearch_OPCODE = 129;
    private static final int getRoutingRule_OPCODE = 130;
    private static final int deleteRoutingOrderV2_OPCODE = 131;
    private static final int existsItem_OPCODE = 132;
    private static final int getDocumentsByCriteria_OPCODE = 133;
    private static final int uploadDocumentByChunks_OPCODE = 134;
    private static final int executeOutboundPlugin_OPCODE = 135;
    private static final int deleteBusinessConcept_OPCODE = 136;
    private static final int getInboundAdaptor_OPCODE = 137;
    private static final int ping_OPCODE = 138;
    private static final int versioningTagItems_OPCODE = 139;
    private static final int deleteTransform_OPCODE = 140;
    private static final int getInboundHTMLBodyForm_OPCODE = 141;
    private static final int getDataModel_OPCODE = 142;
    private static final int existsRoutingOrderV2_OPCODE = 143;
    private static final int getOutboundAdaptors_OPCODE = 144;
    private static final int putDocumentInAFileAsJob_OPCODE = 145;
    private static final int getItems_OPCODE = 146;
    private static final int extractItem_OPCODE = 147;
    private static final int putDocumentInAStringAsJob_OPCODE = 148;
    private static final int getDataCluster_OPCODE = 149;
    private static final int getDocument_OPCODE = 150;
    private static final int getRoutingOrderV2_OPCODE = 151;
    private static final int putJob_OPCODE = 152;
    private static final int putRoutingRule_OPCODE = 153;
    private static final int getOutboundPluginsByCriteria_OPCODE = 154;
    private static final int existsStoredProcedure_OPCODE = 155;
    private static final int executeTransformerV2AsJob_OPCODE = 156;
    private static final int putInboundAdaptor_OPCODE = 157;
    private static final int checkSchema_OPCODE = 158;
    private static final int putOutboundPlugin_OPCODE = 159;
    private static final int getDataModelPKs_OPCODE = 160;
    private static final int deleteOutboundAdaptor_OPCODE = 161;
    private static final int routingEngineV2Action_OPCODE = 162;
    private static final int processFileUsingTransformer_OPCODE = 163;
    private static final int getTransformerPluginV2sList_OPCODE = 164;
    private static final int versioningRestoreObjects_OPCODE = 165;
    private static final int getTransformerPluginsList_OPCODE = 166;
    private static final int putTransformerV2_OPCODE = 167;
    private static final int getRoutingOrderV2sByCriteria_OPCODE = 168;
    private static final int getTransformerPluginConfiguration_OPCODE = 169;
    private static final int deleteDataCluster_OPCODE = 170;
    private static final int getJob_OPCODE = 171;
    private static final int getRoutingOrderV2PKsByCriteria_OPCODE = 172;
    private static final int versioningGetObjectsHistory_OPCODE = 173;
    private static final QName ns1_putBackgroundJob_WSPutBackgroundJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutBackgroundJob");
    private static final QName ns1_WSPutBackgroundJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutBackgroundJob");
    private CombinedSerializer ns1_myWSPutBackgroundJob_LiteralSerializer;
    private static final QName ns1_putBackgroundJob_WSBackgroundJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJobPK");
    private static final QName ns1_WSBackgroundJobPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJobPK");
    private CombinedSerializer ns1_myWSBackgroundJobPK_LiteralSerializer;
    private static final QName ns1_getRole_WSGetRole_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRole");
    private static final QName ns1_WSGetRole_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRole");
    private CombinedSerializer ns1_myWSGetRole_LiteralSerializer;
    private static final QName ns1_getRole_WSRole_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRole");
    private static final QName ns1_WSRole_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRole");
    private CombinedSerializer ns1_myWSRole_LiteralSerializer;
    private static final QName ns1_getMenu_WSGetMenu_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetMenu");
    private static final QName ns1_WSGetMenu_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetMenu");
    private CombinedSerializer ns1_myWSGetMenu_LiteralSerializer;
    private static final QName ns1_getMenu_WSMenu_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSMenu");
    private static final QName ns1_WSMenu_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSMenu");
    private CombinedSerializer ns1_myWSMenu_LiteralSerializer;
    private static final QName ns1_executeRoutingOrderV2Asynchronously_WSExecuteRoutingOrderV2Asynchronously_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteRoutingOrderV2Asynchronously");
    private static final QName ns1_WSExecuteRoutingOrderV2Asynchronously_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteRoutingOrderV2Asynchronously");
    private CombinedSerializer ns1_myWSExecuteRoutingOrderV2Asynchronously_LiteralSerializer;
    private static final QName ns1_executeRoutingOrderV2Asynchronously_WSRoutingOrderV2PK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderV2PK");
    private static final QName ns1_WSRoutingOrderV2PK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderV2PK");
    private CombinedSerializer ns1_myWSRoutingOrderV2PK_LiteralSerializer;
    private static final QName ns1_getTransformerPKs_WSGetTransformerPKs_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerPKs");
    private static final QName ns1_WSGetTransformerPKs_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerPKs");
    private CombinedSerializer ns1_myWSGetTransformerPKs_LiteralSerializer;
    private static final QName ns1_getTransformerPKs_WSTransformerPKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPKArray");
    private static final QName ns1_WSTransformerPKArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPKArray");
    private CombinedSerializer ns1_myWSTransformerPKArray_LiteralSerializer;
    private static final QName ns1_processFileUsingTransformerAsBackgroundJob_WSProcessFileUsingTransformerAsBackgroundJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSProcessFileUsingTransformerAsBackgroundJob");
    private static final QName ns1_WSProcessFileUsingTransformerAsBackgroundJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSProcessFileUsingTransformerAsBackgroundJob");
    private CombinedSerializer ns1_myWSProcessFileUsingTransformerAsBackgroundJob_LiteralSerializer;
    private static final QName ns1_processFileUsingTransformerAsBackgroundJob_WSBackgroundJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJobPK");
    private static final QName ns1_xPathsSearch_WSXPathsSearch_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSXPathsSearch");
    private static final QName ns1_WSXPathsSearch_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSXPathsSearch");
    private CombinedSerializer ns1_myWSXPathsSearch_LiteralSerializer;
    private static final QName ns1_xPathsSearch_WSStringArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private static final QName ns1_WSStringArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private CombinedSerializer ns1_myWSStringArray_LiteralSerializer;
    private static final QName ns1_getComponentVersion_WSGetComponentVersion_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetComponentVersion");
    private static final QName ns1_WSGetComponentVersion_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetComponentVersion");
    private CombinedSerializer ns1_myWSGetComponentVersion_LiteralSerializer;
    private static final QName ns1_getComponentVersion_WSVersion_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersion");
    private static final QName ns1_WSVersion_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersion");
    private CombinedSerializer ns1_myWSVersion_LiteralSerializer;
    private static final QName ns1_putView_WSPutView_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutView");
    private static final QName ns1_WSPutView_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutView");
    private CombinedSerializer ns1_myWSPutView_LiteralSerializer;
    private static final QName ns1_putView_WSViewPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSViewPK");
    private static final QName ns1_WSViewPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSViewPK");
    private CombinedSerializer ns1_myWSViewPK_LiteralSerializer;
    private static final QName ns1_putTransformerPluginConfiguration_WSTransformerPluginPutConfiguration_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginPutConfiguration");
    private static final QName ns1_WSTransformerPluginPutConfiguration_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginPutConfiguration");
    private CombinedSerializer ns1_myWSTransformerPluginPutConfiguration_LiteralSerializer;
    private static final QName ns1_putTransformerPluginConfiguration_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_WSString_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private CombinedSerializer ns1_myWSString_LiteralSerializer;
    private static final QName ns1_getInboundAdaptorsByCriteria_WSGetInboundAdaptorsByCriteria_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetInboundAdaptorsByCriteria");
    private static final QName ns1_WSGetInboundAdaptorsByCriteria_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetInboundAdaptorsByCriteria");
    private CombinedSerializer ns1_myWSGetInboundAdaptorsByCriteria_LiteralSerializer;
    private static final QName ns1_getInboundAdaptorsByCriteria_WSInboundAdaptorArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundAdaptorArray");
    private static final QName ns1_WSInboundAdaptorArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundAdaptorArray");
    private CombinedSerializer ns1_myWSInboundAdaptorArray_LiteralSerializer;
    private static final QName ns1_routeItemV2_WSRouteItemV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRouteItemV2");
    private static final QName ns1_WSRouteItemV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRouteItemV2");
    private CombinedSerializer ns1_myWSRouteItemV2_LiteralSerializer;
    private static final QName ns1_routeItemV2_WSRoutingRulePKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingRulePKArray");
    private static final QName ns1_WSRoutingRulePKArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingRulePKArray");
    private CombinedSerializer ns1_myWSRoutingRulePKArray_LiteralSerializer;
    private static final QName ns1_getSources_WSRegexSources_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexSources");
    private static final QName ns1_WSRegexSources_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexSources");
    private CombinedSerializer ns1_myWSRegexSources_LiteralSerializer;
    private static final QName ns1_getSources_WSSourceArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSourceArray");
    private static final QName ns1_WSSourceArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSourceArray");
    private CombinedSerializer ns1_myWSSourceArray_LiteralSerializer;
    private static final QName ns1_getOutboundAdaptor_WSGetOutboundAdaptor_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetOutboundAdaptor");
    private static final QName ns1_WSGetOutboundAdaptor_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetOutboundAdaptor");
    private CombinedSerializer ns1_myWSGetOutboundAdaptor_LiteralSerializer;
    private static final QName ns1_getOutboundAdaptor_WSOutboundAdaptor_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundAdaptor");
    private static final QName ns1_WSOutboundAdaptor_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundAdaptor");
    private CombinedSerializer ns1_myWSOutboundAdaptor_LiteralSerializer;
    private static final QName ns1_getViewPKs_WSGetViewPKs_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetViewPKs");
    private static final QName ns1_WSGetViewPKs_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetViewPKs");
    private CombinedSerializer ns1_myWSGetViewPKs_LiteralSerializer;
    private static final QName ns1_getViewPKs_WSViewPKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSViewPKArray");
    private static final QName ns1_WSViewPKArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSViewPKArray");
    private CombinedSerializer ns1_myWSViewPKArray_LiteralSerializer;
    private static final QName ns1_existsRole_WSExistsRole_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsRole");
    private static final QName ns1_WSExistsRole_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsRole");
    private CombinedSerializer ns1_myWSExistsRole_LiteralSerializer;
    private static final QName ns1_existsRole_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_WSBoolean_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private CombinedSerializer ns1_myWSBoolean_LiteralSerializer;
    private static final QName ns1_existsRoutingOrder_WSExistsRoutingOrder_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsRoutingOrder");
    private static final QName ns1_WSExistsRoutingOrder_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsRoutingOrder");
    private CombinedSerializer ns1_myWSExistsRoutingOrder_LiteralSerializer;
    private static final QName ns1_existsRoutingOrder_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_initMDM_WSInitData_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInitData");
    private static final QName ns1_WSInitData_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInitData");
    private CombinedSerializer ns1_myWSInitData_LiteralSerializer;
    private static final QName ns1_initMDM_WSInt_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInt");
    private static final QName ns1_WSInt_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInt");
    private CombinedSerializer ns1_myWSInt_LiteralSerializer;
    private static final QName ns1_processBytesUsingTransformer_WSProcessBytesUsingTransformer_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSProcessBytesUsingTransformer");
    private static final QName ns1_WSProcessBytesUsingTransformer_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSProcessBytesUsingTransformer");
    private CombinedSerializer ns1_myWSProcessBytesUsingTransformer_LiteralSerializer;
    private static final QName ns1_processBytesUsingTransformer_WSPipeline_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPipeline");
    private static final QName ns1_WSPipeline_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPipeline");
    private CombinedSerializer ns1_myWSPipeline_LiteralSerializer;
    private static final QName ns1_executeStoredProcedure_WSExecuteStoredProcedure_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteStoredProcedure");
    private static final QName ns1_WSExecuteStoredProcedure_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteStoredProcedure");
    private CombinedSerializer ns1_myWSExecuteStoredProcedure_LiteralSerializer;
    private static final QName ns1_executeStoredProcedure_WSStringArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private static final QName ns1_serviceAction_WSServiceAction_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSServiceAction");
    private static final QName ns1_WSServiceAction_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSServiceAction");
    private CombinedSerializer ns1_myWSServiceAction_LiteralSerializer;
    private static final QName ns1_serviceAction_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_getRolePKs_WSGetRolePKs_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRolePKs");
    private static final QName ns1_WSGetRolePKs_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRolePKs");
    private CombinedSerializer ns1_myWSGetRolePKs_LiteralSerializer;
    private static final QName ns1_getRolePKs_WSRolePKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRolePKArray");
    private static final QName ns1_WSRolePKArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRolePKArray");
    private CombinedSerializer ns1_myWSRolePKArray_LiteralSerializer;
    private static final QName ns1_getView_WSGetView_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetView");
    private static final QName ns1_WSGetView_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetView");
    private CombinedSerializer ns1_myWSGetView_LiteralSerializer;
    private static final QName ns1_getView_WSView_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSView");
    private static final QName ns1_WSView_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSView");
    private CombinedSerializer ns1_myWSView_LiteralSerializer;
    private static final QName ns1_getBusinessElementValues_WSGetBusinessElementValues_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetBusinessElementValues");
    private static final QName ns1_WSGetBusinessElementValues_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetBusinessElementValues");
    private CombinedSerializer ns1_myWSGetBusinessElementValues_LiteralSerializer;
    private static final QName ns1_getBusinessElementValues_WSStringArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private static final QName ns1_deleteMenu_WSDeleteMenu_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteMenu");
    private static final QName ns1_WSDeleteMenu_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteMenu");
    private CombinedSerializer ns1_myWSDeleteMenu_LiteralSerializer;
    private static final QName ns1_deleteMenu_WSMenuPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSMenuPK");
    private static final QName ns1_WSMenuPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSMenuPK");
    private CombinedSerializer ns1_myWSMenuPK_LiteralSerializer;
    private static final QName ns1_getOutboundPlugins_WSRegexOutboundPlugins_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexOutboundPlugins");
    private static final QName ns1_WSRegexOutboundPlugins_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexOutboundPlugins");
    private CombinedSerializer ns1_myWSRegexOutboundPlugins_LiteralSerializer;
    private static final QName ns1_getOutboundPlugins_WSOutboundPluginArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundPluginArray");
    private static final QName ns1_WSOutboundPluginArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundPluginArray");
    private CombinedSerializer ns1_myWSOutboundPluginArray_LiteralSerializer;
    private static final QName ns1_deleteInboundAdaptor_WSDeleteInboundAdaptor_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteInboundAdaptor");
    private static final QName ns1_WSDeleteInboundAdaptor_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteInboundAdaptor");
    private CombinedSerializer ns1_myWSDeleteInboundAdaptor_LiteralSerializer;
    private static final QName ns1_deleteInboundAdaptor_WSInboundAdaptorPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundAdaptorPK");
    private static final QName ns1_WSInboundAdaptorPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundAdaptorPK");
    private CombinedSerializer ns1_myWSInboundAdaptorPK_LiteralSerializer;
    private static final QName ns1_putBusinessConcept_WSPutBusinessConcept_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutBusinessConcept");
    private static final QName ns1_WSPutBusinessConcept_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutBusinessConcept");
    private CombinedSerializer ns1_myWSPutBusinessConcept_LiteralSerializer;
    private static final QName ns1_putBusinessConcept_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_putMenu_WSPutMenu_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutMenu");
    private static final QName ns1_WSPutMenu_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutMenu");
    private CombinedSerializer ns1_myWSPutMenu_LiteralSerializer;
    private static final QName ns1_putMenu_WSMenuPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSMenuPK");
    private static final QName ns1_getJobs_WSRegexJobs_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexJobs");
    private static final QName ns1_WSRegexJobs_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexJobs");
    private CombinedSerializer ns1_myWSRegexJobs_LiteralSerializer;
    private static final QName ns1_getJobs_WSJobArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSJobArray");
    private static final QName ns1_WSJobArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSJobArray");
    private CombinedSerializer ns1_myWSJobArray_LiteralSerializer;
    private static final QName ns1_deleteRoutingOrder_WSDeleteRoutingOrder_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteRoutingOrder");
    private static final QName ns1_WSDeleteRoutingOrder_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteRoutingOrder");
    private CombinedSerializer ns1_myWSDeleteRoutingOrder_LiteralSerializer;
    private static final QName ns1_deleteRoutingOrder_WSRoutingOrderPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderPK");
    private static final QName ns1_WSRoutingOrderPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderPK");
    private CombinedSerializer ns1_myWSRoutingOrderPK_LiteralSerializer;
    private static final QName ns1_putInboundPlugin_WSPutInboundPlugin_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutInboundPlugin");
    private static final QName ns1_WSPutInboundPlugin_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutInboundPlugin");
    private CombinedSerializer ns1_myWSPutInboundPlugin_LiteralSerializer;
    private static final QName ns1_putInboundPlugin_WSInboundPluginPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundPluginPK");
    private static final QName ns1_WSInboundPluginPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundPluginPK");
    private CombinedSerializer ns1_myWSInboundPluginPK_LiteralSerializer;
    private static final QName ns1_putStoredProcedure_WSPutStoredProcedure_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutStoredProcedure");
    private static final QName ns1_WSPutStoredProcedure_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutStoredProcedure");
    private CombinedSerializer ns1_myWSPutStoredProcedure_LiteralSerializer;
    private static final QName ns1_putStoredProcedure_WSStoredProcedurePK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStoredProcedurePK");
    private static final QName ns1_WSStoredProcedurePK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStoredProcedurePK");
    private CombinedSerializer ns1_myWSStoredProcedurePK_LiteralSerializer;
    private static final QName ns1_deleteDestination_WSDeleteDestination_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteDestination");
    private static final QName ns1_WSDeleteDestination_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteDestination");
    private CombinedSerializer ns1_myWSDeleteDestination_LiteralSerializer;
    private static final QName ns1_deleteDestination_WSDestinationPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDestinationPK");
    private static final QName ns1_WSDestinationPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDestinationPK");
    private CombinedSerializer ns1_myWSDestinationPK_LiteralSerializer;
    private static final QName ns1_deleteTransformer_WSDeleteTransformer_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteTransformer");
    private static final QName ns1_WSDeleteTransformer_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteTransformer");
    private CombinedSerializer ns1_myWSDeleteTransformer_LiteralSerializer;
    private static final QName ns1_deleteTransformer_WSTransformerPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPK");
    private static final QName ns1_WSTransformerPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPK");
    private CombinedSerializer ns1_myWSTransformerPK_LiteralSerializer;
    private static final QName ns1_getBusinessConcepts_WSGetBusinessConcepts_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetBusinessConcepts");
    private static final QName ns1_WSGetBusinessConcepts_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetBusinessConcepts");
    private CombinedSerializer ns1_myWSGetBusinessConcepts_LiteralSerializer;
    private static final QName ns1_getBusinessConcepts_WSStringArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private static final QName ns1_putRole_WSPutRole_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutRole");
    private static final QName ns1_WSPutRole_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutRole");
    private CombinedSerializer ns1_myWSPutRole_LiteralSerializer;
    private static final QName ns1_putRole_WSRolePK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRolePK");
    private static final QName ns1_WSRolePK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRolePK");
    private CombinedSerializer ns1_myWSRolePK_LiteralSerializer;
    private static final QName ns1_putItem_WSPutItem_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutItem");
    private static final QName ns1_WSPutItem_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutItem");
    private CombinedSerializer ns1_myWSPutItem_LiteralSerializer;
    private static final QName ns1_putItem_WSItemPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSItemPK");
    private static final QName ns1_WSItemPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSItemPK");
    private CombinedSerializer ns1_myWSItemPK_LiteralSerializer;
    private static final QName ns1_getTransformer_WSGetTransformer_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformer");
    private static final QName ns1_WSGetTransformer_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformer");
    private CombinedSerializer ns1_myWSGetTransformer_LiteralSerializer;
    private static final QName ns1_getTransformer_WSTransformer_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformer");
    private static final QName ns1_WSTransformer_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformer");
    private CombinedSerializer ns1_myWSTransformer_LiteralSerializer;
    private static final QName ns1_getTransforms_WSRegexTransforms_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexTransforms");
    private static final QName ns1_WSRegexTransforms_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexTransforms");
    private CombinedSerializer ns1_myWSRegexTransforms_LiteralSerializer;
    private static final QName ns1_getTransforms_WSTransformArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformArray");
    private static final QName ns1_WSTransformArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformArray");
    private CombinedSerializer ns1_myWSTransformArray_LiteralSerializer;
    private static final QName ns1_putDataCluster_WSPutDataCluster_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDataCluster");
    private static final QName ns1_WSPutDataCluster_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDataCluster");
    private CombinedSerializer ns1_myWSPutDataCluster_LiteralSerializer;
    private static final QName ns1_putDataCluster_WSDataClusterPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataClusterPK");
    private static final QName ns1_WSDataClusterPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataClusterPK");
    private CombinedSerializer ns1_myWSDataClusterPK_LiteralSerializer;
    private static final QName ns1_getTransformerV2PKs_WSGetTransformerV2PKs_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerV2PKs");
    private static final QName ns1_WSGetTransformerV2PKs_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerV2PKs");
    private CombinedSerializer ns1_myWSGetTransformerV2PKs_LiteralSerializer;
    private static final QName ns1_getTransformerV2PKs_WSTransformerV2PKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerV2PKArray");
    private static final QName ns1_WSTransformerV2PKArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerV2PKArray");
    private CombinedSerializer ns1_myWSTransformerV2PKArray_LiteralSerializer;
    private static final QName ns1_projectItem_WSProjectItem_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSProjectItem");
    private static final QName ns1_WSProjectItem_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSProjectItem");
    private CombinedSerializer ns1_myWSProjectItem_LiteralSerializer;
    private static final QName ns1_projectItem_WSItemPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSItemPK");
    private static final QName ns1_getStoredProcedure_WSGetStoredProcedure_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetStoredProcedure");
    private static final QName ns1_WSGetStoredProcedure_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetStoredProcedure");
    private CombinedSerializer ns1_myWSGetStoredProcedure_LiteralSerializer;
    private static final QName ns1_getStoredProcedure_WSStoredProcedure_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStoredProcedure");
    private static final QName ns1_WSStoredProcedure_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStoredProcedure");
    private CombinedSerializer ns1_myWSStoredProcedure_LiteralSerializer;
    private static final QName ns1_getServicesList_WSGetServicesList_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetServicesList");
    private static final QName ns1_WSGetServicesList_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetServicesList");
    private CombinedSerializer ns1_myWSGetServicesList_LiteralSerializer;
    private static final QName ns1_getServicesList_WSServicesList_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSServicesList");
    private static final QName ns1_WSServicesList_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSServicesList");
    private CombinedSerializer ns1_myWSServicesList_LiteralSerializer;
    private static final QName ns1_existsDataModel_WSExistsDataModel_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsDataModel");
    private static final QName ns1_WSExistsDataModel_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsDataModel");
    private CombinedSerializer ns1_myWSExistsDataModel_LiteralSerializer;
    private static final QName ns1_existsDataModel_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_getRoutingOrder_WSGetRoutingOrder_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingOrder");
    private static final QName ns1_WSGetRoutingOrder_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingOrder");
    private CombinedSerializer ns1_myWSGetRoutingOrder_LiteralSerializer;
    private static final QName ns1_getRoutingOrder_WSRoutingOrder_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrder");
    private static final QName ns1_WSRoutingOrder_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrder");
    private CombinedSerializer ns1_myWSRoutingOrder_LiteralSerializer;
    private static final QName ns1_getOutboundPlugin_WSGetOutboundPlugin_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetOutboundPlugin");
    private static final QName ns1_WSGetOutboundPlugin_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetOutboundPlugin");
    private CombinedSerializer ns1_myWSGetOutboundPlugin_LiteralSerializer;
    private static final QName ns1_getOutboundPlugin_WSOutboundPlugin_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundPlugin");
    private static final QName ns1_WSOutboundPlugin_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundPlugin");
    private CombinedSerializer ns1_myWSOutboundPlugin_LiteralSerializer;
    private static final QName ns1_getDestination_WSGetDestination_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetDestination");
    private static final QName ns1_WSGetDestination_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetDestination");
    private CombinedSerializer ns1_myWSGetDestination_LiteralSerializer;
    private static final QName ns1_getDestination_WSDestination_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDestination");
    private static final QName ns1_WSDestination_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDestination");
    private CombinedSerializer ns1_myWSDestination_LiteralSerializer;
    private static final QName ns1_getRoutingRulePKs_WSGetRoutingRulePKs_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingRulePKs");
    private static final QName ns1_WSGetRoutingRulePKs_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingRulePKs");
    private CombinedSerializer ns1_myWSGetRoutingRulePKs_LiteralSerializer;
    private static final QName ns1_getRoutingRulePKs_WSRoutingRulePKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingRulePKArray");
    private static final QName ns1_putVersioningSystemConfiguration_WSPutVersioningSystemConfiguration_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutVersioningSystemConfiguration");
    private static final QName ns1_WSPutVersioningSystemConfiguration_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutVersioningSystemConfiguration");
    private CombinedSerializer ns1_myWSPutVersioningSystemConfiguration_LiteralSerializer;
    private static final QName ns1_putVersioningSystemConfiguration_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_extractUsingTransformerThruView_WSExtractUsingTransformerThruView_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExtractUsingTransformerThruView");
    private static final QName ns1_WSExtractUsingTransformerThruView_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExtractUsingTransformerThruView");
    private CombinedSerializer ns1_myWSExtractUsingTransformerThruView_LiteralSerializer;
    private static final QName ns1_extractUsingTransformerThruView_WSPipeline_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPipeline");
    private static final QName ns1_versioningTagObjects_WSVersioningTagObjects_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningTagObjects");
    private static final QName ns1_WSVersioningTagObjects_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningTagObjects");
    private CombinedSerializer ns1_myWSVersioningTagObjects_LiteralSerializer;
    private static final QName ns1_versioningTagObjects_WSBackgroundJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJobPK");
    private static final QName ns1_deleteRole_WSDeleteRole_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteRole");
    private static final QName ns1_WSDeleteRole_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteRole");
    private CombinedSerializer ns1_myWSDeleteRole_LiteralSerializer;
    private static final QName ns1_deleteRole_WSRolePK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRolePK");
    private static final QName ns1_putTransformerPluginV2Configuration_WSTransformerPluginV2PutConfiguration_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginV2PutConfiguration");
    private static final QName ns1_WSTransformerPluginV2PutConfiguration_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginV2PutConfiguration");
    private CombinedSerializer ns1_myWSTransformerPluginV2PutConfiguration_LiteralSerializer;
    private static final QName ns1_putTransformerPluginV2Configuration_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_existsTransformerPlugin_WSExistsTransformerPlugin_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsTransformerPlugin");
    private static final QName ns1_WSExistsTransformerPlugin_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsTransformerPlugin");
    private CombinedSerializer ns1_myWSExistsTransformerPlugin_LiteralSerializer;
    private static final QName ns1_existsTransformerPlugin_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_routeItemNow_WSRouteItemNow_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRouteItemNow");
    private static final QName ns1_WSRouteItemNow_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRouteItemNow");
    private CombinedSerializer ns1_myWSRouteItemNow_LiteralSerializer;
    private static final QName ns1_routeItemNow_WSRouterStatus_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRouterStatus");
    private static final QName ns1_WSRouterStatus_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRouterStatus");
    private CombinedSerializer ns1myns1_WSRouterStatus__WSRouterStatus_LiteralSerializer;
    private static final QName ns1_getVersioningSystemConfiguration_WSGetVersioningSystemConfiguration_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetVersioningSystemConfiguration");
    private static final QName ns1_WSGetVersioningSystemConfiguration_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetVersioningSystemConfiguration");
    private CombinedSerializer ns1_myWSGetVersioningSystemConfiguration_LiteralSerializer;
    private static final QName ns1_getVersioningSystemConfiguration_WSVersioningSystemConfiguration_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningSystemConfiguration");
    private static final QName ns1_WSVersioningSystemConfiguration_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningSystemConfiguration");
    private CombinedSerializer ns1_myWSVersioningSystemConfiguration_LiteralSerializer;
    private static final QName ns1_getMenuPKs_WSGetMenuPKs_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetMenuPKs");
    private static final QName ns1_WSGetMenuPKs_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetMenuPKs");
    private CombinedSerializer ns1_myWSGetMenuPKs_LiteralSerializer;
    private static final QName ns1_getMenuPKs_WSMenuPKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSMenuPKArray");
    private static final QName ns1_WSMenuPKArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSMenuPKArray");
    private CombinedSerializer ns1_myWSMenuPKArray_LiteralSerializer;
    private static final QName ns1_putTransformer_WSPutTransformer_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutTransformer");
    private static final QName ns1_WSPutTransformer_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutTransformer");
    private CombinedSerializer ns1_myWSPutTransformer_LiteralSerializer;
    private static final QName ns1_putTransformer_WSTransformerPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPK");
    private static final QName ns1_getTransform_WSGetTransform_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransform");
    private static final QName ns1_WSGetTransform_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransform");
    private CombinedSerializer ns1_myWSGetTransform_LiteralSerializer;
    private static final QName ns1_getTransform_WSTransform_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransform");
    private static final QName ns1_WSTransform_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransform");
    private CombinedSerializer ns1_myWSTransform_LiteralSerializer;
    private static final QName ns1_getBackgroundJob_WSGetBackgroundJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetBackgroundJob");
    private static final QName ns1_WSGetBackgroundJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetBackgroundJob");
    private CombinedSerializer ns1_myWSGetBackgroundJob_LiteralSerializer;
    private static final QName ns1_getBackgroundJob_WSBackgroundJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJob");
    private static final QName ns1_WSBackgroundJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJob");
    private CombinedSerializer ns1_myWSBackgroundJob_LiteralSerializer;
    private static final QName ns1_getDocuments_WSRegexDocuments_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexDocuments");
    private static final QName ns1_WSRegexDocuments_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexDocuments");
    private CombinedSerializer ns1_myWSRegexDocuments_LiteralSerializer;
    private static final QName ns1_getDocuments_WSDocumentArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDocumentArray");
    private static final QName ns1_WSDocumentArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDocumentArray");
    private CombinedSerializer ns1_myWSDocumentArray_LiteralSerializer;
    private static final QName ns1_versioningRestoreItems_WSVersioningRestoreItems_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningRestoreItems");
    private static final QName ns1_WSVersioningRestoreItems_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningRestoreItems");
    private CombinedSerializer ns1_myWSVersioningRestoreItems_LiteralSerializer;
    private static final QName ns1_versioningRestoreItems_WSBackgroundJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJobPK");
    private static final QName ns1_existsTransformerV2_WSExistsTransformerV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsTransformerV2");
    private static final QName ns1_WSExistsTransformerV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsTransformerV2");
    private CombinedSerializer ns1_myWSExistsTransformerV2_LiteralSerializer;
    private static final QName ns1_existsTransformerV2_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_deleteDataModel_WSDeleteDataModel_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteDataModel");
    private static final QName ns1_WSDeleteDataModel_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteDataModel");
    private CombinedSerializer ns1_myWSDeleteDataModel_LiteralSerializer;
    private static final QName ns1_deleteDataModel_WSDataModelPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataModelPK");
    private static final QName ns1_WSDataModelPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataModelPK");
    private CombinedSerializer ns1_myWSDataModelPK_LiteralSerializer;
    private static final QName ns1_putDocumentInAString_WSPutDocumentInAString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocumentInAString");
    private static final QName ns1_WSPutDocumentInAString_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocumentInAString");
    private CombinedSerializer ns1_myWSPutDocumentInAString_LiteralSerializer;
    private static final QName ns1_putDocumentInAString_WSDocumentPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDocumentPK");
    private static final QName ns1_WSDocumentPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDocumentPK");
    private CombinedSerializer ns1_myWSDocumentPK_LiteralSerializer;
    private static final QName ns1_getStoredProcedurePKs_WSRegexStoredProcedure_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexStoredProcedure");
    private static final QName ns1_WSRegexStoredProcedure_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexStoredProcedure");
    private CombinedSerializer ns1_myWSRegexStoredProcedure_LiteralSerializer;
    private static final QName ns1_getStoredProcedurePKs_WSStoredProcedurePKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStoredProcedurePKArray");
    private static final QName ns1_WSStoredProcedurePKArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStoredProcedurePKArray");
    private CombinedSerializer ns1_myWSStoredProcedurePKArray_LiteralSerializer;
    private static final QName ns1_executeInboundPlugin_WSExecuteInboundPlugin_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteInboundPlugin");
    private static final QName ns1_WSExecuteInboundPlugin_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteInboundPlugin");
    private CombinedSerializer ns1_myWSExecuteInboundPlugin_LiteralSerializer;
    private static final QName ns1_executeInboundPlugin_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_deleteOutboundPlugin_WSDeleteOutboundPlugin_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteOutboundPlugin");
    private static final QName ns1_WSDeleteOutboundPlugin_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteOutboundPlugin");
    private CombinedSerializer ns1_myWSDeleteOutboundPlugin_LiteralSerializer;
    private static final QName ns1_deleteOutboundPlugin_WSOutboundPluginPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundPluginPK");
    private static final QName ns1_WSOutboundPluginPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundPluginPK");
    private CombinedSerializer ns1_myWSOutboundPluginPK_LiteralSerializer;
    private static final QName ns1_deleteItems_WSDeleteItems_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteItems");
    private static final QName ns1_WSDeleteItems_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteItems");
    private CombinedSerializer ns1_myWSDeleteItems_LiteralSerializer;
    private static final QName ns1_deleteItems_WSInt_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInt");
    private static final QName ns1_getOutboundHTMLBodyForm_WSGetOutboundHTMLBodyForm_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetOutboundHTMLBodyForm");
    private static final QName ns1_WSGetOutboundHTMLBodyForm_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetOutboundHTMLBodyForm");
    private CombinedSerializer ns1_myWSGetOutboundHTMLBodyForm_LiteralSerializer;
    private static final QName ns1_getOutboundHTMLBodyForm_WSOutboundHTMLBodyForm_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundHTMLBodyForm");
    private static final QName ns1_WSOutboundHTMLBodyForm_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundHTMLBodyForm");
    private CombinedSerializer ns1_myWSOutboundHTMLBodyForm_LiteralSerializer;
    private static final QName ns1_existsRoutingRule_WSExistsRoutingRule_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsRoutingRule");
    private static final QName ns1_WSExistsRoutingRule_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsRoutingRule");
    private CombinedSerializer ns1_myWSExistsRoutingRule_LiteralSerializer;
    private static final QName ns1_existsRoutingRule_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_deleteRoutingRule_WSDeleteRoutingRule_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteRoutingRule");
    private static final QName ns1_WSDeleteRoutingRule_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteRoutingRule");
    private CombinedSerializer ns1_myWSDeleteRoutingRule_LiteralSerializer;
    private static final QName ns1_deleteRoutingRule_WSRoutingRulePK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingRulePK");
    private static final QName ns1_WSRoutingRulePK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingRulePK");
    private CombinedSerializer ns1_myWSRoutingRulePK_LiteralSerializer;
    private static final QName ns1_getBusinessConceptKey_WSGetBusinessConceptKey_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetBusinessConceptKey");
    private static final QName ns1_WSGetBusinessConceptKey_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetBusinessConceptKey");
    private CombinedSerializer ns1_myWSGetBusinessConceptKey_LiteralSerializer;
    private static final QName ns1_getBusinessConceptKey_WSConceptKey_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSConceptKey");
    private static final QName ns1_WSConceptKey_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSConceptKey");
    private CombinedSerializer ns1_myWSConceptKey_LiteralSerializer;
    private static final QName ns1_extractUsingTransformer_WSExtractUsingTransformer_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExtractUsingTransformer");
    private static final QName ns1_WSExtractUsingTransformer_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExtractUsingTransformer");
    private CombinedSerializer ns1_myWSExtractUsingTransformer_LiteralSerializer;
    private static final QName ns1_extractUsingTransformer_WSPipeline_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPipeline");
    private static final QName ns1_executeRoutingOrderNow_WSExecuteRoutingOrderNow_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteRoutingOrderNow");
    private static final QName ns1_WSExecuteRoutingOrderNow_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteRoutingOrderNow");
    private CombinedSerializer ns1_myWSExecuteRoutingOrderNow_LiteralSerializer;
    private static final QName ns1_executeRoutingOrderNow_WSRouterStatus_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRouterStatus");
    private static final QName ns1_putDocumentInAFile_WSPutDocumentInAFile_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocumentInAFile");
    private static final QName ns1_WSPutDocumentInAFile_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocumentInAFile");
    private CombinedSerializer ns1_myWSPutDocumentInAFile_LiteralSerializer;
    private static final QName ns1_putDocumentInAFile_WSDocumentPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDocumentPK");
    private static final QName ns1_getItemPKsByCriteria_WSGetItemPKsByCriteria_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetItemPKsByCriteria");
    private static final QName ns1_WSGetItemPKsByCriteria_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetItemPKsByCriteria");
    private CombinedSerializer ns1_myWSGetItemPKsByCriteria_LiteralSerializer;
    private static final QName ns1_getItemPKsByCriteria_WSItemPKsByCriteriaResponse_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSItemPKsByCriteriaResponse");
    private static final QName ns1_WSItemPKsByCriteriaResponse_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSItemPKsByCriteriaResponse");
    private CombinedSerializer ns1_myWSItemPKsByCriteriaResponse_LiteralSerializer;
    private static final QName ns1_deleteItem_WSDeleteItem_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteItem");
    private static final QName ns1_WSDeleteItem_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteItem");
    private CombinedSerializer ns1_myWSDeleteItem_LiteralSerializer;
    private static final QName ns1_deleteItem_WSItemPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSItemPK");
    private static final QName ns1_getTransformerV2_WSGetTransformerV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerV2");
    private static final QName ns1_WSGetTransformerV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerV2");
    private CombinedSerializer ns1_myWSGetTransformerV2_LiteralSerializer;
    private static final QName ns1_getTransformerV2_WSTransformerV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerV2");
    private static final QName ns1_WSTransformerV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerV2");
    private CombinedSerializer ns1_myWSTransformerV2_LiteralSerializer;
    private static final QName ns1_putDocument2AsJob_WSPutDocument2AsJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocument2AsJob");
    private static final QName ns1_WSPutDocument2AsJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocument2AsJob");
    private CombinedSerializer ns1_myWSPutDocument2AsJob_LiteralSerializer;
    private static final QName ns1_putDocument2AsJob_WSJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSJobPK");
    private static final QName ns1_WSJobPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSJobPK");
    private CombinedSerializer ns1_myWSJobPK_LiteralSerializer;
    private static final QName ns1_deleteTransformerV2_WSDeleteTransformerV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteTransformerV2");
    private static final QName ns1_WSDeleteTransformerV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteTransformerV2");
    private CombinedSerializer ns1_myWSDeleteTransformerV2_LiteralSerializer;
    private static final QName ns1_deleteTransformerV2_WSTransformerV2PK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerV2PK");
    private static final QName ns1_WSTransformerV2PK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerV2PK");
    private CombinedSerializer ns1_myWSTransformerV2PK_LiteralSerializer;
    private static final QName ns1_executeRoutingOrderV2Synchronously_WSExecuteRoutingOrderV2Synchronously_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteRoutingOrderV2Synchronously");
    private static final QName ns1_WSExecuteRoutingOrderV2Synchronously_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteRoutingOrderV2Synchronously");
    private CombinedSerializer ns1_myWSExecuteRoutingOrderV2Synchronously_LiteralSerializer;
    private static final QName ns1_executeRoutingOrderV2Synchronously_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_processBytesUsingTransformerAsBackgroundJob_WSProcessBytesUsingTransformerAsBackgroundJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSProcessBytesUsingTransformerAsBackgroundJob");
    private static final QName ns1_WSProcessBytesUsingTransformerAsBackgroundJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSProcessBytesUsingTransformerAsBackgroundJob");
    private CombinedSerializer ns1_myWSProcessBytesUsingTransformerAsBackgroundJob_LiteralSerializer;
    private static final QName ns1_processBytesUsingTransformerAsBackgroundJob_WSBackgroundJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJobPK");
    private static final QName ns1_executeTransformerV2_WSExecuteTransformerV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteTransformerV2");
    private static final QName ns1_WSExecuteTransformerV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteTransformerV2");
    private CombinedSerializer ns1_myWSExecuteTransformerV2_LiteralSerializer;
    private static final QName ns1_executeTransformerV2_WSTransformerContext_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerContext");
    private static final QName ns1_WSTransformerContext_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerContext");
    private CombinedSerializer ns1_myWSTransformerContext_LiteralSerializer;
    private static final QName ns1_getInboundPlugin_WSGetInboundPlugin_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetInboundPlugin");
    private static final QName ns1_WSGetInboundPlugin_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetInboundPlugin");
    private CombinedSerializer ns1_myWSGetInboundPlugin_LiteralSerializer;
    private static final QName ns1_getInboundPlugin_WSInboundPlugin_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundPlugin");
    private static final QName ns1_WSInboundPlugin_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundPlugin");
    private CombinedSerializer ns1_myWSInboundPlugin_LiteralSerializer;
    private static final QName ns1_deleteSource_WSDeleteSource_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteSource");
    private static final QName ns1_WSDeleteSource_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteSource");
    private CombinedSerializer ns1_myWSDeleteSource_LiteralSerializer;
    private static final QName ns1_deleteSource_WSSourcePK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSourcePK");
    private static final QName ns1_WSSourcePK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSourcePK");
    private CombinedSerializer ns1_myWSSourcePK_LiteralSerializer;
    private static final QName ns1_putDataModel_WSPutDataModel_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDataModel");
    private static final QName ns1_WSPutDataModel_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDataModel");
    private CombinedSerializer ns1_myWSPutDataModel_LiteralSerializer;
    private static final QName ns1_putDataModel_WSDataModelPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataModelPK");
    private static final QName ns1_versioningGetItemsHistory_WSVersioningGetItemsHistory_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningGetItemsHistory");
    private static final QName ns1_WSVersioningGetItemsHistory_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningGetItemsHistory");
    private CombinedSerializer ns1_myWSVersioningGetItemsHistory_LiteralSerializer;
    private static final QName ns1_versioningGetItemsHistory_WSVersioningItemsHistory_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningItemsHistory");
    private static final QName ns1_WSVersioningItemsHistory_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningItemsHistory");
    private CombinedSerializer ns1_myWSVersioningItemsHistory_LiteralSerializer;
    private static final QName ns1_getInboundPluginsByCriteria_WSGetInboundPluginsByCriteria_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetInboundPluginsByCriteria");
    private static final QName ns1_WSGetInboundPluginsByCriteria_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetInboundPluginsByCriteria");
    private CombinedSerializer ns1_myWSGetInboundPluginsByCriteria_LiteralSerializer;
    private static final QName ns1_getInboundPluginsByCriteria_WSInboundPluginArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundPluginArray");
    private static final QName ns1_WSInboundPluginArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundPluginArray");
    private CombinedSerializer ns1_myWSInboundPluginArray_LiteralSerializer;
    private static final QName ns1_getTransformerPluginV2Configuration_WSTransformerPluginV2GetConfiguration_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginV2GetConfiguration");
    private static final QName ns1_WSTransformerPluginV2GetConfiguration_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginV2GetConfiguration");
    private CombinedSerializer ns1_myWSTransformerPluginV2GetConfiguration_LiteralSerializer;
    private static final QName ns1_getTransformerPluginV2Configuration_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_findBackgroundJobPKs_WSFindBackgroundJobPKs_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSFindBackgroundJobPKs");
    private static final QName ns1_WSFindBackgroundJobPKs_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSFindBackgroundJobPKs");
    private CombinedSerializer ns1_myWSFindBackgroundJobPKs_LiteralSerializer;
    private static final QName ns1_findBackgroundJobPKs_WSBackgroundJobPKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJobPKArray");
    private static final QName ns1_WSBackgroundJobPKArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJobPKArray");
    private CombinedSerializer ns1_myWSBackgroundJobPKArray_LiteralSerializer;
    private static final QName ns1_versioningGetInfo_WSVersioningGetInfo_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningGetInfo");
    private static final QName ns1_WSVersioningGetInfo_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningGetInfo");
    private CombinedSerializer ns1_myWSVersioningGetInfo_LiteralSerializer;
    private static final QName ns1_versioningGetInfo_WSVersioningInfo_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningInfo");
    private static final QName ns1_WSVersioningInfo_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningInfo");
    private CombinedSerializer ns1_myWSVersioningInfo_LiteralSerializer;
    private static final QName ns1_putSource_WSPutSource_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutSource");
    private static final QName ns1_WSPutSource_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutSource");
    private CombinedSerializer ns1_myWSPutSource_LiteralSerializer;
    private static final QName ns1_putSource_WSSourcePK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSourcePK");
    private static final QName ns1_deleteDocument_WSDeleteDocument_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteDocument");
    private static final QName ns1_WSDeleteDocument_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteDocument");
    private CombinedSerializer ns1_myWSDeleteDocument_LiteralSerializer;
    private static final QName ns1_deleteDocument_WSDocumentPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDocumentPK");
    private static final QName ns1_existsView_WSExistsView_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsView");
    private static final QName ns1_WSExistsView_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsView");
    private CombinedSerializer ns1_myWSExistsView_LiteralSerializer;
    private static final QName ns1_existsView_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_getTransformerPluginDetails_WSGetTransformerPluginDetails_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerPluginDetails");
    private static final QName ns1_WSGetTransformerPluginDetails_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerPluginDetails");
    private CombinedSerializer ns1_myWSGetTransformerPluginDetails_LiteralSerializer;
    private static final QName ns1_getTransformerPluginDetails_WSTransformerPluginDetails_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginDetails");
    private static final QName ns1_WSTransformerPluginDetails_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginDetails");
    private CombinedSerializer ns1_myWSTransformerPluginDetails_LiteralSerializer;
    private static final QName ns1_deleteInboundPlugin_WSDeleteInboundPlugin_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteInboundPlugin");
    private static final QName ns1_WSDeleteInboundPlugin_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteInboundPlugin");
    private CombinedSerializer ns1_myWSDeleteInboundPlugin_LiteralSerializer;
    private static final QName ns1_deleteInboundPlugin_WSInboundPluginPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundPluginPK");
    private static final QName ns1_putServiceConfiguration_WSServicePutConfiguration_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSServicePutConfiguration");
    private static final QName ns1_WSServicePutConfiguration_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSServicePutConfiguration");
    private CombinedSerializer ns1_myWSServicePutConfiguration_LiteralSerializer;
    private static final QName ns1_putServiceConfiguration_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_getItem_WSGetItem_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetItem");
    private static final QName ns1_WSGetItem_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetItem");
    private CombinedSerializer ns1_myWSGetItem_LiteralSerializer;
    private static final QName ns1_getItem_WSItem_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSItem");
    private static final QName ns1_WSItem_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSItem");
    private CombinedSerializer ns1_myWSItem_LiteralSerializer;
    private static final QName ns1_getInboundAdaptors_WSRegexInboundAdaptors_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexInboundAdaptors");
    private static final QName ns1_WSRegexInboundAdaptors_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexInboundAdaptors");
    private CombinedSerializer ns1_myWSRegexInboundAdaptors_LiteralSerializer;
    private static final QName ns1_getInboundAdaptors_WSInboundAdaptorArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundAdaptorArray");
    private static final QName ns1_getServiceConfiguration_WSServiceGetConfiguration_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSServiceGetConfiguration");
    private static final QName ns1_WSServiceGetConfiguration_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSServiceGetConfiguration");
    private CombinedSerializer ns1_myWSServiceGetConfiguration_LiteralSerializer;
    private static final QName ns1_getServiceConfiguration_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_putDestination_WSPutDestination_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDestination");
    private static final QName ns1_WSPutDestination_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDestination");
    private CombinedSerializer ns1_myWSPutDestination_LiteralSerializer;
    private static final QName ns1_putDestination_WSDestinationPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDestinationPK");
    private static final QName ns1_directQuery_WSDirectQuery_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDirectQuery");
    private static final QName ns1_WSDirectQuery_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDirectQuery");
    private CombinedSerializer ns1_myWSDirectQuery_LiteralSerializer;
    private static final QName ns1_directQuery_WSStringArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private static final QName ns1_putOutboundAdaptor_WSPutOutboundAdaptor_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutOutboundAdaptor");
    private static final QName ns1_WSPutOutboundAdaptor_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutOutboundAdaptor");
    private CombinedSerializer ns1_myWSPutOutboundAdaptor_LiteralSerializer;
    private static final QName ns1_putOutboundAdaptor_WSOutboundAdaptorPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundAdaptorPK");
    private static final QName ns1_WSOutboundAdaptorPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundAdaptorPK");
    private CombinedSerializer ns1_myWSOutboundAdaptorPK_LiteralSerializer;
    private static final QName ns1_getDestinations_WSRegexDestinations_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexDestinations");
    private static final QName ns1_WSRegexDestinations_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexDestinations");
    private CombinedSerializer ns1_myWSRegexDestinations_LiteralSerializer;
    private static final QName ns1_getDestinations_WSDestinationArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDestinationArray");
    private static final QName ns1_WSDestinationArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDestinationArray");
    private CombinedSerializer ns1_myWSDestinationArray_LiteralSerializer;
    private static final QName ns1_getRoutingOrdersByCriteria_WSGetRoutingOrdersByCriteria_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingOrdersByCriteria");
    private static final QName ns1_WSGetRoutingOrdersByCriteria_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingOrdersByCriteria");
    private CombinedSerializer ns1_myWSGetRoutingOrdersByCriteria_LiteralSerializer;
    private static final QName ns1_getRoutingOrdersByCriteria_WSRoutingOrderArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderArray");
    private static final QName ns1_WSRoutingOrderArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderArray");
    private CombinedSerializer ns1_myWSRoutingOrderArray_LiteralSerializer;
    private static final QName ns1_getTransformerPluginV2Details_WSGetTransformerPluginV2Details_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerPluginV2Details");
    private static final QName ns1_WSGetTransformerPluginV2Details_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerPluginV2Details");
    private CombinedSerializer ns1_myWSGetTransformerPluginV2Details_LiteralSerializer;
    private static final QName ns1_getTransformerPluginV2Details_WSTransformerPluginV2Details_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginV2Details");
    private static final QName ns1_WSTransformerPluginV2Details_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginV2Details");
    private CombinedSerializer ns1_myWSTransformerPluginV2Details_LiteralSerializer;
    private static final QName ns1_deleteView_WSDeleteView_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteView");
    private static final QName ns1_WSDeleteView_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteView");
    private CombinedSerializer ns1_myWSDeleteView_LiteralSerializer;
    private static final QName ns1_deleteView_WSViewPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSViewPK");
    private static final QName ns1_existsTransformer_WSExistsTransformer_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsTransformer");
    private static final QName ns1_WSExistsTransformer_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsTransformer");
    private CombinedSerializer ns1_myWSExistsTransformer_LiteralSerializer;
    private static final QName ns1_existsTransformer_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_putTransform_WSPutTransform_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutTransform");
    private static final QName ns1_WSPutTransform_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutTransform");
    private CombinedSerializer ns1_myWSPutTransform_LiteralSerializer;
    private static final QName ns1_putTransform_WSTransformPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformPK");
    private static final QName ns1_WSTransformPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformPK");
    private CombinedSerializer ns1_myWSTransformPK_LiteralSerializer;
    private static final QName ns1_getConceptsInDataCluster_WSGetConceptsInDataCluster_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetConceptsInDataCluster");
    private static final QName ns1_WSGetConceptsInDataCluster_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetConceptsInDataCluster");
    private CombinedSerializer ns1_myWSGetConceptsInDataCluster_LiteralSerializer;
    private static final QName ns1_getConceptsInDataCluster_WSStringArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private static final QName ns1_getInboundPlugins_WSRegexInboundPlugins_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexInboundPlugins");
    private static final QName ns1_WSRegexInboundPlugins_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexInboundPlugins");
    private CombinedSerializer ns1_myWSRegexInboundPlugins_LiteralSerializer;
    private static final QName ns1_getInboundPlugins_WSInboundPluginArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundPluginArray");
    private static final QName ns1_putBusinessConceptSchema_WSPutBusinessConceptSchema_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutBusinessConceptSchema");
    private static final QName ns1_WSPutBusinessConceptSchema_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutBusinessConceptSchema");
    private CombinedSerializer ns1_myWSPutBusinessConceptSchema_LiteralSerializer;
    private static final QName ns1_putBusinessConceptSchema_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_routerAction_WSRouterAction_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRouterAction");
    private static final QName ns1_WSRouterAction_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRouterAction");
    private CombinedSerializer ns1_myWSRouterAction_LiteralSerializer;
    private static final QName ns1_routerAction_WSRouterStatus_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRouterStatus");
    private static final QName ns1_putDocument2_WSPutDocument2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocument2");
    private static final QName ns1_WSPutDocument2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocument2");
    private CombinedSerializer ns1_myWSPutDocument2_LiteralSerializer;
    private static final QName ns1_putDocument2_WSDocumentPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDocumentPK");
    private static final QName ns1_getDataClusterPKs_WSRegexDataClusterPKs_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexDataClusterPKs");
    private static final QName ns1_WSRegexDataClusterPKs_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexDataClusterPKs");
    private CombinedSerializer ns1_myWSRegexDataClusterPKs_LiteralSerializer;
    private static final QName ns1_getDataClusterPKs_WSDataClusterPKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataClusterPKArray");
    private static final QName ns1_WSDataClusterPKArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataClusterPKArray");
    private CombinedSerializer ns1_myWSDataClusterPKArray_LiteralSerializer;
    private static final QName ns1_connectorInteraction_WSConnectorInteraction_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSConnectorInteraction");
    private static final QName ns1_WSConnectorInteraction_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSConnectorInteraction");
    private CombinedSerializer ns1_myWSConnectorInteraction_LiteralSerializer;
    private static final QName ns1_connectorInteraction_WSConnectorInteractionResponse_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSConnectorInteractionResponse");
    private static final QName ns1_WSConnectorInteractionResponse_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSConnectorInteractionResponse");
    private CombinedSerializer ns1_myWSConnectorInteractionResponse_LiteralSerializer;
    private static final QName ns1_getBusinessConceptValue_WSGetBusinessConceptValue_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetBusinessConceptValue");
    private static final QName ns1_WSGetBusinessConceptValue_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetBusinessConceptValue");
    private CombinedSerializer ns1_myWSGetBusinessConceptValue_LiteralSerializer;
    private static final QName ns1_getBusinessConceptValue_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_deleteStoredProcedure_WSDeleteStoredProcedure_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteStoredProcedure");
    private static final QName ns1_WSDeleteStoredProcedure_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteStoredProcedure");
    private CombinedSerializer ns1_myWSDeleteStoredProcedure_LiteralSerializer;
    private static final QName ns1_deleteStoredProcedure_WSStoredProcedurePK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStoredProcedurePK");
    private static final QName ns1_quickSearch_WSQuickSearch_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSQuickSearch");
    private static final QName ns1_WSQuickSearch_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSQuickSearch");
    private CombinedSerializer ns1_myWSQuickSearch_LiteralSerializer;
    private static final QName ns1_quickSearch_WSStringArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private static final QName ns1_getSource_WSGetSource_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetSource");
    private static final QName ns1_WSGetSource_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetSource");
    private CombinedSerializer ns1_myWSGetSource_LiteralSerializer;
    private static final QName ns1_getSource_WSSource_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSource");
    private static final QName ns1_WSSource_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSource");
    private CombinedSerializer ns1_myWSSource_LiteralSerializer;
    private static final QName ns1_getOutboundAdaptorsByCriteria_WSGetOutboundAdaptorsByCriteria_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetOutboundAdaptorsByCriteria");
    private static final QName ns1_WSGetOutboundAdaptorsByCriteria_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetOutboundAdaptorsByCriteria");
    private CombinedSerializer ns1_myWSGetOutboundAdaptorsByCriteria_LiteralSerializer;
    private static final QName ns1_getOutboundAdaptorsByCriteria_WSOutboundAdaptorArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundAdaptorArray");
    private static final QName ns1_WSOutboundAdaptorArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundAdaptorArray");
    private CombinedSerializer ns1_myWSOutboundAdaptorArray_LiteralSerializer;
    private static final QName ns1_getObjectsForRoles_WSGetObjectsForRoles_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetObjectsForRoles");
    private static final QName ns1_WSGetObjectsForRoles_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetObjectsForRoles");
    private CombinedSerializer ns1_myWSGetObjectsForRoles_LiteralSerializer;
    private static final QName ns1_getObjectsForRoles_WSStringArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private static final QName ns1_existsTransformerPluginV2_WSExistsTransformerPluginV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsTransformerPluginV2");
    private static final QName ns1_WSExistsTransformerPluginV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsTransformerPluginV2");
    private CombinedSerializer ns1_myWSExistsTransformerPluginV2_LiteralSerializer;
    private static final QName ns1_existsTransformerPluginV2_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_existsDataCluster_WSExistsDataCluster_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsDataCluster");
    private static final QName ns1_WSExistsDataCluster_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsDataCluster");
    private CombinedSerializer ns1_myWSExistsDataCluster_LiteralSerializer;
    private static final QName ns1_existsDataCluster_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_existsMenu_WSExistsMenu_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsMenu");
    private static final QName ns1_WSExistsMenu_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsMenu");
    private CombinedSerializer ns1_myWSExistsMenu_LiteralSerializer;
    private static final QName ns1_existsMenu_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_singleExtract_WSSingleExtract_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSingleExtract");
    private static final QName ns1_WSSingleExtract_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSingleExtract");
    private CombinedSerializer ns1_myWSSingleExtract_LiteralSerializer;
    private static final QName ns1_singleExtract_WSStringArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private static final QName ns1_singleSearch_WSSingleSearch_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSingleSearch");
    private static final QName ns1_WSSingleSearch_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSSingleSearch");
    private CombinedSerializer ns1_myWSSingleSearch_LiteralSerializer;
    private static final QName ns1_singleSearch_WSStringArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private static final QName ns1_getRoutingRule_WSGetRoutingRule_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingRule");
    private static final QName ns1_WSGetRoutingRule_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingRule");
    private CombinedSerializer ns1_myWSGetRoutingRule_LiteralSerializer;
    private static final QName ns1_getRoutingRule_WSRoutingRule_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingRule");
    private static final QName ns1_WSRoutingRule_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingRule");
    private CombinedSerializer ns1_myWSRoutingRule_LiteralSerializer;
    private static final QName ns1_deleteRoutingOrderV2_WSDeleteRoutingOrderV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteRoutingOrderV2");
    private static final QName ns1_WSDeleteRoutingOrderV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteRoutingOrderV2");
    private CombinedSerializer ns1_myWSDeleteRoutingOrderV2_LiteralSerializer;
    private static final QName ns1_deleteRoutingOrderV2_WSRoutingOrderV2PK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderV2PK");
    private static final QName ns1_existsItem_WSExistsItem_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsItem");
    private static final QName ns1_WSExistsItem_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsItem");
    private CombinedSerializer ns1_myWSExistsItem_LiteralSerializer;
    private static final QName ns1_existsItem_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_getDocumentsByCriteria_WSGetDocumentsByCriteria_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetDocumentsByCriteria");
    private static final QName ns1_WSGetDocumentsByCriteria_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetDocumentsByCriteria");
    private CombinedSerializer ns1_myWSGetDocumentsByCriteria_LiteralSerializer;
    private static final QName ns1_getDocumentsByCriteria_WSDocumentArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDocumentArray");
    private static final QName ns1_uploadDocumentByChunks_WSUploadDocumentByChunks_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSUploadDocumentByChunks");
    private static final QName ns1_WSUploadDocumentByChunks_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSUploadDocumentByChunks");
    private CombinedSerializer ns1_myWSUploadDocumentByChunks_LiteralSerializer;
    private static final QName ns1_uploadDocumentByChunks_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_executeOutboundPlugin_WSExecuteOutboundPlugin_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteOutboundPlugin");
    private static final QName ns1_WSExecuteOutboundPlugin_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteOutboundPlugin");
    private CombinedSerializer ns1_myWSExecuteOutboundPlugin_LiteralSerializer;
    private static final QName ns1_executeOutboundPlugin_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_deleteBusinessConcept_WSDeleteBusinessConcept_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteBusinessConcept");
    private static final QName ns1_WSDeleteBusinessConcept_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteBusinessConcept");
    private CombinedSerializer ns1_myWSDeleteBusinessConcept_LiteralSerializer;
    private static final QName ns1_deleteBusinessConcept_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_getInboundAdaptor_WSGetInboundAdaptor_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetInboundAdaptor");
    private static final QName ns1_WSGetInboundAdaptor_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetInboundAdaptor");
    private CombinedSerializer ns1_myWSGetInboundAdaptor_LiteralSerializer;
    private static final QName ns1_getInboundAdaptor_WSInboundAdaptor_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundAdaptor");
    private static final QName ns1_WSInboundAdaptor_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundAdaptor");
    private CombinedSerializer ns1_myWSInboundAdaptor_LiteralSerializer;
    private static final QName ns1_ping_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_versioningTagItems_WSVersioningTagItems_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningTagItems");
    private static final QName ns1_WSVersioningTagItems_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningTagItems");
    private CombinedSerializer ns1_myWSVersioningTagItems_LiteralSerializer;
    private static final QName ns1_versioningTagItems_WSBackgroundJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJobPK");
    private static final QName ns1_deleteTransform_WSDeleteTransform_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteTransform");
    private static final QName ns1_WSDeleteTransform_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteTransform");
    private CombinedSerializer ns1_myWSDeleteTransform_LiteralSerializer;
    private static final QName ns1_deleteTransform_WSTransformPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformPK");
    private static final QName ns1_getInboundHTMLBodyForm_WSGetInboundHTMLBodyForm_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetInboundHTMLBodyForm");
    private static final QName ns1_WSGetInboundHTMLBodyForm_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetInboundHTMLBodyForm");
    private CombinedSerializer ns1_myWSGetInboundHTMLBodyForm_LiteralSerializer;
    private static final QName ns1_getInboundHTMLBodyForm_WSInboundHTMLBodyForm_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundHTMLBodyForm");
    private static final QName ns1_WSInboundHTMLBodyForm_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundHTMLBodyForm");
    private CombinedSerializer ns1_myWSInboundHTMLBodyForm_LiteralSerializer;
    private static final QName ns1_getDataModel_WSGetDataModel_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetDataModel");
    private static final QName ns1_WSGetDataModel_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetDataModel");
    private CombinedSerializer ns1_myWSGetDataModel_LiteralSerializer;
    private static final QName ns1_getDataModel_WSDataModel_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataModel");
    private static final QName ns1_WSDataModel_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataModel");
    private CombinedSerializer ns1_myWSDataModel_LiteralSerializer;
    private static final QName ns1_existsRoutingOrderV2_WSExistsRoutingOrderV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsRoutingOrderV2");
    private static final QName ns1_WSExistsRoutingOrderV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsRoutingOrderV2");
    private CombinedSerializer ns1_myWSExistsRoutingOrderV2_LiteralSerializer;
    private static final QName ns1_existsRoutingOrderV2_WSRoutingOrderV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderV2");
    private static final QName ns1_WSRoutingOrderV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderV2");
    private CombinedSerializer ns1_myWSRoutingOrderV2_LiteralSerializer;
    private static final QName ns1_getOutboundAdaptors_WSRegexOutboundAdaptors_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexOutboundAdaptors");
    private static final QName ns1_WSRegexOutboundAdaptors_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexOutboundAdaptors");
    private CombinedSerializer ns1_myWSRegexOutboundAdaptors_LiteralSerializer;
    private static final QName ns1_getOutboundAdaptors_WSOutboundAdaptorArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundAdaptorArray");
    private static final QName ns1_putDocumentInAFileAsJob_WSPutDocumentInAFileAsJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocumentInAFileAsJob");
    private static final QName ns1_WSPutDocumentInAFileAsJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocumentInAFileAsJob");
    private CombinedSerializer ns1_myWSPutDocumentInAFileAsJob_LiteralSerializer;
    private static final QName ns1_putDocumentInAFileAsJob_WSJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSJobPK");
    private static final QName ns1_getItems_WSGetItems_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetItems");
    private static final QName ns1_WSGetItems_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetItems");
    private CombinedSerializer ns1_myWSGetItems_LiteralSerializer;
    private static final QName ns1_getItems_WSStringArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSStringArray");
    private static final QName ns1_extractItem_WSExtractItem_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExtractItem");
    private static final QName ns1_WSExtractItem_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExtractItem");
    private CombinedSerializer ns1_myWSExtractItem_LiteralSerializer;
    private static final QName ns1_extractItem_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_putDocumentInAStringAsJob_WSPutDocumentInAStringAsJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocumentInAStringAsJob");
    private static final QName ns1_WSPutDocumentInAStringAsJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutDocumentInAStringAsJob");
    private CombinedSerializer ns1_myWSPutDocumentInAStringAsJob_LiteralSerializer;
    private static final QName ns1_putDocumentInAStringAsJob_WSJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSJobPK");
    private static final QName ns1_getDataCluster_WSGetDataCluster_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetDataCluster");
    private static final QName ns1_WSGetDataCluster_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetDataCluster");
    private CombinedSerializer ns1_myWSGetDataCluster_LiteralSerializer;
    private static final QName ns1_getDataCluster_WSDataCluster_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataCluster");
    private static final QName ns1_WSDataCluster_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataCluster");
    private CombinedSerializer ns1_myWSDataCluster_LiteralSerializer;
    private static final QName ns1_getDocument_WSGetDocument_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetDocument");
    private static final QName ns1_WSGetDocument_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetDocument");
    private CombinedSerializer ns1_myWSGetDocument_LiteralSerializer;
    private static final QName ns1_getDocument_WSDocument_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDocument");
    private static final QName ns1_WSDocument_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDocument");
    private CombinedSerializer ns1_myWSDocument_LiteralSerializer;
    private static final QName ns1_getRoutingOrderV2_WSGetRoutingOrderV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingOrderV2");
    private static final QName ns1_WSGetRoutingOrderV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingOrderV2");
    private CombinedSerializer ns1_myWSGetRoutingOrderV2_LiteralSerializer;
    private static final QName ns1_getRoutingOrderV2_WSRoutingOrderV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderV2");
    private static final QName ns1_putJob_WSPutJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutJob");
    private static final QName ns1_WSPutJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutJob");
    private CombinedSerializer ns1_myWSPutJob_LiteralSerializer;
    private static final QName ns1_putJob_WSJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSJobPK");
    private static final QName ns1_putRoutingRule_WSPutRoutingRule_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutRoutingRule");
    private static final QName ns1_WSPutRoutingRule_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutRoutingRule");
    private CombinedSerializer ns1_myWSPutRoutingRule_LiteralSerializer;
    private static final QName ns1_putRoutingRule_WSRoutingRulePK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingRulePK");
    private static final QName ns1_getOutboundPluginsByCriteria_WSGetOutboundPluginsByCriteria_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetOutboundPluginsByCriteria");
    private static final QName ns1_WSGetOutboundPluginsByCriteria_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetOutboundPluginsByCriteria");
    private CombinedSerializer ns1_myWSGetOutboundPluginsByCriteria_LiteralSerializer;
    private static final QName ns1_getOutboundPluginsByCriteria_WSOutboundPluginArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundPluginArray");
    private static final QName ns1_existsStoredProcedure_WSExistsStoredProcedure_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsStoredProcedure");
    private static final QName ns1_WSExistsStoredProcedure_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExistsStoredProcedure");
    private CombinedSerializer ns1_myWSExistsStoredProcedure_LiteralSerializer;
    private static final QName ns1_existsStoredProcedure_WSBoolean_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBoolean");
    private static final QName ns1_executeTransformerV2AsJob_WSExecuteTransformerV2AsJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteTransformerV2AsJob");
    private static final QName ns1_WSExecuteTransformerV2AsJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSExecuteTransformerV2AsJob");
    private CombinedSerializer ns1_myWSExecuteTransformerV2AsJob_LiteralSerializer;
    private static final QName ns1_executeTransformerV2AsJob_WSBackgroundJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJobPK");
    private static final QName ns1_putInboundAdaptor_WSPutInboundAdaptor_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutInboundAdaptor");
    private static final QName ns1_WSPutInboundAdaptor_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutInboundAdaptor");
    private CombinedSerializer ns1_myWSPutInboundAdaptor_LiteralSerializer;
    private static final QName ns1_putInboundAdaptor_WSInboundAdaptorPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundAdaptorPK");
    private static final QName ns1_checkSchema_WSCheckSchema_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSCheckSchema");
    private static final QName ns1_WSCheckSchema_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSCheckSchema");
    private CombinedSerializer ns1_myWSCheckSchema_LiteralSerializer;
    private static final QName ns1_checkSchema_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_putOutboundPlugin_WSPutOutboundPlugin_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutOutboundPlugin");
    private static final QName ns1_WSPutOutboundPlugin_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutOutboundPlugin");
    private CombinedSerializer ns1_myWSPutOutboundPlugin_LiteralSerializer;
    private static final QName ns1_putOutboundPlugin_WSOutboundPluginPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundPluginPK");
    private static final QName ns1_getDataModelPKs_WSRegexDataModelPKs_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexDataModelPKs");
    private static final QName ns1_WSRegexDataModelPKs_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRegexDataModelPKs");
    private CombinedSerializer ns1_myWSRegexDataModelPKs_LiteralSerializer;
    private static final QName ns1_getDataModelPKs_WSDataModelPKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataModelPKArray");
    private static final QName ns1_WSDataModelPKArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataModelPKArray");
    private CombinedSerializer ns1_myWSDataModelPKArray_LiteralSerializer;
    private static final QName ns1_deleteOutboundAdaptor_WSDeleteOutboundAdaptor_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteOutboundAdaptor");
    private static final QName ns1_WSDeleteOutboundAdaptor_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteOutboundAdaptor");
    private CombinedSerializer ns1_myWSDeleteOutboundAdaptor_LiteralSerializer;
    private static final QName ns1_deleteOutboundAdaptor_WSOutboundAdaptorPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSOutboundAdaptorPK");
    private static final QName ns1_routingEngineV2Action_WSRoutingEngineV2Action_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingEngineV2Action");
    private static final QName ns1_WSRoutingEngineV2Action_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingEngineV2Action");
    private CombinedSerializer ns1_myWSRoutingEngineV2Action_LiteralSerializer;
    private static final QName ns1_routingEngineV2Action_WSRoutingEngineV2Status_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingEngineV2Status");
    private static final QName ns1_WSRoutingEngineV2Status_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingEngineV2Status");
    private CombinedSerializer ns1myns1_WSRoutingEngineV2Status__WSRoutingEngineV2Status_LiteralSerializer;
    private static final QName ns1_processFileUsingTransformer_WSProcessFileUsingTransformer_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSProcessFileUsingTransformer");
    private static final QName ns1_WSProcessFileUsingTransformer_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSProcessFileUsingTransformer");
    private CombinedSerializer ns1_myWSProcessFileUsingTransformer_LiteralSerializer;
    private static final QName ns1_processFileUsingTransformer_WSPipeline_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPipeline");
    private static final QName ns1_getTransformerPluginV2sList_WSGetTransformerPluginV2sList_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerPluginV2sList");
    private static final QName ns1_WSGetTransformerPluginV2sList_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerPluginV2sList");
    private CombinedSerializer ns1_myWSGetTransformerPluginV2SList_LiteralSerializer;
    private static final QName ns1_getTransformerPluginV2sList_WSTransformerPluginV2sList_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginV2sList");
    private static final QName ns1_WSTransformerPluginV2sList_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginV2sList");
    private CombinedSerializer ns1_myWSTransformerPluginV2SList_LiteralSerializer;
    private static final QName ns1_versioningRestoreObjects_WSVersioningRestoreObjects_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningRestoreObjects");
    private static final QName ns1_WSVersioningRestoreObjects_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningRestoreObjects");
    private CombinedSerializer ns1_myWSVersioningRestoreObjects_LiteralSerializer;
    private static final QName ns1_versioningRestoreObjects_WSBackgroundJobPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSBackgroundJobPK");
    private static final QName ns1_getTransformerPluginsList_WSGetTransformerPluginsList_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerPluginsList");
    private static final QName ns1_WSGetTransformerPluginsList_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetTransformerPluginsList");
    private CombinedSerializer ns1_myWSGetTransformerPluginsList_LiteralSerializer;
    private static final QName ns1_getTransformerPluginsList_WSTransformerPluginsList_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginsList");
    private static final QName ns1_WSTransformerPluginsList_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginsList");
    private CombinedSerializer ns1_myWSTransformerPluginsList_LiteralSerializer;
    private static final QName ns1_putTransformerV2_WSPutTransformerV2_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutTransformerV2");
    private static final QName ns1_WSPutTransformerV2_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSPutTransformerV2");
    private CombinedSerializer ns1_myWSPutTransformerV2_LiteralSerializer;
    private static final QName ns1_putTransformerV2_WSTransformerV2PK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerV2PK");
    private static final QName ns1_getRoutingOrderV2sByCriteria_WSGetRoutingOrderV2sByCriteria_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingOrderV2sByCriteria");
    private static final QName ns1_WSGetRoutingOrderV2sByCriteria_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingOrderV2sByCriteria");
    private CombinedSerializer ns1_myWSGetRoutingOrderV2SByCriteria_LiteralSerializer;
    private static final QName ns1_getRoutingOrderV2sByCriteria_WSRoutingOrderV2Array_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderV2Array");
    private static final QName ns1_WSRoutingOrderV2Array_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderV2Array");
    private CombinedSerializer ns1_myWSRoutingOrderV2Array_LiteralSerializer;
    private static final QName ns1_getTransformerPluginConfiguration_WSTransformerPluginGetConfiguration_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginGetConfiguration");
    private static final QName ns1_WSTransformerPluginGetConfiguration_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSTransformerPluginGetConfiguration");
    private CombinedSerializer ns1_myWSTransformerPluginGetConfiguration_LiteralSerializer;
    private static final QName ns1_getTransformerPluginConfiguration_WSString_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSString");
    private static final QName ns1_deleteDataCluster_WSDeleteDataCluster_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteDataCluster");
    private static final QName ns1_WSDeleteDataCluster_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDeleteDataCluster");
    private CombinedSerializer ns1_myWSDeleteDataCluster_LiteralSerializer;
    private static final QName ns1_deleteDataCluster_WSDataClusterPK_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataClusterPK");
    private static final QName ns1_getJob_WSGetJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetJob");
    private static final QName ns1_WSGetJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetJob");
    private CombinedSerializer ns1_myWSGetJob_LiteralSerializer;
    private static final QName ns1_getJob_WSJob_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSJob");
    private static final QName ns1_WSJob_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSJob");
    private CombinedSerializer ns1_myWSJob_LiteralSerializer;
    private static final QName ns1_getRoutingOrderV2PKsByCriteria_WSGetRoutingOrderV2PKsByCriteria_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingOrderV2PKsByCriteria");
    private static final QName ns1_WSGetRoutingOrderV2PKsByCriteria_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSGetRoutingOrderV2PKsByCriteria");
    private CombinedSerializer ns1_myWSGetRoutingOrderV2PKsByCriteria_LiteralSerializer;
    private static final QName ns1_getRoutingOrderV2PKsByCriteria_WSRoutingOrderV2PKArray_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderV2PKArray");
    private static final QName ns1_WSRoutingOrderV2PKArray_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSRoutingOrderV2PKArray");
    private CombinedSerializer ns1_myWSRoutingOrderV2PKArray_LiteralSerializer;
    private static final QName ns1_versioningGetObjectsHistory_WSVersioningGetObjectsHistory_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningGetObjectsHistory");
    private static final QName ns1_WSVersioningGetObjectsHistory_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningGetObjectsHistory");
    private CombinedSerializer ns1_myWSVersioningGetObjectsHistory_LiteralSerializer;
    private static final QName ns1_versioningGetObjectsHistory_WSVersioningObjectsHistory_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningObjectsHistory");
    private static final QName ns1_WSVersioningObjectsHistory_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSVersioningObjectsHistory");
    private CombinedSerializer ns1_myWSVersioningObjectsHistory_LiteralSerializer;
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "urn-com-amalto-xtentis-webservice"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
