// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, construire R40)
// Generated source version: 1.1.2

package com.amalto.workbench.webservices;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.xsd.XSDConstants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;

public class WSDocument_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable  {
    private static final QName ns1_name_QNAME = new QName("", "name");
    private static final QName ns3_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns3_myns3_string__java_lang_String_String_Serializer;
    private static final QName ns1_description_QNAME = new QName("", "description");
    private static final QName ns1_wsInboundAdaptorPK_QNAME = new QName("", "wsInboundAdaptorPK");
    private static final QName ns2_WSInboundAdaptorPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSInboundAdaptorPK");
    private CombinedSerializer ns2_myWSInboundAdaptorPK_LiteralSerializer;
    private static final QName ns1_keepInCache_QNAME = new QName("", "keepInCache");
    private static final QName ns3_boolean_TYPE_QNAME = SchemaConstants.QNAME_TYPE_BOOLEAN;
    private CombinedSerializer ns3_myns3__boolean__boolean_Boolean_Serializer;
    private static final QName ns1_wsCacheDataClusterPK_QNAME = new QName("", "wsCacheDataClusterPK");
    private static final QName ns2_WSDataClusterPK_TYPE_QNAME = new QName("urn-com-amalto-xtentis-webservice", "WSDataClusterPK");
    private CombinedSerializer ns2_myWSDataClusterPK_LiteralSerializer;
    private static final QName ns1_wsAutoAddDataClusterPKs_QNAME = new QName("", "wsAutoAddDataClusterPKs");
    private static final QName ns1_wsAutoUpdateDataClusterPKs_QNAME = new QName("", "wsAutoUpdateDataClusterPKs");
    private static final QName ns1_wsAutoRemoveDataClusterPKs_QNAME = new QName("", "wsAutoRemoveDataClusterPKs");
    private static final QName ns1_xslt_QNAME = new QName("", "xslt");
    
    public WSDocument_LiteralSerializer(QName type, String encodingStyle) {
        this(type, encodingStyle, false);
    }
    
    public WSDocument_LiteralSerializer(QName type, String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns3_myns3_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns3_string_TYPE_QNAME);
        ns2_myWSInboundAdaptorPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSInboundAdaptorPK.class, ns2_WSInboundAdaptorPK_TYPE_QNAME);
        ns3_myns3__boolean__boolean_Boolean_Serializer = (CombinedSerializer)registry.getSerializer("", boolean.class, ns3_boolean_TYPE_QNAME);
        ns2_myWSDataClusterPK_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", com.amalto.workbench.webservices.WSDataClusterPK.class, ns2_WSDataClusterPK_TYPE_QNAME);
    }
    
    public Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        com.amalto.workbench.webservices.WSDocument instance = new com.amalto.workbench.webservices.WSDocument();
        Object member=null;
        QName elementName;
        List values;
        Object value;
        
        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_name_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_name_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setName((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_name_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_description_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_description_QNAME, reader, context);
                instance.setDescription((java.lang.String)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_description_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_wsInboundAdaptorPK_QNAME)) {
                member = ns2_myWSInboundAdaptorPK_LiteralSerializer.deserialize(ns1_wsInboundAdaptorPK_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setWsInboundAdaptorPK((com.amalto.workbench.webservices.WSInboundAdaptorPK)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_wsInboundAdaptorPK_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_keepInCache_QNAME)) {
                member = ns3_myns3__boolean__boolean_Boolean_Serializer.deserialize(ns1_keepInCache_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setKeepInCache(((Boolean)member).booleanValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_keepInCache_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_wsCacheDataClusterPK_QNAME)) {
                member = ns2_myWSDataClusterPK_LiteralSerializer.deserialize(ns1_wsCacheDataClusterPK_QNAME, reader, context);
                instance.setWsCacheDataClusterPK((com.amalto.workbench.webservices.WSDataClusterPK)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_wsCacheDataClusterPK_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_wsAutoAddDataClusterPKs_QNAME))) {
            values = new ArrayList();
            for(;;) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_wsAutoAddDataClusterPKs_QNAME))) {
                    value = ns2_myWSDataClusterPK_LiteralSerializer.deserialize(ns1_wsAutoAddDataClusterPKs_QNAME, reader, context);
                    if (value == null) {
                        throw new DeserializationException("literal.unexpectedNull");
                    }
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new com.amalto.workbench.webservices.WSDataClusterPK[values.size()];
            member = values.toArray((Object[]) member);
            instance.setWsAutoAddDataClusterPKs((com.amalto.workbench.webservices.WSDataClusterPK[])member);
        }
        else {
            instance.setWsAutoAddDataClusterPKs(new com.amalto.workbench.webservices.WSDataClusterPK[0]);
        }
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_wsAutoUpdateDataClusterPKs_QNAME))) {
            values = new ArrayList();
            for(;;) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_wsAutoUpdateDataClusterPKs_QNAME))) {
                    value = ns2_myWSDataClusterPK_LiteralSerializer.deserialize(ns1_wsAutoUpdateDataClusterPKs_QNAME, reader, context);
                    if (value == null) {
                        throw new DeserializationException("literal.unexpectedNull");
                    }
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new com.amalto.workbench.webservices.WSDataClusterPK[values.size()];
            member = values.toArray((Object[]) member);
            instance.setWsAutoUpdateDataClusterPKs((com.amalto.workbench.webservices.WSDataClusterPK[])member);
        }
        else {
            instance.setWsAutoUpdateDataClusterPKs(new com.amalto.workbench.webservices.WSDataClusterPK[0]);
        }
        elementName = reader.getName();
        if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_wsAutoRemoveDataClusterPKs_QNAME))) {
            values = new ArrayList();
            for(;;) {
                elementName = reader.getName();
                if ((reader.getState() == XMLReader.START) && (elementName.equals(ns1_wsAutoRemoveDataClusterPKs_QNAME))) {
                    value = ns2_myWSDataClusterPK_LiteralSerializer.deserialize(ns1_wsAutoRemoveDataClusterPKs_QNAME, reader, context);
                    if (value == null) {
                        throw new DeserializationException("literal.unexpectedNull");
                    }
                    values.add(value);
                    reader.nextElementContent();
                } else {
                    break;
                }
            }
            member = new com.amalto.workbench.webservices.WSDataClusterPK[values.size()];
            member = values.toArray((Object[]) member);
            instance.setWsAutoRemoveDataClusterPKs((com.amalto.workbench.webservices.WSDataClusterPK[])member);
        }
        else {
            instance.setWsAutoRemoveDataClusterPKs(new com.amalto.workbench.webservices.WSDataClusterPK[0]);
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_xslt_QNAME)) {
                member = ns3_myns3_string__java_lang_String_String_Serializer.deserialize(ns1_xslt_QNAME, reader, context);
                instance.setXslt((java.lang.String)member);
                reader.nextElementContent();
            }
        }
        
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (Object)instance;
    }
    
    public void doSerializeAttributes(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.amalto.workbench.webservices.WSDocument instance = (com.amalto.workbench.webservices.WSDocument)obj;
        
    }
    public void doSerialize(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        com.amalto.workbench.webservices.WSDocument instance = (com.amalto.workbench.webservices.WSDocument)obj;
        
        if (instance.getName() == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getName(), ns1_name_QNAME, null, writer, context);
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getDescription(), ns1_description_QNAME, null, writer, context);
        if (instance.getWsInboundAdaptorPK() == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myWSInboundAdaptorPK_LiteralSerializer.serialize(instance.getWsInboundAdaptorPK(), ns1_wsInboundAdaptorPK_QNAME, null, writer, context);
        if (new Boolean(instance.isKeepInCache()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns3_myns3__boolean__boolean_Boolean_Serializer.serialize(new Boolean(instance.isKeepInCache()), ns1_keepInCache_QNAME, null, writer, context);
        ns2_myWSDataClusterPK_LiteralSerializer.serialize(instance.getWsCacheDataClusterPK(), ns1_wsCacheDataClusterPK_QNAME, null, writer, context);
        if (instance.getWsAutoAddDataClusterPKs() != null) {
            for (int i = 0; i < instance.getWsAutoAddDataClusterPKs().length; ++i) {
                ns2_myWSDataClusterPK_LiteralSerializer.serialize(instance.getWsAutoAddDataClusterPKs()[i], ns1_wsAutoAddDataClusterPKs_QNAME, null, writer, context);
            }
        }
        if (instance.getWsAutoUpdateDataClusterPKs() != null) {
            for (int i = 0; i < instance.getWsAutoUpdateDataClusterPKs().length; ++i) {
                ns2_myWSDataClusterPK_LiteralSerializer.serialize(instance.getWsAutoUpdateDataClusterPKs()[i], ns1_wsAutoUpdateDataClusterPKs_QNAME, null, writer, context);
            }
        }
        if (instance.getWsAutoRemoveDataClusterPKs() != null) {
            for (int i = 0; i < instance.getWsAutoRemoveDataClusterPKs().length; ++i) {
                ns2_myWSDataClusterPK_LiteralSerializer.serialize(instance.getWsAutoRemoveDataClusterPKs()[i], ns1_wsAutoRemoveDataClusterPKs_QNAME, null, writer, context);
            }
        }
        ns3_myns3_string__java_lang_String_String_Serializer.serialize(instance.getXslt(), ns1_xslt_QNAME, null, writer, context);
    }
}
